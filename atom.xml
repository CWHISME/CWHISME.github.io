<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangJiaYing</title>
  
  <subtitle>人不能没有梦想，也要有足够的敬畏</subtitle>
  <link href="https://cwhisme.github.io/atom.xml" rel="self"/>
  
  <link href="https://cwhisme.github.io/"/>
  <updated>2023-01-02T08:33:32.789Z</updated>
  <id>https://cwhisme.github.io/</id>
  
  <author>
    <name>CWHISME</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Shoka图床又挂了这件事</title>
    <link href="https://cwhisme.github.io/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://cwhisme.github.io/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2023-01-01T11:09:08.000Z</published>
    <updated>2023-01-02T08:33:32.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。</p><p>目前的情况是，本地调试可以，但一旦发布，那边直接就阻止访问了 —— 本地右键 -&gt; 转到 直接取访问一样会被 403 阻止，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_19-17-32.jpg" alt="" /></p><p>不信点一点：<span class="exturl" data-url="aHR0cHM6Ly90dmEzLnNpbmFpbWcuY29tL2xhcmdlLzY4MzM5MzlibHkxZ2lwZXVpYms5ZmoyMHprMG04YXkyLmpwZw==">我也忘了这是哪张图了</span></p><p>估计被整了域名白名单之类的东西。</p><p>Shoka 随机图片的 API 使用的是 Gimhoy 提供的图床，实际上依赖于 Sina 的服务器，而且 —— 这个功能貌似是开发者自己开发的，听说是依赖于新浪微博的相册啥功能弄的，网上搜索了一下 —— 所以其实貌似根本没有『新浪图床』这么个东西，都是玩家自己整的。</p><p>而且早在 2019 年就有文章提到这个被屏蔽了，虽然不知道为啥前几天 (大概 2022 年 12 月 28 号左右) 才又挂掉 —— 反正等了几天之后，现在还是依然是挂掉的情况，满屏 403，没啥变正常的反应。</p><p>看着没办法了，想着恐怕只能放 GitPages 一块了。</p><p>还好 Shoka 是懒加载，理论上讲就算图片慢不至于影响网页本身加载速度。</p><h1 id="下载备份"><a class="anchor" href="#下载备份">#</a> 下载备份</h1><p>因为目前本地还是可以访问『新浪图床』的，这个可能也是官方留给目前白嫖图床的各位一个备份图片的机会 —— 也会后面啥时候没准也会屏蔽这个接口。</p><p>所以趁本地还能拉图片，就想着把那批图片先拉下来。</p><p>一开始想着用 js 下载，搞了半天没整好... 后边想着不如用 C# 写个小工具，顶多可能需要在请求头模仿一下  <code>http://localhost</code>  的情况。</p><p>然后试了下其实没那么麻烦 —— 随便一个本地的申请接口就是可以下载的，都不需要改什么请求头，于是简单利用  <code>HttpClient</code>  直接在 Unity 里边写了个下载代码，通过读取  <code>images.yml</code>  把里面配置的所有图片都下载下来：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">HttpClient</span> HttpRequest</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DownloadTextures/Download"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"D:\MyOthers\JavaScripts\WebSite1\HexoBlog\Hexo\source\_data\images.yml"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 大图</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 小图</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"mw690"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"../Downloads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> localPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resPath<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 下载</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> nameList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"请求下载："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">await</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token function">GetUrl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> localPath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> HttpRequest<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsByteArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> downPicPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>downPicPath<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==>OK："</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUrl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"https://tva"</span> <span class="token operator">+</span> randomServer <span class="token operator">+</span> <span class="token string">".sinaimg.cn/"</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token char">'/'</span> <span class="token operator">+</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> randomServer</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token keyword">return</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这些图片前几天刚失效就下载下来了，等了两天，没看到其它谁修复的 —— 网上其它使用 Shoka 主题的基本都还是满屏 403，唯一看到一个正常的还是使用的自己的 CDN。</p><p>毕竟是微博直接屏蔽了接口，觉得这次可能是真挂了。</p><h1 id="裁剪与压缩"><a class="anchor" href="#裁剪与压缩">#</a> 裁剪与压缩</h1><p>没办法，少了这些随机的背景图，就觉得缺了不少东西，加上现在感觉 GitPages 速度也还算可以，所以决定先直接放 GitPages 算了。</p><p>不过，毕竟图片不是使用 CDN 了，能减少一点最好就减少一点，免得真卡网的时候半天都在加载，也是糟糕的体验。</p><p>于是研究了下如何把这一堆图的大小尽量减少。</p><h2 id="分辨率分析"><a class="anchor" href="#分辨率分析">#</a> 分辨率分析</h2><p>目前页面上的 cover —— 即每个文章的图片分辨率通过审查元素查出来大约是  <code>643x224</code> ，实际上从新浪图床下载下来的图片，mw690 大小的至少也有  <code>690x400</code> 。</p><p>所以我们看到的图，实际能显示出来都是被『截取』过一半的，大约就只显示中间部分。</p><p>如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_20-08-44.jpg" alt="" /></p><p>所以在分辨率这一块，应该是可以手动截取，减少原图大小的。</p><p>由于涉及到图片操作，我选择直接在 Unity 里面搞，毕竟这边有完整的操作接口，以前也有用过。</p><p>同时，有部分图片如果显示上半部分效果比较好，有的图片则显示中间部分比较好：虽然目前没有作处理的情况下，都是显示的中间部分，不过既然都做处理了，为何不手动调整一下？</p><p>于是简单写了两个接口：一个接取图片上半部分、一个截取图片中间部分。</p><p>当然最终实际分辨率都会是： <code>643x224</code> <br /><font color=red>注：其实不一定得要这种分辨率，审查元素查出来的分辨率其实也会跟随页面大小发生变化，只要这种比例就行了，网页显示时，宽度或高度任一不足都会被放大显示</font></p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesTop"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 截取以上半部分为准</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesCenter"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 截取以中间部分为准</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> isCenter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> width <span class="token operator">=</span> <span class="token number">643</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> height <span class="token operator">=</span> <span class="token number">224</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> offsetHight <span class="token operator">=</span> isCenter <span class="token punctuation">?</span> height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFolderPanel</span><span class="token punctuation">(</span><span class="token string">"选择一个待处理文件夹"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"*.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token class-name">Texture2D</span> texOrigin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token class-name">Texture2D</span> texResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"_CutResult_CenterPixel_"</span> <span class="token operator">+</span> isCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> texPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> texNum <span class="token operator">=</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> texNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        texPath <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"处理中："</span> <span class="token operator">+</span> texPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>texNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        texOrigin<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">SetPixels</span><span class="token punctuation">(</span>texOrigin<span class="token punctuation">.</span><span class="token function">GetPixels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isCenter <span class="token punctuation">?</span> texOrigin<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> texOrigin<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> offsetHight<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        bytes <span class="token operator">=</span> texResult<span class="token punctuation">.</span><span class="token function">EncodeToJPG</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>毕竟只是临时随便用用，能用就行了，就没有花时间去处理可能的异常了。</p><p>另外，重新导出的 jpg 质量我选择了 95%，要是超过这个数，体积会增加不少，特别是 100% 质量的情况下，比不截取的图也小不了多少了。</p><p>导出然后挑挑拣拣把合适的放一块合并起来，就形成最后的结果了。</p><h2 id="转化-webp"><a class="anchor" href="#转化-webp">#</a> 转化 WebP</h2><p>jpg 转为 WebP 之后，大小确实还可以进一步压缩，于是找了相关工具：竟然很少有离线软件。</p><p>基本都是在线的工具。</p><p>最后在这找到一个：<span class="exturl" data-url="aHR0cDovL3d3dy53aW53aW43LmNvbS9zb2Z0LzM2NzYzLmh0bWwjeGlhemFp">Webp 转换工具绿色版</span></p><h2 id="删除与图片随机算法修改"><a class="anchor" href="#删除与图片随机算法修改">#</a> 删除与图片随机算法修改</h2><p>因为没了图床加速，考虑了下还是决定把一部分删掉。</p><p>然后就有了一个新的问题：随机图片实际上也是在我们图片列表中随机，列表中图片减少，就意味着在同一个页面之中，出现同一张重复图片的概率会变得更高！</p><p>为了解决这个问题，我在主题随机代码上又进行了修改，以避免同一张图片随机在同一个页面。</p><p>具体随机方法在  <code>engine.js</code>  中的  <code>_cover</code>  里边，稍微修改了一下，做了个简单的缓存：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> cacheList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_cover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> statics<span class="token punctuation">,</span> js<span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>photos<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">let</span> bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 总图片数量大于 10，并且是文章图片才判断是否重复，num>1 表示页面头部图片吧，那个就不用处理了</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token keyword">undefined</span><span class="token operator">||</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 图片列表走过最低页数随机后，也就是基本上全部走过一轮才允许重复随机</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">let</span> maxCheckNum<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Math.min(30,image_list.length);</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span>length<span class="token operator">>=</span>maxCheckNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        cacheList<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">while</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      cacheList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> bg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>本来只是想试一下，没想到定义在方法块外边的缓存变量真有效，那就这样了。</p><h2 id="模糊"><a class="anchor" href="#模糊">#</a> 模糊</h2><p>一通压缩操作下来，感觉图片质量就不大行了... 加点模糊效果吧，CSS 还挺简单的，例如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#header</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">#imgs</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>1.5px<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>压缩处理步骤：</p><ol><li>降低分辨率，图片实际大小与实际使用分辨率保持一致，避免无谓浪费</li><li>降低部分质量，例如截取后存储质量我选择  <code>95%</code></li><li>WebP 化</li><li>利用 <span class="exturl" data-url="aHR0cHM6Ly90aW55cG5nLmNvbQ==">TinyPng</span> 再压一遍 (注：最后实测发现转 WebP 时压缩率高了实际上 TinyPng 也压不动了)</li><li>质量不行就用模糊什么的挡一下</li></ol><p>总之，就是在尽量『能看』的情况下，减少传输数据量，毕竟 GitPages 的速度... 谁知道什么时候快慢呢...</p><p>这么就几个步骤下来，基本上可以减少到极致了 (也许还有其它再减少大小的处理方式？如果有知道的务必留言提醒！)</p><p>今天是 <s>2023 年 1 月 1 日</s> 2023 年 1 月 2 日，我竟然在研究如何优化博客... 图片怎么处理...😥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。&lt;/p&gt;
&lt;p&gt;目前的</summary>
      
    
    
    
    <category term="博客" scheme="https://cwhisme.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://cwhisme.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Mesh渲染优化与批处理</title>
    <link href="https://cwhisme.github.io/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/"/>
    <id>https://cwhisme.github.io/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/</id>
    <published>2022-12-30T10:19:07.000Z</published>
    <updated>2023-01-01T04:25:38.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。</p><p>理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一下，方向感觉就变成 合批、优化 这块去了，于是本篇文章直接就先整理一下这一块。</p><p>首先，我们都知道由于 CPU 和 GPU 是两个不同的执行对象，所以一般问题都出在两者『数据交换』，由于 GPU 并行结构设计，通常情况都是 GPU 等待 CPU，而 CPU 干事情得一件件做，渲染一个对象就要先把一个对象的属性 (切换材质、切换贴图、设置材质属性等) 准备好，然后通知 GPU 渲染该对象，这中间通常就存在空挡。</p><p>CPU 准备数据越多，最终渲染一帧消耗时间就越长 —— 所以优化的时候，通常提到了减少 DrawCall ，也就是 CPU 去通知 GPU 渲染一个对象前这块的『准备消耗』，DrawCall 命令本身消耗不能算很高，高的是在这之前的一系列准备操作。所以说是『优化 DrawCall』这个也不决对，但是通常减少 DrawCall 确实是最明显的优化。</p><p>其它例如减少带宽、减少中间切换次数、减少向 GPU 上载数据理论上应该都可以算作减少『渲染』消耗这一块的优化 (应该)。</p><h2 id="unity-drawcall"><a class="anchor" href="#unity-drawcall">#</a> Unity DrawCall</h2><p>在 Unity 中，可以主要关注两个数据：</p><ul><li>SetPass Call<ul><li>在我们 Sahder 中可能会存在有多个 Pass，例如阴影就是单独一个 Pass 处理</li></ul></li><li>Batches<ul><li>提交一次数据并执行绘制</li></ul></li></ul><p>在 Unity 中 Batches 可以看做实际的 DrawCall。</p><p>为什么一般优化 DrawCall 是提升效率的手段？</p><p>因为上述工作原理，CPU 和 GPU 处于两个不同的硬件结构，两个硬件的数据交换是存在等待机制的，两者频繁数据交换就会导致要么你等我，要么我等你这种情况，浪费大量效率。</p><p>例如有 100 个对象需要绘制，分别每提交一个对象的材质、模型等数据就发起一次调用，就有 100 次通知 GPU 渲染的调用。<br />将 100 个对象属性一次性设置，然后统一提交再申请绘制，就只需要一次。</p><p>效率就上来了 —— 当然也会带来一些其它问题，例如剔除精度降低。</p><p>Unity 会将一些可以合并渲染命令合成一个 『Batches』， SetPass Call 可以看做渲染状态改变次数 (不同材质导致必须的渲染切换数量)，在 Unity 中 Batches 可以看做实际的 DrawCall—— 减少 Batches 不一定减少 SetPass Call，不过一般减少 SetPass Call 的都伴随着 Batches 减少。</p><h2 id="实际操作"><a class="anchor" href="#实际操作">#</a> 实际操作</h2><p>因此在实际中，一般渲染优化追求的是在 GPU 工作能力内，尽可能一次性让其绘制。</p><p>体现出来就叫做 『批处理』。</p><p>在 Unity 中，目前引擎存在的批处理通常有  <code>动态</code> 、 <code>静态</code> 、 <code>GPU Instancing</code> 、 <code>SRP Batcher</code> ，其它的例如 UGUI 也有特有的合批规则。</p><p>由于合批操作通常都有指定限制，因此平时也得注意避免出现合批中断情况。</p><p>例如，像是一些单个物体材质属性操作，就可能导致合批中断：</p><ul><li>renderer.material：调用时会创建并返回一个新的材质 (不推荐)。</li><li>renderer.sharedMaterial：材质引用，修改的话所有引用该材质对象都会受到改变。</li></ul><h3 id="materialpropertyblock"><a class="anchor" href="#materialpropertyblock">#</a> MaterialPropertyBlock</h3><p>为解决 sharedMaterial 的缺点，Unity 提供了 MaterialPropertyBlock。</p><p>这个东西可以做到跟 sharedMaterial 一样不创建成新材质对象的情况下，单独修改某个对象材质属性 (而不影响其它同材质对象)。</p><p>使用方式也很简单，直接可以在 MaterialPropertyBlock 设置与材质上同样的变量与值，然后赋值给材质。</p><p>简单使用代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MeshRenderer</span> renderrender <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">MaterialPropertyBlock</span> mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>官方称内置地形系统的树，渲染方式就是这样的，通过这种方式修改每棵树的材质属性，产生不同的颜色、缩放和风力系数等。</p><p><font color=red>注：MaterialPropertyBlock 与 URP 的 SRP Batcher 会有冲突，URP 就不要用了。</font></p><h4 id="不再受到材质属性修改影响"><a class="anchor" href="#不再受到材质属性修改影响">#</a> 不再受到材质属性修改影响</h4><p>通过这种方式设置材质参数后，将不再受到材质本身属性修改的影响，如图：</p><p><img data-src="/blogimages/2022/2022-12-30/m_bf8cd0c6fb721f2ea29f53d5fdaddfed_r.png" alt="" /></p><p>材质本身的值将始终被 MaterialPropertyBlock 属性覆盖，此时再去修改材质，材质属性的改变不再影响这个对象了。</p><h4 id="合批被打断"><a class="anchor" href="#合批被打断">#</a> 合批被打断</h4><p>经过测试，通过 MaterialPropertyBlock 设置材质属性虽然不会导致创建新的材质实例，但是却会打断合批：</p><p><img data-src="/blogimages/2022/2022-12-30/m_c84f4c09265700b27e66a030d5110323_r.png" alt="" /></p><p>经过测试，无论动态合批、静态合批，都会被打断。<br /><font color=red>注：除非设置的是同一个颜色，倒是依然能够合批</font></p><p>例如，上述是 3 个 Cube，静态合批被打断情况：设置前 -&gt; 设置后</p><p>SetPass Call 及 Batches 都增加了两个：说明 MaterialPropertyBlock 参数不同的话，依然会造成渲染状态改变。</p><h4 id="materialpropertyblock-只是一个参数携带者"><a class="anchor" href="#materialpropertyblock-只是一个参数携带者">#</a> MaterialPropertyBlock 只是一个参数携带者</h4><p>使用如下代码，仅使用一个 MaterialPropertyBlock 对象</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Renderer</span> render <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponentInChildren</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mpb <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> _color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以成功『分别』设置各个对象的『不同』颜色属性，而 MaterialPropertyBlock 是一个类，说明在调用 SetPropertyBlock 底层会生成一份当前类的临时参数数据，并覆盖掉材质上的本来设置。</p><h3 id="gpu-instancing"><a class="anchor" href="#gpu-instancing">#</a> GPU Instancing</h3><p>上述采用 MaterialPropertyBlock 修改材质属性后，会打断 静态 / 动态 合批功能。</p><p>如果想进一步优化，可以采用 GPU Instancing 技术。</p><p>GPU Instancing 也有限制：</p><ul><li>只能用于 Mesh</li><li>同一个 Mesh 才能一次性绘制</li></ul><p>需要注意的是：虽然 StandardShader 有勾选 Enable GPU Instancing 选项，勾选之后也能用，但是却没法跟 MaterialPropertyBlock 配合 —— 实测设置 MaterialPropertyBlock 后 GPU Instancing 依然都会被打断。</p><p>自定义 Shader ：</p><ol><li>增加： <code>#pragma multi_compile_instancing</code>  预定义后，材质面板会出现对应的  <code>Enable GPU Instancing</code>  选项</li><li>顶点数据接收结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>顶点转片段  <code>v2f</code>  结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>使用  <code>UNITY_INSTANCING_BUFFER_START</code>  定义可以进行修改的参数，例如我们修改颜色：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>float4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="5"><li>顶点处理函数中，在正常计算之前执行 Unity 提供的预定义：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_TRANSFER_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 正常必须的顶点转换处理</span></pre></td></tr><tr><td data-num="5"></td><td><pre>o<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="6"><li>片段函数中，执行设置，然后获取</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Unity 提供的预定义函数，对该对象进行设置</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 从列表中获取该对象应当设置的属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fixed4 color <span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">return</span> color<span class="token punctuation">;</span></pre></td></tr></table></figure><p>该项对于『纯自定义 (Unlit Shader)』Shader 可能会繁琐一点，但  <code>SurfaceShader</code>  就简单些了，因为逻辑类似，这里直接上完整的  <code>SurfaceShader</code> ，也好可以做个对比：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>Shader <span class="token string">"Custom/GPUInstancingSurfaceShader"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Properties</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Tags <span class="token punctuation">&#123;</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        LOD <span class="token number">200</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        CGPROGRAM</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// Physically based Standard lighting model, and enable shadows on all light types</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">surface surf Standard fullforwardshadows</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// Use shader model 3.0 target, to get nicer looking lighting</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">target <span class="token number">3.0</span></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        sampler2D _MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">struct</span> <span class="token class-name">Input</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            float2 uv_MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        half _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        half _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">//fixed4 _Color;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// #pragma instancing_options assumeuniformscaling</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// put more per-instance properties here</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>fixed4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token comment">//UNITY_SETUP_INSTANCE_ID(IN);</span></pre></td></tr><tr><td data-num="44"></td><td><pre> fixed4 realColor<span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// Albedo comes from a texture tinted by color</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> realColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token comment">// Metallic and smoothness come from slider variables</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ENDCG</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    FallBack <span class="token string">"Diffuse"</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里 SurfaceShader 只需要两个步骤：</p><ol><li>将对应需要修改的属性值定义到使用 UNITY_DEFINE_INSTANCED_PROP 定义在对应预定义块中，这点与 UnlitShader 一样</li><li>在片段着色方法中 通过 UNITY_ACCESS_INSTANCED_PROP 取值</li></ol><p>就这么简单！其它的预定义 SurfaceShader 都已经帮忙处理好了。</p><p>效果：</p><p><img data-src="/blogimages/2022/2022-12-30/m_4a96aecd4cbe95fc91e76c956ca3e0b8_r.png" alt="" /></p><p>Instancing 中三个不同颜色的 Cube 只占用了一个 DrawCall</p><h4 id="问题为什么-standarsahder-设置颜色后会破坏合批"><a class="anchor" href="#问题为什么-standarsahder-设置颜色后会破坏合批">#</a> 问题：为什么 StandarSahder 设置颜色后会破坏合批？</h4><p>原因是：</p><blockquote><p>Unity’s Standard and StandardSpecular shaders have instancing support by default, but with no per-instance properties other than the transform.</p></blockquote><p>即 —— 虽然它支持 GPU Instancing，但实际上除了变换之外之外的属性都没有写入实例化处理。所以如果想支持其它属性的变化，需要自定义 Shader 才行。</p><p><font color=red>注 1：GPU Instancing 优先级在 SRPBatcher 及 静态合批 之后。</font><br /><font color=red>注 2：缩放为负也会打断 GPU Instancing 合批。</font><br /><font color=red>注 3：常量缓冲区不同设备可能大小不一样，因此一次性绘制也有上限。</font><br /><font color=red>注 4：GPU Instancing 只支持一个平行光，多放一个点光源就会导致多渲染 3 次 (每个对象分别一次)。(以上述  <code>SurfaceShadaer</code>  测试)</font><br /><img data-src="/blogimages/2022/2022-12-30/m_71c1a43f78bed26b6972397ca7dabe28_r.png" alt="" /><br />3 个 Cube、两个点光源：总共 7 个 DrawCall，3 个合批一次，然后分别渲染 2 次</p><h3 id="扩展"><a class="anchor" href="#扩展">#</a> 扩展</h3><p>GPU Instancing 只支持同一个模型，不支持带动画 SkinMeshRender，那么是否可以配合 GPU 动画 实现大批量动画模型绘制？</p><p>感觉理论上是可行的，后面再试试看。</p><h3 id="srpbatcher"><a class="anchor" href="#srpbatcher">#</a> SRPBatcher</h3><p>在 SRP 中，Unity 又提供了一种新的合批方式：SRPBatcher</p><p>这种方式的原理与 GPU Instancing 类似，都是需要在 Shader 中先定义受影响的属性值，Unity 渲染时先将这些值放进 GPU 的缓冲区，对象渲染时直接去取。但是它支持不同的材质和模型 —— 只要变体一致就行了。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>批处理顺序：静态合批 -&gt;SRPBatcher-&gt;GPU Instancing-&gt; 动态合批</p><p>静态合批优先级最高，相当于会与其它合批有冲突。<br />例如：个人测试中，GPU Instancing 和 静态合批 会有冲突，静态合批后使用 MaterialPropertyBlock  修改依然不会进入 GPU Instancing，也就是说 —— 直接勾选静态又去修改了材质参数反而降低效率。</p><p>前三者更有效，至于动态合批由于限制过多，而且本身就是 CPU 换 CPU，因此感觉也不用过多追求。像最新 HDRP 都去掉了动态合批功能 (当然 URP 还是有保留着的)。</p><p>参考文档：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0RyYXdDYWxsQmF0Y2hpbmcuaHRtbA==">DrawCallBatching</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9uamEtdHV0b3JpYWxzLmNvbS9wb3N0LzA0OC1tYXRlcmlhbC1wcm9wZXJ0eS1ibG9ja3M=">material-property-blocks</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0dQVUluc3RhbmNpbmcuaHRtbA==">GPUInstancing</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。&lt;/p&gt;
&lt;p&gt;理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/categories/Unity3D/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>新冠感染记录</title>
    <link href="https://cwhisme.github.io/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/"/>
    <id>https://cwhisme.github.io/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-28T13:02:46.000Z</published>
    <updated>2023-01-01T11:18:27.400Z</updated>
    
    <content type="html"><![CDATA[<ol><li>第一天 (2022 年 12 月 19 日 周一)：<br />咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。</li><li>第二天 (2022 年 12 月 20 日 周二)：<br />办公室咳嗽声感觉更多了，也比较想喝水 —— 吃饭时也是暴露的情况。晚餐直接带回家吃的，不过感觉胃口相对没那么好了，回家后还感觉喉咙有点不舒，不过还没有更明显的症状。心跳较快。</li><li>第三天 (2022 年 12 月 21 日 周三)：<br />早上起来感觉喉咙症状比较明显，8 点去医院做了一次核酸，由于有工作没处理完还是去上班了，中午把盒饭拿到走廊上出去吃的，下午开始感觉头晕，脑袋胀痛。晚餐带回家吃 —— 简单吃了一点，几乎没有胃口了。晚上早早上传睡觉，感觉很煎熬，发冷、发昏，开着空调都冷。心跳极快。</li><li>第四天 (2022 年 12 月 22 日 周四)：<br />早上刚起来咽喉痛，头胀痛 (晃一下脑袋更加强烈)，身上酸痛，特别是右手臂举着都痛。所以请假了，同时昨天的核酸结果出来了：显示阴性。这么明显的症状不可能阴性，于是上午又去做了一次。整天状态都不大好。开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。心跳极快。</li><li>第五天 (2022 年 12 月 23 日 周五)：<br />早上刚起来咽喉痛，头胀痛，身上酸痛。相比昨天稍微好一点，还是难受。而且照镜子感觉脸色蜡黄 —— 甚至让人怀疑是不是脏都出了问题，下午核酸结果出来显示阳性。开了空调，特别怕冷，稍微移动就起鸡皮疙瘩。没有胃口，中午强行简单吃了点炒菜心，感觉反胃。晚上喝了点稀饭粥。心跳极快。</li><li>第六天 (2022 年 12 月 24 日 周六)：<br />早上刚起来咽喉痛，头胀痛，脖子肩膀痛。偶尔嘴巴会混合血丝，鼻子感觉有堵塞，中午想睡觉躺下去也睡不着。状态相比昨天稍微好一点，还是难受。特别怕冷，开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。早上去买菜发现好又多超市看着都快倒闭了，卖的东西快清干净了。路口买了三根莴笋 —— 中午没胃口也没吃，喝了点稀饭粥。晚上煮了饭本来也没胃口的，但是感觉不好处理，还是炒了一根，吃了一半。晚上开始流清鼻涕了。心跳速度好了点，不过还是比较快。</li><li>第七天 (2022 年 12 月 25 日 周日)：<br />咽喉还是痛，早上醒来时特别明显，晚上特别厉害。鼻子也堵，早上鼻孔实在堵塞厉害，去 bilibili 找到了一个 mandell 的通鼻孔教程照着做，弄出了几坨浓血块和痰组成的东西。早上鼻涕转浓 —— 同时白天鼻孔也堵起来了，呼吸比较难。身体疼痛好些了，心跳速度也好了点。声音完全变了，之前喝水都是苦的，今天喝水不苦了，下午喝了不少水，但是胃那边感觉很不舒服，像有什么东西顶在里面。自从上午跑下去拿了快递后，就一直感觉明显。</li><li>第八天 (2022 年 12 月 26 日 周一)：<br />鼻孔堵塞得厉害，躺床上基本就一个鼻孔了，早上咽喉还是痛，同时会吸出一些血吐出来，中午躺床上没睡着，下午依然能吸出血吐出来。心跳感觉相对正常了。</li><li>第九天 (2022 年 12 月 27 日 周二)：<br />鼻孔还是堵塞，躺床上基本就一个鼻孔了，早上咽喉还是痛，不过比昨天好点。还是能吸出一些血丝。开始有点胃口了，中午把前几天买的莴笋吃了，睡了个午觉，一觉起来快 4 点了吧，午睡后鼻孔堵塞、咽喉都有改善，然后出去想买菜，发现好又多超市完全关门了，在路边买了娃娃菜吃。偶尔忍不住会咳嗽。</li><li>第十天 (2022 年 12 月 28 日 周三)：<br />早上刚起床咽喉微痛，鼻孔微堵。中午把昨天买的娃娃菜吃完了，晚上吃了冻菜包。偶尔感觉喉咙痒忍不住会咳嗽。到晚上时除了感觉喉咙偶尔有东西外，至少过于明显的症状已经快没了，今天也是最后一天病假。</li></ol><h3 id="无"><a class="anchor" href="#无">#</a> 无</h3><p>感觉放太开了，完全不知道为什么突然之间，什么都不管了。<br />说好的『逐步』放开呢？就算建立免疫屏障，也不是让所有人都走一轮吧... 我这次本来还坚挺了一个星期，直到确实感染的同事们陆续带病上班，然后感觉就被强行感染 —— 办公室咳嗽一片，这种都是完全没人管的。<br />这个病毒肯定是比重感冒严重的，按照有症状到恢复，至少需要一个星期。在严重那两天基本上很难做什么。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;第一天 (2022 年 12 月 19 日 周一)：&lt;br /&gt;
咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。&lt;/li&gt;
&lt;li&gt;第二天 (2022 年 12 月 20 日 周二)：&lt;br /&gt;
办公室咳嗽声感觉更多</summary>
      
    
    
    
    <category term="其它" scheme="https://cwhisme.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="阳了" scheme="https://cwhisme.github.io/tags/%E9%98%B3%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>揭秘Unity的黑盒世界-笔记</title>
    <link href="https://cwhisme.github.io/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/"/>
    <id>https://cwhisme.github.io/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T07:34:25.000Z</published>
    <updated>2022-12-28T11:54:27.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="native-mamery"><a class="anchor" href="#native-mamery">#</a> Native Mamery</h3><p>Unity 如何分配内存？</p><p><img data-src="/blogimages/2022/2022-12-28/note2_1.jpg" alt="" /></p><ul><li>New/Malloc：<ul><li>一个是函数一个是操作符，原理上讲 操作符 快于 函数</li><li>分配失败 New 会抛出 Exception，Malloc 返回 null</li><li>Malloc 实现都类似，New 各有不同<ul><li>例如构造函数，New/Delete 会调用对象的 构造函数 / 析构函数 以完成对象的 构造 / 析构。而 Malloc/Free 则不会</li><li>但是 New 并不代表是 Malloc + 构造函数</li></ul></li><li>New 内存分配于 FreeStore (自由存储区【C++ 基于 new 操作符的一个抽象概念】)，Malloc 会分配于 Heap 上<ul><li>New/Delete 时，是否分配或释放内存，New 可以由自己决定，Malloc/Free 一定会返还系统</li></ul></li><li>所以严格讲两者根本不是一个东西，其实没有关系</li></ul></li></ul><p>Unity 不会直接通过 New/Malloc 进行操作，而是自己通过宏实现了一套内存分配机制，比如  <code>UNITY_MALLOC</code> ，分配内存时，会给内存一个标识符 ( <code>Memery Label</code> )，提交到 Memery Manager 进行分配。</p><ul><li>像 Profiler 中 Take Sample ，用以区分运行时每块内存所属，就是通过 Memery Label 区分。</li><li>Memery Label 同时也可以帮助 Memery Manager 做一个筛选，区分应该通过哪种内存分配器策略分配内存</li><li>主要内存分配器：<ul><li><code>Stack Allocator</code> ：快速、容量小、临时对象分配器<br /><img data-src="/blogimages/2022/2022-12-28/note2_2.jpg" alt="" /><br /> <code>注：图上的 Heap 是内存对象的 Heap，Stack Allocator 指先进后出结构</code><ul><li><code>快</code> ：对于栈内存，默认就会预分配一块，然后通过栈顶指针在内存块中移动，此时不会真的重新申请内存，所以快 —— 官方测试比动态堆分配器大概快 3~5 倍</li><li><code>小</code> ：分配多了很可能会被浪费，而且申请后就不会释放，是永远占用的</li><li><code>临时</code> ：上述机制也代表栈顶不可能长时间不动，快速收缩膨胀，高效重复利用。所以常驻对象不大行。<ul><li>在我们想要分配内存时，Unity 会分配两块内存：Header (记录如 (1) 是否使用 (2) User 大小 (3) 前一块是谁)+User<ul><li>所以会有额外消耗，例如自己想分配 16 字节内存，可能最终会有 32 字节大小</li></ul></li><li>回收中间对象时，Header 直接置为 『已删除』</li><li>栈顶指针回弹时，会检测回弹指针位置对象是否已经 『已删除』，若是则再次往上移动，直到一个没有被标记为删除的块，或挪到了整个 Block 头</li><li>栈结构分配虽然快，但是若栈顶对象未释放，中间内存即使回收也无法复用<ul><li>它必须等待栈顶指针对象被释放，才能回弹检测连续内存</li><li>所以无法快速重用中间已释放内存</li></ul></li><li>栈内存大小有限制 (虽然会进行拓展)<ul><li>Editor：主线程有 16M，Woker 线程 256KB</li><li>Runtime：主线程 128KB~1MB，Woker 线程 64KB</li></ul></li><li>栈内存爆了之后：Memery.FallbackAllocation，Fallback 至主堆分配器，会慢很多，造成卡顿<ul><li>分帧处理</li><li>有源码加大堆栈内存</li></ul></li></ul></li></ul></li><li><code>Batch Allocator</code> ：SRP</li><li><code>DynamicHeapAllocator</code> ：主分配器</li><li>...15~20 种不同的分配器，每一种适用的场景不同</li></ul></li></ul><h3 id="managed-memery"><a class="anchor" href="#managed-memery">#</a> Managed Memery</h3><ul><li>Mono：保留内存不会返给系统</li><li>Il2CPP：保留内存可能返给系统 —— 在同一个『页』6 次 GC 都没有被触及到的情况，很难 (注意不是对象，是内存管理单位)，Unity 确实设置了这一个机制，但是很难达成。</li><li>注意内存碎片化带来的保留内存上升</li><li>Unity 使用 Boehm GC (保守式 GC)：<br /><img data-src="/blogimages/2022/2022-12-28/note2_3.jpg" alt="" /><ul><li><p><code>一级列表</code> ：将对象分为不同类型（如 PTRFREE (无指针类型)、Normal (一般类型)、不可回收类型 (回收器自己用)）</p></li><li><p><code>二级列表</code> ：表明当前类型下的内存块大小 (16 字节增量，最多到 2K)</p></li><li><p>二层 <code>链表</code> ：每一个大小内存块为一个链表，逻辑链接起来</p><ul><li>当用户需求分配一个内存对象，就会拿出指定大小的第一个块返给用户</li><li>若用户需要分配大小小于最低大小，会返回最低大小的一个 Block (例如最小 16 字节，用户需求 8 字节，返回的就是 16 字节的内存块，会造成浪费)</li><li>若所需大小不足，则向更高级取：然后将高级大小分拆分为两半，一半返回用户、另一半链到低级链表上</li><li>同时进行回收时，若两个节点物理地址连接，则其会试图将两者合并，挂到更大的节点下，从而尽量减少整体碎片化 —— 注意不是移动内存，而是直接挂指针</li></ul></li><li><p>回收一个 Object 内存块时，会尝试找到这个内存卡块下所有指针指向地址，并且标记为引用<br />以一个不可回收对象 ObjectA 为例，需要同时标记其引用对象也不可回收。但是在内存层次上因为已经没有 class 信息，无法确认对象地址存储的是值还是指针，靠『猜测 (pattern)』判断，因此叫『潜在指针』<br /><img data-src="/blogimages/2022/2022-12-28/note2_4.jpg" alt="" /></p><ul><li>因此它总是假设给定值是指针，并且将相关联的对象标记为存活状态：<ul><li>若指向对象，则将对象也标记为不可回收</li><li>若正好指向不相干的对象，不相干的对象也会被标记为不可回收 (不相干的对象指恰好被分配到这个地址上的对象，与其无实际依赖关系)</li><li>若正好指向空白内存，空白内存地址将会加入黑名单，下次分配时若刚好踩到该地址，将不可分配内存</li></ul></li></ul></li></ul></li><li>Boehm GC 问题：<ul><li>不分代、不合并 (整理内存)，容易导致内存碎片<ul><li>例如当我们保留内存还剩很多，但是突然又被分了一大块就是这种情况</li></ul></li><li>非精准回收<ul><li>已分配内存在无人引用时，不一定能收回</li><li>没有分配使用的内存，当想要分配使用时不一定能使用</li></ul></li></ul></li><li>其它：<ul><li>GC 回收方式有：Boehm GC (保守式)、S-Gen GC (分代式)、引用式 GC (Java)</li><li>Unity 继续使用保守式 Boehm GC，也有觉得移动平台再额外花费 CPU 去整理内存是不合算的事情缘故<ul><li>当然，由于没有实装 S-Gen GC 来对比，具体性能差异当然是不可而知了</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;native-mamery&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-mamery&quot;&gt;#&lt;/a&gt; Native Mamery&lt;/h3&gt;
&lt;p&gt;Unity 如何分配内存？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/blogimages/2</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://cwhisme.github.io/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Unity内存管理-笔记</title>
    <link href="https://cwhisme.github.io/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/"/>
    <id>https://cwhisme.github.io/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T04:40:26.000Z</published>
    <updated>2022-12-28T05:28:26.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是内存"><a class="anchor" href="#什么是内存">#</a> 什么是内存？</h2><h3 id="物理内存"><a class="anchor" href="#物理内存">#</a> 物理内存</h3><h4 id="cpu访问内存"><a class="anchor" href="#cpu访问内存">#</a> CPU 访问内存：</h4><ul><li>CPU 访问内存是一个慢速的过程</li><li>CPU 想要访问一块内存时，并不是立即走系统总线访问内存，而是先向 L1、L2、L3 Cache 查询。当三个 Cache 全部 Miss 以后，才会去主内存中拿一段连续的指令回到 Cache。当下一次需要的时候，依然是先向 Cache 查询。</li><li>这样如果我们的内存、指令不是连续的，就会导致大量内存到 Cache 的交换，浪费大量时间在内存读取上</li><li><img data-src="/blogimages/2022/2022-12-28/image.jpg" alt="" /></li><li>(CPU 上 Cahce 的核心面积一般占用都是很大的)</li><li>(Unity ECS DOTS 就是为了优化这一点，将数据组建为连续内存块，以期减少 Cache Miss)</li></ul><h4 id="pc-和-移动设备内存架构差异"><a class="anchor" href="#pc-和-移动设备内存架构差异">#</a> PC 和 移动设备内存架构差异：</h4><ul><li>移动设备没有独立显卡</li><li>移动设备没有独立显存<ul><li>所以移动设备上我们关注的 <code>内存</code> ，也即是 <code>显存</code></li></ul></li><li>CPU 核心更小，缓存级数和大小也更小</li></ul><h3 id="虚拟内存"><a class="anchor" href="#虚拟内存">#</a> 虚拟内存</h3><ul><li><p>PC：<br />交换内存，当我们内存不足时，它会尝试将不使用的内存交换到硬盘上，以节省出更多的物理内存给当前系统比较活跃的进程使用</p></li><li><p>IOS：<br />IOS 可以进行压缩，将不活跃的内存压缩起来移动到内存中特定空间，节省出物理内存给活跃的应用使用</p></li><li><p>Android：一般是没有的 (虽然有部分手机支持交换内存)</p></li></ul><h3 id="内存寻址范围"><a class="anchor" href="#内存寻址范围">#</a> 内存寻址范围</h3><ul><li>32 位 CPU 和 64 位 CPU</li><li>控制其寻址范围的是 MCU，一般与 CPU 位数对应</li></ul><h2 id="安卓内存管理"><a class="anchor" href="#安卓内存管理">#</a> 安卓内存管理：</h2><p>内存基本单位：Page，没有经过设置一般为 4K，分配和回收以 Page 为单位 (并不意味所有数据都是 4K 对齐)</p><ul><li>分用户态和内核态，用户访问内核态 (如 Native 分配) 会错误</li></ul><p>内存杀手：low memery killer</p><ul><li>杀顺序：缓存 -&gt; 前一个应用 -&gt;Home-&gt;Service-&gt;Perceptible-&gt;Foreground-&gt;Persistent (前台驻留内存，杀掉前台还在的)-&gt;System (重启)</li></ul><p>内存指标：</p><ul><li>Resident Set Size (RSS)：当前应用所用掉的所有内存 (包括调用公共库导致的内存分配)</li><li>Proportional Set Size (PSS)：当前应用内存 + 均分公共库内存 (公共库被调用者均分 -- 内存公摊)</li><li>Unique Set Size (USS)：只有应用自己分配的内存，我们能做到的就是优化这一块内存，并避免在 PSS 上造成更多压力<ul><li>procrank 命令查看内存分配</li></ul></li></ul><h2 id="unity-内存"><a class="anchor" href="#unity-内存">#</a> Unity 内存</h2><ul><li>类型：<ul><li>Native Memery<ul><li>重载了所有内存分配符，每一个操作符 (Allocator) 被使用时要求一个额外参数：MemeryLable，指当前这一块内存要分配到哪个内存池，Profiler 查看时那些名字就是这个统计</li></ul></li><li>Managed Memery</li><li>引擎管理内存</li><li>用户管理内存</li></ul></li><li>Unity 检测不到用户分配的 Native 内存、Lua 内存也是无法被 Unity 直接统计到的</li></ul><h3 id="native-内存"><a class="anchor" href="#native-内存">#</a> Native 内存</h3><h4 id="scene"><a class="anchor" href="#scene">#</a> Scene</h4><ul><li>场景中的对象，GameObject</li><li>当我们创建一个 GameObject 时，Unity 底层会构建一个或多个 Object 存储其信息 (因为其内部还可能存在多个 Component)<ul><li>也因此当场景有过多 GameObject 时，Native 内存会有显著增长</li><li>通过 Profiler 发现 Native 内存大量上升时，可以检查该项</li></ul></li></ul><h4 id="audio"><a class="anchor" href="#audio">#</a> Audio</h4><ul><li>DSP Buffer：填充满了才会向 CPU 发送指令，过大会导致声音延迟，太小会导致 CPU 负担上升</li><li>Force To Mono</li><li>Format：是否硬解支持，IOS 对 MP3 有硬解支持<ul><li>MP3 比 Vorbis 更大，但是比 ADPCM 更小</li></ul></li><li>Compression Format</li></ul><h4 id="code-size"><a class="anchor" href="#code-size">#</a> Code Size</h4><ul><li>模板泛型滥用，IL2CPP 会被展开编译成静态代码，不同的泛型参数会导致排列组合形成代码膨胀</li></ul><h4 id="assetbundle"><a class="anchor" href="#assetbundle">#</a> AssetBundle</h4><ul><li>Type Tree：当前版本序列化字段形成一张对应表，如果换了一个版本反序列化，没有的字段可以直接采用默认值，避免出错。<ul><li>确认不会对兼容性造成影响 (跨版本打热更？)，就可以关掉。关掉可以 (1) 减小内存、(1) 减小包体大小，(3) Build 和运行时会变快。</li><li>若存在 Type Tree，会进行两次序列化 (反序列化)，第一步先反序列化出 Type Tree，第二步再反序列化出实际内容</li></ul></li><li>LZ4：推荐，但是压缩率会比 LZMA 平均差 30%，速度快 10 倍以上 (官方称)，基于 ChunkBase ，可以一块一块解压<ul><li>例如，一个文件是从第 5 块～10 块，会从第五块开始，5 块、6 块、分别解压，并重用之前内存，可以减少内存峰值</li></ul></li><li>LZMA：官方很不推荐，因为解压和读取速度都很慢，另外会占大量内存，因为不是 ChunkBase 而是 Stream，需要一次性读取全解压。</li><li>Size &amp; Count：每个 Bundle 包含资源数量，没有定论，需要平衡</li></ul><h4 id="resources-目录"><a class="anchor" href="#resources-目录">#</a> Resources 目录</h4><ul><li>这个目录在打进包的时候，会生成一个红黑树，用于帮助检索资源位置，这棵树在刚开始游戏就会加载进内存且不可卸载，造成持续内存压力。并且会拖慢游戏启动速度：没有分析生成完毕，游戏不会正式启动。</li><li>官方极不推荐：建议最多 Debug 环境使用，正式环境直接删掉。</li></ul><h4 id="texture"><a class="anchor" href="#texture">#</a> Texture</h4><ul><li>upload buffer：也可以设置，与声音的 DSP Buffer 有点像，就是填满多大向 GPU Push 一次</li><li>Read/Write：正常情况下，一张图读进内存，然后提交到 upload buffer 后就会直接 Delete 掉。检测到开启该选项就不会 Delete，显存内存各一份。手游显存和内存通用，就会导致 Unique Memery  存在两份。</li><li>Mipmap：UI 之类都不用开，如 3D 模型的贴图，涉及 3D 相机变化，才可能需要开启 (需要一个平衡，会增加大概 30% 内存占用，减轻渲染消耗)。</li></ul><h4 id="mesh"><a class="anchor" href="#mesh">#</a> Mesh</h4><ul><li>Read/Write：与图片一样</li><li>Compression：压缩，减少文件大小，对内存没帮助，使用时还是解压 (而且有可能会导致内存占用更多)</li></ul><h4 id="assets"><a class="anchor" href="#assets">#</a> Assets</h4><ul><li>资源管理方式</li></ul><h3 id="unity-managed-memery"><a class="anchor" href="#unity-managed-memery">#</a> Unity Managed Memery</h3><ul><li>VM 内存池<ul><li>以 Block 进行管理，当一个 Block 连续 6 次未被 GC 访问，会返还系统 (所以这种情况基本上看不到)</li><li>不会频繁分配 reserved 内存，一次性分配一大块，每次当接近一个阈值会按照一个比例乘出来</li></ul></li><li>GC 机制<ul><li>Unity Mono 使用 Boehm<ul><li>不分带的</li><li>非压缩，不整理内存</li><li>为何没升级 Mono GC：要交版税，以及后来转向 IL2CPP，自己实现升级了渐进式 GC</li></ul></li><li>下一代 GC<ul><li>Incremental GC (渐进试 GC)、<ul><li>正常 GC 会暂停主线程，进行 GC 操作，会造成主线程卡顿</li><li>该项将暂停主线程操作分帧做，GC 总体时间不会变，减少的峰值消耗</li><li>IL2CPP 为 Unity 自己实现的 GC 机制，升级版 Boehm</li></ul></li></ul></li></ul></li><li>为什么内存下降了，总体内存池上升？<ul><li>Memery Fragmentation (内存碎片化)：分配的新内存已经插不进去了 (虽然碎片加起来可能远远满足需求)，造成严重浪费 —— 这些碎片可能再也用不了了。</li><li>高密度加载释放，先操作大内存，再操作小内存</li><li>Zombie Memery (僵尸内存)<ul><li>并非内存泄露 (无人可以访问和管理)</li><li>无用内存、没有释放</li><li>通过代码管理和性能工具分析</li></ul></li></ul></li><li>推荐做法<ul><li>Class (长生命周期) 和 Struct (短生命周期)</li><li>内存池，高频使用的小对象</li><li>闭包和匿名函数：闭包和匿名函数全被创建为 Class</li><li>协程：轮询模式，即使是局部变量，在协程未结束之前也会一直占用，以 Class 形式。所以推荐用的时候生产，用完释放</li><li>配置表：是否有庞大配置表，不要全部一次性扔内存</li><li>单例：慎用</li></ul></li><li>问题<ul><li>GameObject.SetActive：内部有大量操作，特别是 UI 会产生 额外 GC，激活一个 UI 时还会递归子 UI 初始化。建议这一块比较影响的话，将其移动至屏幕外</li></ul></li></ul><p>内存最佳实践：<br /><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi51bml0eS5jb20vdHV0b3JpYWwvbWVtb3J5LW1hbmFnZW1lbnQtaW4tdW5pdHkj">https://learn.unity.com/tutorial/memory-management-in-unity#</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是内存&quot;&gt;#&lt;/a&gt; 什么是内存？&lt;/h2&gt;
&lt;h3 id=&quot;物理内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#物理内存&quot;&gt;#&lt;/a&gt; 物理内存&lt;/h3&gt;
&lt;h4 id=&quot;cpu访问内</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://cwhisme.github.io/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>修复 Shoka 主题的一点小问题</title>
    <link href="https://cwhisme.github.io/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://cwhisme.github.io/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-23T02:40:28.000Z</published>
    <updated>2022-12-23T12:17:21.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>后续又发现两个问题：</p><ol><li>当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹</li><li>页面百分比进度显示不大准确</li></ol><h1 id="标签页回弹问题"><a class="anchor" href="#标签页回弹问题">#</a> 标签页回弹问题</h1><p>回家预览了下，发现页面内容高度不足会有显示问题，例如标签页会变得比较鬼畜：页面无法拉到底，底部的评论及网站底部一闪一闪的：</p><p><img data-src="/blogimages/2022/2022-12-17/GIF2022-12-1921-01-23.gif" alt="" /></p><p>调试了一下，找到了  <code>global.js</code>  中的  <code>scrollHandle</code>  方法中计算导致的。</p><p>它会为  <code>sidebar</code>  增加一个  <code>affix</code>  的 class，存在时会显示页面下方的元素，否则就会隐藏。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>affix<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>不知道为啥在我这反复横跳，造成了这种闪烁的结果。</p><p>其对应代码如下：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>看判断条件，结合实际情况，宽度因素可以排除：那么就是恐怕就是这个高度判断出了啥问题吧？</p><ul><li>window.pageYOffset = 当前页面相对于窗口垂直方向滚动的像素</li><li>headerHight=header 高度 + waves 高度 (就那个波纹特效高度)</li></ul><p>这里的逻辑估计是想：如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)。</p><p><s>所以不知道这个具体用来处理啥情况的，但毕竟我这出问题了，只能减小该值。改成  <code>window.pageYOffset &gt; headerHightInner</code>  就好了。</s></p><p>这样改是不对的， <code>过了两天</code>  发现不行，单纯修改这个高度判断，换一个分辨率又炸了。</p><p>又研究了下，觉得它主要问题还是  <code>window.pageYOffset &gt; headerHight</code>  计算问题，这里相当于只判断了  <code>当前页面滑动高度</code>  是否大于  <code>标题图像高度</code> ，但是并没判断要是整个文档区域的高度都比 标题图像高度 低的情况。这样 当前页面滑动高度 可能就划不过去了。</p><ul><li>注 1： <code>sideBar</code>  其实是我们显示的头像那个组件，不知道为啥还会影响到底部区域的显示，有 affix class 底部才能显示，删掉就会导致隐藏。</li><li>注 2： <code>document.body.offsetWidth &gt; 991</code>  代表的是会导致排版切换为手机类型排版的最低宽度，切换为手机排版后  <code>sideBar affix class</code>  也不产生影响</li></ul><h1 id="页面百分比计算不一致问题"><a class="anchor" href="#页面百分比计算不一致问题">#</a> 页面百分比计算不一致问题</h1><p>在修改上面标签页问题时，发现页面的 百分比 进度显示也不对劲 —— 跟实际页面滑动过的百分比不一致。</p><p>感觉原来的计算方式，仅计算百分比就不大对劲： <code>当前滑动高度/可显示区域高度</code></p><p>而  <code>当前滑动高度</code>  肯定会比  <code>可显示区域高度</code>  更大的，这种计算方式就感觉比较奇怪，然后在其它页面试了试，并特意去作者的博客看了下，显示上都不大对的上号。</p><p>于是把百分比计算和显示与否判断都改了：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">scrollHandle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> winHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> docHeight <span class="token operator">=</span> <span class="token function">getDocHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// var contentVisibilityHeight = docHeight > winHeight ? docHeight - winHeight : document.body.scrollHeight - winHeight;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">var</span> contentVisibilityHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight <span class="token operator">-</span> winHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> <span class="token constant">SHOW</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHightInner<span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> startScroll <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SHOW</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#FFF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  toolBtn<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  siteBrand<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// sideBar.toggleClass('affix', window.pageYOffset > headerHight &amp;&amp; document.body.offsetWidth > 991);</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 所以不清楚具体用来处理啥，单纯 window.pageYOffset > headerHight 判断可能导致底部最近评论闪烁问题</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">//scrollAction.y = Container.scrollTop;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token comment">//var diffX = scrollAction.x - Container.scrollLeft;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  diffY <span class="token operator">=</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">-</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">//if (diffX &lt; 0) &#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// Scroll right</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">//&#125; else if (diffX > 0) &#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// Scroll left</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token comment">//&#125; else</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// Scroll down</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// Scroll up</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// First scroll event</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// var scrollPercent = Math.round(Math.min(100 * window.pageYOffset / contentVisibilityHeight, 100)) + '%';</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token comment">// 上面的计算方式感觉对不上，这个改着试试</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token keyword">var</span> scrollPercent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">/</span><span class="token punctuation">(</span>contentVisibilityHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  backToTop<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> scrollPercent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.percent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span>scrollPercent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>暂时算是好了，不知道还有没有其它问题。后续如果发现问题再看了。</p><h1 id="果然出现新的问题了"><a class="anchor" href="#果然出现新的问题了">#</a> 果然出现新的问题了</h1><p>头像组件会浮动至页面顶端去 —— 终于也明白  <code>affix</code>  用来判断什么的了，有这个标记时可以浮动，否则不行。</p><p>感觉造成闪烁的原因，最大的问题是 docHeight 取出来的值不一样，会产生变化。</p><p>最终又改了下，改成要是实际高度比页顶图片那块还低，那么判断标准就取  <code>docHeight/2</code> ：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span><span class="token punctuation">(</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">></span>docHeight<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这样修改虽然不会闪烁，但要是 实际内容高度比页顶图片那块还低，滑动时头像组件进入浮动模式后，还是可能跑到页顶图片上去。</p><p>如果想彻底解决，得研究下为什么  <code>affix</code>  会导致下方对象看不见，然后再针对『消失』问题作处理 —— 而不是在这里改此处代码，因为理论上在这种情况下应该始终显示才对。</p><p>至于为什么会导致下方对象看不见了？估计跟 CSS 排版那边有关系，不想看了，再研究下去花的时间就太多了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;后续又发现两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹&lt;/li&gt;
&lt;li&gt;页面百分比进度显示不大准确&lt;/li&gt;
&lt;/o</summary>
      
    
    
    
    <category term="博客" scheme="https://cwhisme.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://cwhisme.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于我又把博客主题换成 Shoka 的事</title>
    <link href="https://cwhisme.github.io/2022/12/19/%E5%85%B3%E4%BA%8E%E6%88%91%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E6%88%90Shoka%E7%9A%84%E4%BA%8B/"/>
    <id>https://cwhisme.github.io/2022/12/19/%E5%85%B3%E4%BA%8E%E6%88%91%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E6%88%90Shoka%E7%9A%84%E4%BA%8B/</id>
    <published>2022-12-19T03:14:43.000Z</published>
    <updated>2022-12-23T12:38:04.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>怎么说呢... 一开始根本没想花这么多时间去换主题的。</p><p>一开始我只是单纯想给老主题 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tsdWdqby9oZXhvLXRoZW1lLWFub2R5bmU=">anodyne</span> 加一个『目录』的功能罢了...</p><p>看到一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FyZ3ZjaHMvaGV4by10aGVtZS1wYXJ0aWNsZXg=">hexo-theme-particlex</span> ，感觉不错。<br />又看到一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYS5naXQ=">hexo-theme-shoka</span>，感觉也挺可以，Shoka 主题记得一开始是看的<br />再看一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bwb2ZmaWNlL2hleG8tdGhlbWUtaWNhcnVz">hexo-theme-icarus</span>，感觉也不错啊 (✧◡✧)。</p><p>一顿操作后，越看越觉得自己的主题太简洁了。</p><p>对比了下几个主题，icarus 也是简洁风。而 Particlex 和 Shoka 都差不多类似类型，一开始想换成 Particlex。不过 Particlex 自定义的字体集有点大... 整个主题几十兆大半容量都在字体集上了。尝试去掉字体就变得难看起来，默认设置白茫茫地也不好看... 感觉头像 widget 还有点歪，主页文章列表内容预览截取字符没有处理标题以后的逻辑 (开始就是『前言』标题的话就空白了)，而且也没有目录功能，换过去又改一次是吧？</p><p>于是对比了解了下，最终决定换 Shoka—— 感觉一定能省不少事（不会说是因为看重随机背景图片好看且方便 —— 简直是选择困难症的福音）<br />(虽然最后依然花了挺多时间研究去结合自己的改动)</p><h1 id="过程"><a class="anchor" href="#过程">#</a> 过程</h1><h2 id="最新评论-随机文章数量修改"><a class="anchor" href="#最新评论-随机文章数量修改">#</a> 最新评论、随机文章数量修改</h2><p>一开始本来不想展示这个的，后面又仔细一想：我这博客也没个评论提示，最近的留言不是正好可以当做一个提示吗？看到最近留言就可以知道谁谁加了评论 (虽然我觉得这个冷清的博客不大可能会有啥评论)，不过多一个提示也是好的。</p><p>但是又感觉这个主题页面下面的随机文章和最近评论太长了：作者两者默认都是写死的 10 条，想减少一点。<br />随机文章还好说，直接改主题代码就行了</p><p>在 _config.shoka.yml 里边加了一个 count 的配置：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">widgets</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment"># if true, will show random posts</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">random_posts</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment"># if true, will show recent comments</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token key atrule">recent_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">3</span></pre></td></tr></table></figure><p>然后找到 widgets.njk 加入对数量参数的解析：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 注意少了个取参的花括号，因为不知道为啥位于代码块也会被转义掉</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"leancloud-recent-comment count_&#123; theme.widgets.count &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr></table></figure><p>然而最近评论的数量改起来就比较麻烦了，因为功能是直接写死在 MiniValine 的代码里的，没有支持自定义的功能。<br />如果想要减少，得改源码才行。<br />由于该主题的 js 是代码动态加载，并且在配置路径上说千万不要动：除非知道在干什么！<br />看起来，原因是作者对加速脚本做了合并处理，然后我调试了一下，感觉 MiniValine 并没有处于合并列表，相当于还是单个加载的。<br />于是就想着一下，fork 了一个工程，先在本地改着试试。</p><p>拉下来后，覆盖 vendors.js.valine 路径设置：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">vendors</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">js</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">valine</span><span class="token punctuation">:</span> /MiniValine/dist/MiniValine.min.js <span class="token comment">#gh/amehime/MiniValine@4.2.2-beta10/dist/MiniValine.min.js</span></pre></td></tr></table></figure><p>本地调试了下，感觉没什么大问题。</p><p>于是准备开改。</p><p>第一步就是编译 MiniValine ，因为没在 Readme 上看到编译方式，就自己研究了下，发现『可能』是用的 webpack。</p><p>于是尝试  <code>npm i webpack</code>  安装重新试，又缺失  <code>webpack-cli</code> ...... 一波安装下去，缺失 Python 都来了 —— 也不知道哪个依赖包需要 Python 编译。</p><p>现在这个电脑还没安装过 py，于是下载了最新版：编译确实开始了，结果又报新的错误。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> path E:<span class="token punctuation">\</span>项目<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>HexoBlog<span class="token punctuation">\</span>MiniValine<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>fibers</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> failed</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>cmd.exe /d /s /c <span class="token function">node</span> build.js <span class="token operator">||</span> nodejs build.js</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info it worked <span class="token keyword">if</span> it ends with ok</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info using node-gyp@3.8.0</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info using node@18.12.1 <span class="token operator">|</span> win32 <span class="token operator">|</span> x64</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> configure error</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack Error: Command failed: C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CWHIS<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Programs<span class="token punctuation">\</span>Python<span class="token punctuation">\</span>Python311<span class="token punctuation">\</span>python.EXE <span class="token parameter variable">-c</span> <span class="token function">import</span> sys<span class="token punctuation">;</span> print <span class="token string">"%s.%s.%s"</span> % sys.version_info<span class="token punctuation">[</span>:3<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack   File <span class="token string">"&lt;string>"</span>, line <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     <span class="token function">import</span> sys<span class="token punctuation">;</span> print <span class="token string">"%s.%s.%s"</span> % sys.version_info<span class="token punctuation">[</span>:3<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack SyntaxError: Missing parentheses <span class="token keyword">in</span> call to <span class="token string">'print'</span><span class="token builtin class-name">.</span> Did you mean print<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>?</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess.exithandler <span class="token punctuation">(</span>node:child_process:412:12<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess.emit <span class="token punctuation">(</span>node:events:513:28<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at maybeClose <span class="token punctuation">(</span>node:internal/child_process:1091:16<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess._handle.onexit <span class="token punctuation">(</span>node:internal/child_process:302:5<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> System Windows_NT <span class="token number">10.0</span>.22621</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token string">"D:<span class="token entity" title="\\">\\</span>Solfware<span class="token entity" title="\\">\\</span>GreenSolfware<span class="token entity" title="\\">\\</span>node-v18.12.1-win-x64<span class="token entity" title="\\">\\</span>node.exe"</span> <span class="token string">"E:<span class="token entity" title="\\">\\</span>项目<span class="token entity" title="\\">\\</span>Blog<span class="token entity" title="\\">\\</span>HexoBlog<span class="token entity" title="\\">\\</span>MiniValine<span class="token entity" title="\\">\\</span>node_modules<span class="token entity" title="\\">\\</span>node-gyp<span class="token entity" title="\\">\\</span>bin<span class="token entity" title="\\">\\</span>node-gyp.js"</span> <span class="token string">"rebuild"</span> <span class="token string">"--release"</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> cwd E:<span class="token punctuation">\</span>项目<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>HexoBlog<span class="token punctuation">\</span>MiniValine<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>fibers</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> <span class="token function">node</span> <span class="token parameter variable">-v</span> v18.12.1</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> node-gyp <span class="token parameter variable">-v</span> v3.8.0</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> not ok</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> node-gyp exited with code: <span class="token number">1</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Please <span class="token function">make</span> sure you are using a supported platform and <span class="token function">node</span> version. If you</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> would like to compile fibers on this machine please <span class="token function">make</span> sure you have setup your</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> build environment--</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Windows + OS X instructions here: https://github.com/nodejs/node-gyp</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Ubuntu <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++ build-essential<span class="token variable">`</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> RHEL <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span>yum <span class="token function">install</span> gcc-c++<span class="token variable">`</span></span> and <span class="token variable"><span class="token variable">`</span>yum groupinstall <span class="token string">'Development Tools'</span><span class="token variable">`</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Alpine <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> apk <span class="token function">add</span> python <span class="token function">make</span> g++<span class="token variable">`</span></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token string">'nodejs'</span> �����ڲ����ⲿ���Ҳ���ǿ����еĳ���</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> ���������ļ���</pre></td></tr></table></figure><p>看着就像是 python 版本过高，依赖包还在用老版本的语法？</p><p>这已经是反复安装和卸载 npm 包管理尝试后了<br />毕竟我不是专业的... 这时候已经花了不少时间了 —— 就换个主题... 加个小功能而已，我还有更重要的东西要做，怎么能在这里费这么大功夫，干脆直接在  <code>MiniValine.min.js</code>  基础上修改算了。</p><p>于是打开控制台要网页调试窗口，下了个断点，很快就把  <code>count_数量</code>  这个配置解析成查询数量上限值了。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> recentCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>t <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"count_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        recentCount <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>很简单的一行代码。</p><p>不过由于需要拉取工程改 MiniValine，如果有需要的话可以直接用我改好的 (... 如果真的还有人需要的话)：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">vendors</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">js</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">valine</span><span class="token punctuation">:</span> gh/CWHISME/MiniValine/dist/MiniValine.min.js <span class="token comment">#gh/amehime/MiniValine@4.2.2-beta10/dist/MiniValine.min.js</span></pre></td></tr></table></figure><p>以及改过的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvaGV4by10aGVtZS1zaG9rYS5naXQ=">Shoka</span> 地址。</p><h2 id="标题显示开头显示成-号"><a class="anchor" href="#标题显示开头显示成-号">#</a> 标题显示开头显示成 # 号</h2><p>最开始发现的是，文章目录标题不像作者那样显示 H1、H2 之类的，而是『#』号开头，比如：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-17_15-59-47.png" alt="" /></p><p>对比了下作者和其它主题使用者的情况，发现是这个 markdownIt-Anchor class 的问题，手动将其改成 anchor 就正常了。</p><p>知道原因，就得找为什么会这样？<br />安装过程也是按照要求操作的，为何 anchor 变成了 markdownIt-Anchor？</p><p>于是先后经历了反复 安装、卸载，查询依赖包版本等等操作...... 检查得怀疑人生！<br />结果最后才发现：是安装说明中的 hexo-renderer-multi-markdown-it 配置没有沾下来！</p><p>主题自带的 _config.yml 并没有关于这个的默认配置，必须手动粘贴进自己的 _config.yml 然后我之前安装的时候估计漏了，然后就变成这样了... 😭</p><h2 id="头像"><a class="anchor" href="#头像">#</a> 头像</h2><p>看到作者在关于页面写的自设，并留下了一个 <span class="exturl" data-url="aHR0cHM6Ly9waWNyZXcubWUv">Picrew</span> 的链接，点进去试了下，感觉还意外的不错。</p><p>于是把自己的上古头像也换了。</p><h2 id="页顶图片添加网格蒙版"><a class="anchor" href="#页顶图片添加网格蒙版">#</a> 页顶图片添加网格蒙版</h2><p>因为感觉有时候放大太糊了，参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8zOTI4OTY2Mjg3Lw==">Lavender</span> 的文章，增加了网格效果。</p><p>作者是直接修改的  <code>themes\shoka\source\css\_common\outline\header\header.styl</code></p><p>其实在  <code>source/_data/</code>  目录建立一个  <code>custom.styl</code>  自定义样式也是可以的。</p><p>并且因为我没有把图改成全屏，所以代码有所差异：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#header</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">&amp;::before</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/dot.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 70vh<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">z-index</span><span class="token punctuation">:</span> -4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 50vh<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0rem .2rem .3rem <span class="token function">alpha</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--header-text-color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>相当于只是在 Shoka 本来基础上加了一个网格蒙版效果。</p><hr /><p>后边想着把普通 cover 也加了一个，不过降低了透明度。</p><p>说道这个，GIMP 中的颜色模式，就算黑白色也不能采用灰度，还是得 RGB 颜色才行。</p><p>想着减少大小 (其实根本没必要) 试了下感觉蒙版格子都不对味了。</p><h2 id="音乐播放器"><a class="anchor" href="#音乐播放器">#</a> 音乐播放器</h2><p>注意 QQ 音乐的链接必须带 .html 后缀，否则音乐播放器会坏掉的。</p><p>筛选使用的正则表达式规则如下：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*song.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*album.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*artist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*playlist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*discover/toplist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*song/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*album/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*singer/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*playsquare/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*playlist/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*song/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*album/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*artist/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*collect/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr></table></figure><h3 id="歌单更换后错位问题"><a class="anchor" href="#歌单更换后错位问题">#</a> 歌单更换后错位问题</h3><p>自定义的音乐，更换了音乐列表音乐需要手动清空一下 loacalStorage，因为作者为了优化，每个歌单数据拉取一次后都是直接存储本地的。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 例如 utils.parse 返回数据</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">,</span> <span class="token string">'8733616535'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 本地有就取本地，否则解析存储本地</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> meta <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>meta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> skey <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> playlist <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>playlist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>playlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.i-meto.com/meting/api?server='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;type='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;id='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;r='</span><span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这样要是实时在另外一边更换了歌单中的歌曲就会出问题：比如歌曲错位啊、名字不对、播放失败之类的。</p><p>似乎访问一次后，歌单记录下来变不了了 (对访问者来说)，因为貌似没有看到删除的地方...</p><h2 id="自定义脚本执行时机问题"><a class="anchor" href="#自定义脚本执行时机问题">#</a> 自定义脚本执行时机问题</h2><p>想把之前显示文章『多少天』前的脚本放进来，不过一时间没找到可以配置的地方。</p><p>最后还是直接改的主题代码，在 layout.njk 导入 app.js 主题代码之后添加自定义的脚本。</p><p>其中有个问题是，这个点击进去另外的页面貌似做了优化的，不会重新请求所有页面数据，因此导入脚本若是想每次页面发送改变执行，就不能直接用老方式了。</p><p>目前 Shoka 加载流程是：</p><ol><li>页面初始化，绑定 DOMContentLoaded siteInit 事件</li><li>在该方法中绑定动态事件，例如 pjax 动态成功加载了新页面的处理 siteRefresh 函数</li><li>在该方法中调用一次 siteRefresh 执行一次手动刷新</li><li>siteRefresh 中进行实际页面的刷新处理</li></ol><p>所以关键点就在于 pjax:success 绑定的 siteRefresh 函数了。</p><p>主题里面的代码肯定是不好去改动的，于是尝试在自己导入的脚本中绑定 pjax:success 事件：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//shoka 版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">refreshDateTimeOfDay</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">var</span> dateNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">var</span> dayCount <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dateNow <span class="token operator">-</span> date<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">var</span> finalStr <span class="token operator">=</span> dayCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> nowStr <span class="token operator">:</span> dayCount <span class="token operator">+</span> dayStr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        x<span class="token punctuation">.</span>innerText <span class="token operator">=</span> x<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">,</span> finalStr<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pjax:success'</span><span class="token punctuation">,</span> refreshDateTimeOfDay<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">refreshDateTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>试了下可以用：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-18_17-09-05.jpg" alt="" /></p><p>那就先这样了。</p><p>引用 live2d 的方式也差不多，之前我已经完全分离了 live2d 库，只需要引用脚本就行了。</p><p>—— 不过由于 live2d 之前 ui 使用的是 FontAwesome 图标，导致显示不出来。</p><p>不可能为了 live2d 专门再导入一个 FontAwesome 库的...... 从 shoka 已有的 Iconfont 图标里找了几个替换一下吧。</p><h2 id="html-标签没有被解析"><a class="anchor" href="#html-标签没有被解析">#</a> HTML 标签没有被解析</h2><p>以前使用默认 markdown 渲染器的时候，因为没有修改字体颜色功能，都是直接采用 html 标签如  <code>&lt;font color=red&gt; 静态对象的所有直接光照、间接光照、阴影均烘焙 &lt;/font&gt;</code>  这种方式实现的。</p><p>然后就发现 shoka 没有解析了，直接被当做纯文本给显示出来。</p><p>查了并试了下，是由于 hexo-renderer-multi-markdown-it 渲染器的配置问题，markdown.render.html 字段需要设置为 true—— 作者默认给出的模板是 false，所以作为纯文本显示了。</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">markdown</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">render</span><span class="token punctuation">:</span> <span class="token comment"># 渲染器设置</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 过滤 HTML 标签 ----- true 表示会转义 html 标签，否则作为纯文本</span></pre></td></tr></table></figure><h2 id="压缩插件问题"><a class="anchor" href="#压缩插件问题">#</a> 压缩插件问题</h2><p>我这边 hexo-renderer-multi-markdown-it 自带压缩插件用起来有点问题，压缩自己的代码跟 Shoka 的竟然还产生了随机方法名的冲突，换回 hexo-all-minifier 了。</p><h2 id="引入自定义脚本增加配置功能"><a class="anchor" href="#引入自定义脚本增加配置功能">#</a> 引入自定义脚本增加配置功能</h2><p>上面直接通过直接修改主题模板引入了自定义脚本代码，不过感觉可以将这个修改转移到配置中。<br />于是仿照 已有的渲染方式，在  <code>主题 _config.yml(_config.shoka.yml)</code>  增加  <code>customJs</code>  配置，例如</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">customJs</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">-</span> /js/DateTimeAfeterCalc.js</pre></td></tr></table></figure><p>然后在  <code>asset.js</code>  注册方法：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_custom_js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> customJs <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">.</span>customJs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>customJs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> customJs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    str<span class="token operator">+=</span> <span class="token function">htmlTag</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">src</span><span class="token operator">:</span>  customJs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>最后在  <code>layout.njk</code>  调用：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token function">_vendor_js</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token function">_js</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span><span class="token function">_custom_js</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如此后续要是还有引用自己的脚本，只需要改  <code>_config.shoka.yml</code>  配置，不会动到主题本身代码这边了。</p><h2 id="搜索"><a class="anchor" href="#搜索">#</a> 搜索</h2><p>最后是 algolia 搜索，这个没什么改的，虽然之前也没用过，安装好 hexo-algoliasearch，然后注册一个账号按照建议来<s>就行了</s> —— 需要注意的是，algolia 配置必须配置到 Hexo 根目录的  <code>_config.yml</code>  中，如果配到了主题如  <code>_config.shoka.yml</code>  配置里边是不行的。</p><p>刚开始我就按照惯例配置在  <code>_config.shoka.yml</code>  内，结果发现没什么效果 —— 点按钮也没反应，查了代码发现发现实际是取的 config 配置。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> theme <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>algolia<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  siteConfig<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">appID</span>    <span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>appId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">apiKey</span>   <span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>apiKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">indexName</span><span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>indexName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">hits</span>     <span class="token operator">:</span> theme<span class="token punctuation">.</span>search<span class="token punctuation">.</span>hits</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>改到全局配置里就可以了。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>本来只是想：</p><ol><li>为旧主题加个目录</li><li>想让目录 (目录同级头像不变) 可以跟随页面移动]</li><li>研究如何处理手机端兼容性问题</li><li>感觉主题不好看</li><li>换</li><li>换哪个？</li><li>研究 ing</li><li>换 Shoka 吧</li><li>研究 ing</li><li>自定义</li><li>研究功能如何实现的</li><li>解决问题</li><li>终于完成了，周末都过去了......</li></ol><p>何况之前就早在看，只是周末才开始在实际动手而已，本来打算搞完周末补一下 Unity 内存知识的，现在已经是<s>周日晚上 10 点多</s> <s>周一</s> 周二了！</p><p>花了这么多时间，算是对主题基本框架都有了个认识... 比如：</p><ul><li>作者预留了很多自定义的口子： <code>source/_data/</code>  目录创建对应 yml 或 styl 就可以覆盖主题本来配置和样式 (images.yml 配置也可以在这覆盖)</li><li>动态加载功能使用 pjax 实现，自己加脚本想页面初始化执行需要绑对应事件</li><li>测试音乐播放器注意歌单缓存问题</li><li>引用自定义脚本</li></ul><p>虽然自信下一次想改什么肯定能更快找到该改哪里，但忙活这么久，乍一看似乎像是又没改到啥的样子，还是感觉有点惨了。</p><p><s>处理一下收尾该睡觉了，本来总结还打算再写点什么的，算了算了。</s></p><p>弄完搜索和拖动问题，再看了下页面，突然又想把 cover 图片也加上一点蒙版，不过肯定需要降低透明度 —— 虽然 CSS 自带透明度调整，但是一开始我竟然意图通过编辑图片来控制...(ﾉД`)，不熟悉的东西就是这样。另外发现使用  <code>background-attachment</code>  css 属性会导致在 cover 上 repeat 不正常，去掉就好了。</p><p>再看一眼老博客的样子：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-20_10-28-08.jpg" alt="" /></p><p>最后，添加了最近评论及自定义脚本配置的： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvaGV4by10aGVtZS1zaG9rYS5naXQ=">Shoka</span><br /> 添加解析 class='count_数量 ' 为最近评论数量功能的： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvTWluaVZhbGluZS5naXQ=">MiniValine</span> (只改了 *.min.js 那一个解析的地方)</p><p>后面再整理一下老文章的标签和分类，这次应该就真搞差不多了。</p><h1 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h1><p>出现个疑问，而且没研究出来问题：指定随机的图片是如何实现的？</p><p>因为 Hexo 是静态的，只可能是后期修改。</p><p>然后却又没找到除了  <code>engine.js</code>  生成博客时调用  <code>images.yml</code>  随机图片的接口。也就是说，这个在生成时就应该已经被固定了，而且研究半天，发现动态刷新页面时查询相关接口的数据 (图片链接) 就已经变了。</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-23_14-58-37.jpg" alt="Imgs 与之前的不一样了" /></p><p>所以要么这个功能是作者放在了其它的已合并的公共脚本中？但是又没发现哪里指定的  <code>images.yml</code>  中的配置图片值。</p><p>总不能由 Hexo 动态随机出来的吧？想不通。</p><hr /><p>经过多方面研究，破案了 —— 这东西还真是实时生成的！</p><p>测试方法是给  <code>hexo.extend.helper</code>  多绑一个计算时间的：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_date'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">language</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后在生成图片那给加上去：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> data<span class="token operator">-</span>background<span class="token operator">-</span>image<span class="token operator">=</span><span class="token string">"&#123; image &#125;"</span> date<span class="token operator">=</span><span class="token string">"&#123; _date() &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr></table></figure><p>运行时，这个时间一直在变化：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-23_15-31-04.jpg" alt="" /></p><p>说明不是静态的！Hexo 什么时候支持这种动态执行生成页面的方法了？</p><p>然而我们生成后上传的东的确又是纯静态的东西... 想不明白。</p><hr /><p>上传的东西确实变成静态的了... 这个随机图片仅限于本地调试的时候。一旦上传就全部固定了...</p><p>原来如此，还以为一直随机呢... 花这么多时间来找原因，本地图片实时随机真是让人误会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;怎么说呢... 一开始根本没想花这么多时间去换主题的。&lt;/p&gt;
&lt;p&gt;一开始我只是单纯想给老主题 &lt;span class=&quot;exturl&quot; data-url=&quot;aH</summary>
      
    
    
    
    <category term="博客" scheme="https://cwhisme.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://cwhisme.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>为 Anodyne 主题增加目录表现</title>
    <link href="https://cwhisme.github.io/2022/12/17/%E4%B8%BAAnodyne%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E7%9B%AE%E5%BD%95%E8%A1%A8%E7%8E%B0/"/>
    <id>https://cwhisme.github.io/2022/12/17/%E4%B8%BAAnodyne%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E7%9B%AE%E5%BD%95%E8%A1%A8%E7%8E%B0/</id>
    <published>2022-12-17T07:38:52.000Z</published>
    <updated>2022-12-19T12:21:07.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>不知道哪里的想法，想给文章加个目录，方便预览：可能因为 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tsdWdqby9oZXhvLXRoZW1lLWFub2R5bmU=">anodyne</span> 主题本身的排版显示，让人有点分不清标题子级？(指一级标题、二级标题这种)</p><p>于是想找一个有目录的主题看看，能不能参考下：于是就开始搜索 『Hexo 主题』</p><h1 id="研究"><a class="anchor" href="#研究">#</a> 研究</h1><h2 id="目录跟随效果"><a class="anchor" href="#目录跟随效果">#</a> 目录跟随效果</h2><p>开始吭吭哧哧改自己的老主题，用 toc 加上目录后，感觉目录应该根据页面滑动而浮动，但是由于目录处于整个右侧界面的子级，现在的需求是：</p><blockquote><p>widget 不能动，只有当页面滑动超出 toc 起始范围时，仅 toc 跟随页面滑动</p></blockquote><p>基本表现如下：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-19_14-58-46.jpg" alt="表现" /></p><p>现在的大概结构如下：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widget<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>toc 就是目录</p><p>且不说组件跟文章不是一个框架，用 fixed 之类的属性只能一直固定在一个位置，难道改这个我还要写 js 代码动态去设置 css 节点属性么？</p><p>于是开始 面向搜索编程😊 ，找了下，先是找到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZW5vbmcuY29tLzY3OTQwMDAv">关于 CSS：固定位置，但相对于容器</span>，得知了  <code>position sticky</code>  这条属性，它的作用是：在概念上类似于 position: fixed。区别在于，具有 position: sticky 的元素在其父级中的行为类似于 position: relative，直到在视口中满足给定的偏移阈值为止。</p><p>现在需求可以做了，那么余下的问题就是：让 toc 容器大小与 content 一致 —— 所以 widget 大小也必须与 content 一致，否则 widget 实际高度多少就是多少，页面就算 1000 个高度， widget 可能也还是 200 个高度。</p><p>因为整个页面主要靠 content 撑起来的，不管是设置 toc 还是 widget，都没法让另外一边的自适应 content。</p><p>然后又找到一个文章 <a href="https://blog.csdn.net/ltmtianming/article/details/109588841">css 实现 div 的高度随着另一个 div 的高度改变<br /></a></p><p>先是参考上面的设置，将 widget 设置为  <code>position: absolute</code> ，容器大小保持与整个页面高度一至，toc 设置为  <code>position sticky</code></p><p>结果不行，于是继续研究：最后得出结论是 parent 是默认静态的，即  <code>position: static</code> 。</p><blockquote><p>static，静态定位，HTML 元素的默认值，即没有定位，元素出现在正常的流中。 静态定位的元素不会受到 top, bottom, left, right, z-index 影响。</p></blockquote><p>于是又是一通改，成功解决。</p><h2 id="手机端错位问题"><a class="anchor" href="#手机端错位问题">#</a> 手机端错位问题</h2><p>感觉没什么问题，上传服务器。</p><p>不过很快就发现：手机端预览又有问题了。</p><p>由于已经修复了，现在也看不到截图，不过也可以想象：</p><ul><li>parent relative</li><li>widget absolute</li></ul><p>那么在 content 与 widget 宽度不足以同时显示的时候，他们就没法自动排版了。于是两者挤在了一块，相当于叠加了起来。</p><p>总之看着挺糟糕的，于是想想要不算了吧，目录也不要浮动定位了，这需求<s>我其实没那么强烈</s>。</p><p>下来后想着想着又不大甘心，于是再次一通研究，发现了 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2ZsZXg=">flex</span> 这个自定定位排版的容器属性。立刻惊为天人，马上用起来，解决了目录问题。</p><h1 id="想换新主题了"><a class="anchor" href="#想换新主题了">#</a> 想换新主题了！</h1><p>然后在这个过程中，看着其它的主题样式，突然就觉得自己的博客主题也太... 简洁了 —— 虽然这个简洁也是以前我觉得挺好看的，现在却想再加点什么。</p><p>比如看着 Shoka 的随机背景，于是又了解到了 随机二次元图片 接口这回事，于是想要..... 整一个。</p><p>找了下资料，例如用这种方式就可以取得一个随机图片：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">fetch</span> <span class="token punctuation">(</span><span class="token string">"https://www.dmoe.cc/random.php?return=json"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>imgurl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>于是再在自己的主题上，找个合适的位置贴上去，就可以随机展示图片了对吧？稍微研究了一下下..... 没完没了了是吧！(摔 (ﾉ｀⊿´)ﾉ)</p><p>这样不如... 直接把主题换了？</p><p>特别是看着自己主题的代码样式、Markdown 解析显示的样式，虽然以前感觉简洁也不错... 现在怎么看怎么感觉不香了。</p><hr /><p>所以...?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;不知道哪里的想法，想给文章加个目录，方便预览：可能因为 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29</summary>
      
    
    
    
    <category term="博客" scheme="https://cwhisme.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>协变和逆变</title>
    <link href="https://cwhisme.github.io/2022/12/10/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>https://cwhisme.github.io/2022/12/10/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/</id>
    <published>2022-12-10T09:06:56.000Z</published>
    <updated>2022-12-22T03:29:48.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>关于协变和逆变，早在前些日子就在想整理一下了，不过由于前几天研究了下 <a href="">Unity 的阴影与光照烘焙</a> ，所以一直放在心上却没有实施，都忘了之前是准备想怎么写开头了... 也忘了作笔记，只能现在重新想一想。</p><p>逆变 和 协变其实是对面向对象的一个补充，在 C# 中通过 in 标识逆变，out 标识 协变，如果没有标识，那么默认就是 『不变』。</p><p>之前想思考了好些天了，感觉有些地方还是有点没想透彻，这次整理的同时进行更多的试验，确定自己的想法对不对。</p><h2 id="描述"><a class="anchor" href="#描述">#</a> 描述</h2><p>变体仅针对引用类型，且只有 数组 (隐式协变)、泛型委托、泛型接口 可以使用。</p><p><font color=red>注：对于同一泛型参数，逆变和协变不能同时存在。</font></p><p>正常来说，根据里氏替换原则：子类型（subtype）必须能够替换掉他们的基类型（base type）</p><p>我们通常在写代码的时候，也会不自觉地用到这一点：例如派生出多个子类的父类，可以作为一个『统一的方法参数』接受子类传递然后处理：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">Parent</span> pt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Child</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">ChildBoy</span> childBoy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childBoy<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们可以说一个类是另一个类的基类，但是一个接口、一个委托正常是没有这种关系的，所以当包裹一层 (委托、接口) 后就不行了 —— 理论上它们并没有子类指向父类的关系。</p><p>泛型是对类型系统的进一步抽象，上面的变化映射至 (数组、泛型委托、泛型接口) 就是逆变与协变的概念。</p><p>从简单表现上来看：</p><ul><li>协变用于隐式将返回参数 (容器) 的子类转为父类</li><li>逆变用于隐式将传入参数 (容器) 的父类转为子类</li></ul><p>想想看：</p><ul><li>协 —— 子类指向父类的关系符合原始的关系转换方向</li><li>逆 —— 父类转子类</li></ul><h2 id="测试"><a class="anchor" href="#测试">#</a> 测试</h2><h3 id="测试协变"><a class="anchor" href="#测试协变">#</a> 测试协变</h3><h4 id="1-数组"><a class="anchor" href="#1-数组">#</a> (1) 数组</h4><p>数组的协变相信大多数人都不自觉使用过，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> objects <span class="token operator">=</span> strings<span class="token punctuation">;</span></pre></td></tr></table></figure><p>上述代码就是数组隐式支持的协变：我们可以把子类数组直接赋值给定义的基类数组。</p><p>上面已经解释过，协变用于 『返回值隐式转换为父类』</p><blockquote><p>因为不管如何从数组中取值：strings [index] 都可以转为 object</p></blockquote><p>符合 『子类指向父类的关系』，协变成立。</p><h4 id="2-接口"><a class="anchor" href="#2-接口">#</a> (2) 接口</h4><p>接口的协变以 C# 内置 IReadOnlyList 接口为例，该接口标记了 out，List 就实现了该接口。</p><p>首先定义两个有父子关系的引用对象：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Parent：父类"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Parent</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Child：子类"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后进行调用测试：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//==== 报错 ==== 列表是普通类，没有也不支持协变功能</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//List&lt;Parent> parentList = childList;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 正常赋值，协变使得声明子类的接口可隐式转为父类</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> baseList <span class="token operator">=</span> childList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>baseList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Test (0.008s)---Child：子类</code></pre><p>可能在这里还会有点不明白发生了什么，再以 List 实现的另一个接口  <code>IList&lt;T&gt;</code>  为例，IList 接口并未做标识，因此它是『不变』的，如果我们想这样赋值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 报错，提示无法隐式转换 List&lt;Child>->IList&lt;Panret></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">IList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> list <span class="token operator">=</span> childList<span class="token punctuation">;</span></pre></td></tr></table></figure><p>作为『不变』的泛型接口，想要将泛型子类赋值泛型父类就会得到报错。</p><p>现在应该大概有点感觉了 —— 特别是当拥有多个子类，我们想统一接收的时候，拥有协变就可以直接这样写：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>ChildBoy<span class="token punctuation">></span></span> childList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ChildBoy<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>ChildGirl<span class="token punctuation">></span></span> childList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ChildGirl<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> baseList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>baseList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Test (0.009s)---Child：子类ChildBoy：子类ChildGirl：子类</code></pre><blockquote><p>当我们调用 childList [0] 可以得到一个 Child<br /> 当我们调用 childList2 [0] 可以得到一个 ChildBoy<br /> 当我们调用 childList3 [0] 可以得到一个 ChildGirl</p></blockquote><p>最后从接口得到的这个对象，都可以安全转为 Parent<br /> 符合 『子类指向父类的关系』，协变成立。</p><h4 id="3-委托"><a class="anchor" href="#3-委托">#</a> (3) 委托</h4><p>除此之外，还有接触最多的  <code>TResult Func&lt;out TResult&gt;</code>  委托，它的返回值也是支持协变的：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Func<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> parentFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Func<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>parentFunc <span class="token operator">=</span> childFunc<span class="token punctuation">;</span></pre></td></tr></table></figure><p>上面已经解释过，协变用于 『返回值隐式转换为父类』：因为 Child 可以转为 Parent，所以 <code>Func&lt;Child&gt;</code>  也可以安全转为  <code>Func&lt;Parent&gt;</code> .</p><blockquote><p>当我们调用 childFunc () 可以得到一个 子类<br />当我们调用 parentFunc () 可以得到一个 父类<br />当 parentFunc=childFunc 调用可以得到一个 父类</p></blockquote><p>符合 『子类指向父类的关系』，协变成立。</p><h3 id="测试逆变"><a class="anchor" href="#测试逆变">#</a> 测试逆变</h3><p>协变标识返回值，逆变标识参数。</p><p>虽然听起来差不多，不过协变看着其实更符合思考，因为基于接口、委托的执行返回值我们可以更加直观地得出结论，逆变可能就没那么容易理解了。</p><p>还是先以 C# 内置 IComparable 接口为例，该接口标记了逆变，我们定义两个类：Parent 和 Child，并使 Parent 实现该接口。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">IComparable<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> ip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">IComparable<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> iChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//==== 报错 ====</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ip <span class="token operator">=</span> iChild<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 正常赋值，逆变使得声明父类接口隐式转为声明子类接口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>iChild <span class="token operator">=</span> ip<span class="token punctuation">;</span></pre></td></tr></table></figure><p>在上述代码中，反而是 Child 接口能够接受 Parent 接口对象，第一个地方将 iChild (子类接口) 赋值 ip (父类接口) 为什么会报错呢？</p><p>在上面我们已经测试过协变了，协变得出的结论是最终返回结果的类型一定是符合转换规则的，那么这里应该也可以先从执行结果上考虑：</p><blockquote><p>若执行  <code>IComparable&lt;Parent&gt;</code>  接口，需要接受 Parent 或 Child 参数<br />若执行  <code>IComparable&lt;Child&gt;</code>  接口，只能接受 Child 参数</p></blockquote><ul><li>如果我们把 ip 赋值给 iChild，那么在参数中就变成只能接受 Child 类型了。</li><li>但是如果把 iChild 赋值给 ip，那么参数中种就变成也可以接受 Parent 类型了。</li></ul><p>所以，区别是什么？</p><p>区别在于：<font color=red>(1) ip 本来是接受父类型，变成只能接受子类型，是合理的。(2) iChild 本来只能接受子类型，如果变成接受父类型参数则不合理。</font></p><p>想一想，一个方法的参数接受的是子类，但是把父类传进去，是不是只有强制类型转换？但是强制类型转换是不是又涉及到这个『父类实际上装的并不是这个子类』问题呢？</p><p>说实话，逆变确实感觉更绕，但从结果上来看，又能感觉确实应当如此。</p><p>泛型委托也是一样的道理：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> parentAction <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Action<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childAction <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 报错，因为如果赋值成功，调用 parentAction (childAction) 就可以传入父类型了</span></pre></td></tr><tr><td data-num="4"></td><td><pre>parentAction <span class="token operator">=</span> childAction<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 正常赋值，childAction 只能接受 Child 类型，parentAction 接受 Child 类型符合父类指向子类的关系</span></pre></td></tr><tr><td data-num="6"></td><td><pre>childAction <span class="token operator">=</span> parentAction<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>协变 (out) 逆变 (in）：数组是协变的 - 子类数组可以隐式转为父类数组使用，只能用于『数组、泛型委托、泛型接口』，协变用于返回值隐式转为父类 (容器)，逆变用于传入值可以被隐式转为子类 (容器)(当然在调用时类型就变成确定了)，不变：不可互转，变体仅适用于引用类型。</p><ul><li>逆变常见是 Action &lt;子类&gt;=Action &lt; 父类 &gt;，参数为父类的委托赋值给参数子类的委托，调用时必须传入子类对象，根据面向对象规则子类一定包含父类字段或方法，可以正常调用</li><li>协变常见的比如 List 实现的 IEnumerable，正常情况下 List &lt;子类型&gt; 无法赋值给 List &lt; 父类型 &gt;，这个接口就标记了协变，使得可以声明 IEnumerabl &lt; 父类型 &gt; = List &lt; 子类型 &gt;</li><li>也可以简单记为：协变可以使得声明为父类的泛型可以装载子类，逆变使得声明子类的泛型可以可装载父类，其最终执行的返回值、参数符合里氏替换原则。</li></ul><p>对于这两者，从表现上来看：</p><ul><li>协变：声明的泛型容器子类可以赋值父类</li><li>逆变：声明的泛型容器父类可以赋值子类</li></ul><p>从调用结果上来看：</p><ul><li>协变：返回结果符合里氏替换原则，返回值为父类型的方法也可以返回子类型</li><li>逆变：接收参数符合里氏替换原则，参数为父类型的方法可以接受子类型的参数</li></ul><p>所以回到前面的一个问题：对于同一个模板参数 T ，协变和逆变不能同时存在，为什么呢？</p><blockquote><p>仔细考虑一下，如果一个接口参数同时支持协变和逆变，那么上述测试的赋值方式就必须同时双向支持，这样就会导致出现『参数为子类型的接口，可以传入父类型』，这是不合法的。<br />反之亦然，返回参数为子类型的接口，返回了实际为父类型的对象，也是不合法的。</p></blockquote><p>C# 中常见的自带协变逆变的接口或委托：</p><ul><li><code>IEnumerable&lt;out T&gt;</code></li><li><code>IEnumerator&lt;out T&gt;</code></li><li><code>System.Linq.IQueryable&lt;out T&gt;</code></li><li><code>IComparer&lt;in T&gt;</code></li><li><code>IComparable&lt;in T&gt;</code></li><li><code>IEqualityComparer&lt;in T&gt;</code></li><li><code>IReadOnlyList&lt;out T&gt;</code></li><li><code>TResult Func&lt;in T, out TResult&gt;(T arg) 等</code></li><li><code>void Action&lt;in T&gt;(T obj) 等</code></li><li>数组默认协变</li></ul><p>—————————————————————————————————————————</p><blockquote><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9zdGFuZGFyZC9nZW5lcmljcy9jb3ZhcmlhbmNlLWFuZC1jb250cmF2YXJpYW5jZQ==">covariance-and-contravariance</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVlZTdHVkeS9wLzExNDA0MzAwLmh0bWw=">C# - 协变、逆变 看完这篇就懂了</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQ0xSMDEwL3AvMzI3NDMxMC5odG1s">逆变与协变详解 </span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTmlucHV0ZXIvYXJjaGl2ZS8yMDA4LzExLzIyL2dlbmVyaWNfY292YXJpYW50Lmh0bWw=">.NET 4.0 中的泛型协变和反变</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;关于协变和逆变，早在前些日子就在想整理一下了，不过由于前几天研究了下 &lt;a href=&quot;&quot;&gt;Unity 的阴影与光照烘焙&lt;/a&gt; ，所以一直放在心上却没有实施，都忘</summary>
      
    
    
    
    <category term="理论研究" scheme="https://cwhisme.github.io/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://cwhisme.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity 的阴影与光照烘焙</title>
    <link href="https://cwhisme.github.io/2022/12/06/Unity%E7%9A%84%E9%98%B4%E5%BD%B1%E4%B8%8E%E5%85%89%E7%85%A7%E7%83%98%E7%84%99/"/>
    <id>https://cwhisme.github.io/2022/12/06/Unity%E7%9A%84%E9%98%B4%E5%BD%B1%E4%B8%8E%E5%85%89%E7%85%A7%E7%83%98%E7%84%99/</id>
    <published>2022-12-06T10:32:41.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>前几天跟同事讨论 Unity Lightmap ，在 Shader (自定义) 中是怎么取的，然后我说 Unity 在 Shader 中直接会给数据，调用 Unity 提弄函数直接采样就行了。</p><p>同事表示说，这个光照贴图 UV 呢？哪里取。</p><p>当时也是回答说是 Unity 直接提供的，虽说实际也差不多，不过后面下来又想了想，细节方面也已经记不清了。</p><p>再想到过去研究光照这块，早已经是多年前的事了，于是重新实际试了试，直接把光照烘焙这块都重新了解了下，简单做个记录。</p><p>主要使用工具有：</p><ul><li>Unity3D 2021.3.6f1</li><li>默认渲染管线</li><li>Forward RenderPath</li><li>Standard Shader</li></ul><h2 id="lightmapping-数据"><a class="anchor" href="#lightmapping-数据">#</a> LightMapping 数据</h2><p>首先回到上面那个问题，光照烘焙后，会为场景生成对应光照贴图，贴图数据本身位于场景同名同级的子目录中，Lighting 设置中 LightMaps 会自动被设置上去，此时直接在同场景对应静态物体上也能预览：</p><p><img data-src="/blogimages/2022/2022-12-06/m_40890511256b2a6d713c9161123984d2_r.png" alt="" /></p><p>默认情况下， Lightmap Index、TilingX、TilingY、OffsetX、OffsetY 这类参数虽然看起来是直接记录在场景对象上的，实际并不是，最简单的测试方法就是将该对象存储为 Prefab (或者复制一份)，就会发现 Prefab 上的 LightMap 信息已经丢失 —— 再放回去也是丢失状态 (可能是为了避免污染 Prefab)。<br />当然此时也可以通过记录 Render.lightmapIndex 之类的，通过脚本给还原。</p><p>动态加载 Lightmap 一般都该是通过这种方式进行：先给 LightmapSettings.lightmaps 赋值对应的 Lightmap 数据、贴图，然后给场景静态物体 Render 设置上对应的 lightmapIndex 等数据，Shader 中就能通过 Unity 提供的函数识别然后采样。</p><p>注 1：烘焙光照贴图 Shader 中通过 TEXCOORD1 采样：</p><blockquote><p>Unity stores baked lightmap UVs in its mesh in the Mesh.uv2 channel. This channel maps to the TEXCOORD1 shader semantic, and is commonly called “UV1”.</p></blockquote><p>注 2：实时光照贴图 Shader 中通过 TEXCOORD2 采样（勾选 Lighting-&gt;Realtime Lighting 生效）：</p><blockquote><p>Unity can use data in the Mesh.uv3 channel as input for the real-time lightmap UV calculations. Mesh.uv3 maps to the TEXCOORD2 shader semantic, and is commonly called “UV2”.</p></blockquote><h2 id="光源与阴影"><a class="anchor" href="#光源与阴影">#</a> 光源与阴影</h2><p>每一个光源，若光源是实时的，对于动态物体至少是双倍消耗，对于静态物体也一样。</p><p>消耗点主要在于动态阴影上，在 Forwardbase Render Path 中，绘制阴影分为两部分：自己接收阴影以及投射阴影，MeshRender 上也可以单独在 Lighting 选项设置开关。</p><ul><li>是否有阴影跟三个条件有关：<ul><li>(1) Shader 中的 接收投射阴影 Pass</li><li>(2) Render 上的接收投射开关</li><li>(3) 光源是否设置阴影</li></ul></li></ul><p>投射阴影的 Pass 是特有的一个，它会将自身到光源的方向渲染至一张深度图，投射及采样的大概步骤如下：</p><ul><li><p>Shader 中阴影投射 Pass 必须：</p><ul><li>打 Tags {&quot;LightMode&quot;:&quot;ShadowCaster&quot;}，标记该 Pass 专用于阴影投射</li><li>增加预编译指令 #pragma multi_compile_shadowcaster</li><li>在顶点、片段中调用 Unity 提供的预定义进行处理：V2F_SHADOW_CASTER、TRANSFER_SHADOW_CASTER_NORMALOFFSET、SHADOW_CASTER_FRAGMENT<ul><li>V2F_SHADOW_CASTER：顶点到片段数据变量，直接在 v2f 定义即可</li><li>TRANSFER_SHADOW_CASTER_NORMALOFFSET：在顶点 Shader 函数中计算了 物体顶点世界坐标 -(减) 光源坐标，即当前顶点到光源向量</li><li>SHADOW_CASTER_FRAGMENT：在片段 Shader 函数中将顶点到光源向量转长度，计算深度 (光源设置的 shadowbias 就在这里用的：UnityEncodeCubeShadowDepth ((长度 + unity_Light_ShadowBias.x)*_LightPositionRange.w))</li></ul></li></ul></li><li><p>Shader 中阴影接收 Pass 必须：</p><ul><li>打 Tags {&quot;LightMode&quot;:&quot;ForwardBase&quot;}，标记该 Pass 为向前渲染</li><li>增加预编译指令 #pragma multi_compile_fwdbase</li><li>在顶点、片段中调用 Unity 提供的预定义进行处理：<ul><li>SHADOWCOORDS (ID)：v2f 结构体使用，ID 是个数值，表示使用的 TEXCOORD+ID，保存顶点函数通过 ComputeScreenPos (o.pos) 计算的 showCoord 以传入片元着色函数 (定义的 ID 要避免与其它 TEXCOORD 产生冲突)</li><li>TRANFER_SHADOW (o)：通过顶点 clip 裁剪空间坐标计算屏幕空间阴影采样坐标内部调用的是：ComputeScreenPos (o.pos)</li><li>SHADOW_ATTENUATION (i)：根据 showCoord 采样阴影颜色，返回叠加的阴影强度值。</li></ul></li></ul></li></ul><p>其中投射 Pass 是必须的一个单独 Pass，导致了额外 DrawCall 消耗。接收 Pass 则可以与正常 Pass 一块处理对颜色进行叠加。</p><p>在 Standard Shader 中，开启实时阴影的情况下一个普通的 Sphere 对象甚至产生了 3 个 DrawCall：</p><p><img data-src="/blogimages/2022/2022-12-06/m_919aead0b6648620444cd393ee1c38f0_r.png" alt="" /></p><p>1 个渲染深度<br /> 1 个渲染物体到光源向量<br /> 1 个渲染物体本身</p><p>理论上加上阴影的话，不是只会增加一个 ShadowCaster DrawCall 吗？为什么多渲染了 2 次？渲染深度是为了什么？</p><p>从上面 FrameDebugger 截图的信息中显示，额外的一个深度渲染依然是由 ShadowCaster 发起的，但是为什么呢？</p><p>其实，这是因为在 PC 平台的原因。</p><p>Unity Standard Shader 会判断对应平台，如果是手机平台，才会使用上述传统的 Shadowcaster 方式绘制阴影，而 PC 平台则会另外使用 『屏幕空间阴影』，因此才多额外一个 DrawCall 渲染物体的深度。</p><p>屏幕空间阴影原本应该是延迟渲染路径采用的方法，Unity 在默认渲染管线下，对支持的平台的前向渲染路径也采用相同方式，可以减少 OverDraw 但是会增加 DrawCall。</p><p>切换至 Adnroid 平台，再利用 FrameDebugger 查看：</p><p><img data-src="/blogimages/2022/2022-12-06/m_0ac8f9f53256d5e74b1ff0d17f2b99cc_r.png" alt="" /></p><p>1 个渲染物体到光源向量<br /> 1 个渲染物体本身</p><p>对上号了。</p><h2 id="烘焙"><a class="anchor" href="#烘焙">#</a> 烘焙</h2><p>烘焙只用于静态物体，可以让静态物体单独采样烘焙好的贴图，而非实时光源，减少计算。</p><p>烘焙后的效果 —— 离线渲染自然也会比实时渲染效果好。</p><p>Light Probe Group：根据官方文档及经过测试表明，该组件使得已烘焙的间接光照效果可以施加于动态物体上，更多是对内存消耗。（烘焙静态物体不使用，查看静态对象面板，烘焙后的 Light Probe 选项是置灰 Off 无法修改的）</p><p>Reflection Probe：对动态、静态对象都有影响，配合 Light Probe Group 效果更好。</p><p>对于烘焙的三个模式，官方文档解释有：</p><blockquote><ul><li>Baked Indirect 模式将实时直接光照与烘焙间接光照结合在一起，提供实时阴影。这种光照模式提供逼真的光照和合理的阴影保真度，适用于中档硬件。</li></ul></blockquote><ul><li>Shadowmask 模式将实时直接光照与烘焙间接光照结合在一起，为远处的游戏对象启用烘焙阴影，并将烘焙阴影与实时阴影自动融合。这是最真实但也是最耗费资源的光照模式。您可以使用质量设置 (Quality Settings) 来配置其性能和视觉保真度。这种光照模式适用于高端或中档硬件。</li><li>Subtractive 模式提供烘焙的直射和间接光照，仅针对一个方向光渲染直接实时阴影。这种光照模式不能提供特别逼真的光照效果，适合于风格化的艺术效果或低端硬件。</li></ul><h3 id="mixlighting"><a class="anchor" href="#mixlighting">#</a> MixLighting</h3><ul><li>！混合灯光会大量 (相比 Baked 模式) 增加 Batches、顶点数量，它对静态物体也会产生 Baches ，如果不是一定需求阴影最好还是用纯 Baked</li></ul><p>测试场景为：</p><ul><li>一个平行光 + 一个点光源</li><li>10 个静态物体，2 个动态物体</li></ul><h4 id="backed-indirect"><a class="anchor" href="#backed-indirect">#</a> Backed Indirect</h4><ul><li>Backed Indirect：只烘焙间接光，灯光效果、阴影必须设置为 Backed 才会真的被烘焙，否则 (Mixed) 静态物体都会直接走实时计算。（消耗很高）</li></ul><blockquote><p>Shadow Distance：范围内的值使用实时阴影，超过此距离则不再渲染阴影。<br /><font color=red>注：Mixed 点光源在 Shadow Distance 内对所有物体产生阴影，因为是实时的。</font></p></blockquote><p>如图所示，烘焙后开启灯光 + 隐藏灯光：<br /><img data-src="/blogimages/2022/2022-12-06/m_8f9e6b0a707f474dc2616ee926fad357_r.png" alt="" /></p><h4 id="subtractive"><a class="anchor" href="#subtractive">#</a> Subtractive</h4><ul><li>Subtractive：Mixed 设置的灯光直接光和间接光都会被烘焙，被烘焙的静态物体在运行时不占用实时光计算，动态物体则单独走实时计算。</li></ul><blockquote><p>Shadow Distance：范围内的值动态对象使用实时阴影，超过此距离则不再渲染阴影。<br /><font color=red>注：Mixed 点光源对动态物体不产生阴影。</font></p></blockquote><p>如图所示，烘焙后开启灯光 + 隐藏灯光：<br /><img data-src="/blogimages/2022/2022-12-06/m_b350fc47c8c1ea6da34cb43acd1634cb_r.png" alt="" /><br />从上图可以看出，点光源并未对物体形成阴影，只有平行光的阴影。</p><h4 id="shadowmask"><a class="anchor" href="#shadowmask">#</a> Shadowmask</h4><ul><li>Shadowmask：根据设置决定显示，这个选项可以配合 Setting-&gt;Quality-&gt;Shadows 使用</li></ul><blockquote><p>Shadow Distance：范围内的值使用实时阴影，超过此距离则使用烘焙阴影。<br />ShadowMask：静态物体使用烘焙阴影。<br />Shadow Cascades：阴影级联数量，官方文档解释说级联数量越多质量越高，性能消耗越大。但是经过测试，开启后阴影变硬，性能消耗是感觉到了，质量上反而觉得更难看。<br /><font color=red>注：Mixed 点光源在 Shadow Distance 内对所有物体产生阴影，因为是实时的。</font></p></blockquote><ul><li>Mixed 设置的灯光必须存在场景中才能生效，烘焙后隐藏 Light 就 (对静态物体也) 无效了。具体表现取决于 Quality Shadowmask Mode 设置。<br />两种设置模式中：<ul><li>Shadow Distance：在范围内静态物体也是实时光，范围外烘焙光，<s>当 Distance 设置为 0 时与 Shadowmask 消耗一致</s> (静态物体均使用烘焙阴影)—— 比 Shadowmask 消耗还低，因为... 没有动态物体的实时阴影了，但是这样不如直接用 Subtractive 消耗更低。</li><li>Shadowmask：静态物体始终使用烘焙阴影，动态物体使用实时阴影。</li></ul></li></ul><p>烘焙后相比 Backed Indirect 多了一张 Shadowmask 贴图，实际测试近距离下同一个场景效果及 Batches 与 Backed Indirect 基本一致（因为 Shadow Distance 都是实时阴影）</p><p>如图所示，烘焙后 ShadowDistance+ShadowMask 模式：</p><p><img data-src="/blogimages/2022/2022-12-06/m_b20be5022100021ace39a857015451aa_r.png" alt="" /></p><h3 id="shader-使用-lightmap"><a class="anchor" href="#shader-使用-lightmap">#</a> Shader 使用 Lightmap</h3><p>大致上分为四步：</p><ul><li>顶点着色器接收参数结构 定义 float2 texcoord1 : TEXCOORD1 以接收 Unity 传入的光照 uv</li><li>顶点着色器为 uv 做一次转换： v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw</li><li>片段着色器调用内置函数 DecodeLightmap 对 unity_Lightmap 采样颜色</li><li>与物体像素本来颜色叠加混合</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p><s>目前测试下来，唯一的问题就是在 Forward RenderPath 下，烘焙光照中，仅平行光能被烘焙为静态对象的阴影，点光源只能用实时阴影。<br />表现情况是：点光源设置为 Baked 模式，仅光源颜色信息被烘焙至光照贴图，阴影却没有。</s></p><p>上述结论为错误操作导致！<br />Point Light 和 Directional Light 均有 『Baked Shadow Radius』和『Baked Shadow Angle』，合适的值可以让阴影被烘焙得更加柔和，但两者参数范围是完全是不同的，若光源设置过大，会导致直接丢失阴影 —— 可能在测试过程中不小心动到，导致了上述错误的结论。</p><p>经过测试，可以确定 Subtractive 消耗最低，Backed Indirect 和 Shadowmask 消耗都不少，按照消耗多少可以排序为：</p><ul><li>Shadowmask(Shadow Distance Mode)-&gt;Backed Indirect-&gt;Shadowmask(Shadowmask Mode)-&gt;Subtractive</li></ul><p>对比：</p><ul><li>Shadowmask：<font color=red>烘焙间接光照、最多四个光源的 shadowmask</font>(超出会直接将阴影及光照烘焙至光照贴图上，降级与 Subtractive 差不多)，所有对象均为实时直接光照。(比另外两种多了一张 Shadowmask 贴图)，动态与静态阴影可以存在融合。<ul><li>Shadow Distance Mode：范围内静态、动态均为实时直接光照、阴影，范围外静态对象为烘焙阴影。</li><li>Shadowmask Mode：静态对象使用 实时直接光照、烘焙间接光照、阴影、范围内动态对象为实时阴影 (同上比另外两种多了一张 Shadowmask 贴图，最多可存 4 个灯光的 shadowmask，可与动态物体阴影混合)。</li></ul></li><li>Backed Indirect：<font color=red>仅烘焙间接光</font>，范围内静态、动态均为实时直接光照、阴影，范围外无阴影。</li><li>Subtractive：<font color=red>静态对象的所有直接光照、间接光照、阴影均烘焙</font>、范围内动态对象为实时阴影，范围外无阴影。Mixed 点光源对动态物体无阴影 (这次应该没错了吧？)。静态物体无高光效果 (使用 Reflection Probe 会有改善)。</li></ul><p>其它重要设置：</p><ul><li>Shadow Distance：范围内采用实时阴影，实际情况合理设置，在 Shadow Resolution 阴影分辨率不变的情况下，Shadow Distance 越大，显示质量反而可能降低。</li><li>Shadow Cascades：只对方向光有效，可以将阴影的渲染划分成对应的几块区域，提升近处阴影的分辨率占用，减轻近处阴影的锯齿感，当然也会产生更多性能消耗。经过实测开启后阴影会变得更加清晰 (更硬)。</li><li>Shadow Projection：默认为 Stable Fit，整体阴影分辨率不变的情况下 Close Fit 可以进一步的提高近处物件的阴影分辨率，同时也有更高的开销</li><li>光照贴图 UV 可以在模型设置上启用 Generate Lightmap UVs 自动生成。</li><li>Direction Mode：设置为 Direction 会多烘焙一张光源方向贴图，可用于模型法线计算。</li><li>Lightmap Resolution (像素 / 单位)：光照图占用像素的全局值，设置越大越精细烘焙越久，当占用量超出 MaxLightMapSize 就会导致烘焙出多份光照贴图的情况。</li><li>Scale in Lightmap (物体对象上的设置)：影响烘焙此物体在光照图上占用的精度。</li></ul><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuLzIwMjEuMy9NYW51YWwvTGlnaHRpbmdHaVV2cy5odG1s">LightingGiUvs</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuLzIwMjEuMy9Eb2N1bWVudGF0aW9uL01hbnVhbC9saWdodGluZy1tb2RlLmh0bWw=">lighting-mode</span></li><li><span class="exturl" data-url="aHR0cDovL21hLXlpZG9uZy5jb20vMjAxNy8wOS8wMi9taXhlZC1saWdodGluZy1saWdodG1hcC1zaGFkZXItaW4tdW5pdHkv">mixed-lighting-lightmap-shader-in-unity</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3plbmdqdW5qaWU1OS9hcnRpY2xlL2RldGFpbHMvMTExMzU2NjM2">Unity 接收阴影</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80Nzg0MzE2NzE=">Unity 中的混合光照</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODg0MTk1Mg==">Unity 移动平台下的光照烘焙及优化</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4OTYyMTY2Ng==">Unity 为什么使用 screen space shadow</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;前几天跟同事讨论 Unity Lightmap ，在 Shader (自定义) 中是怎么取的，然后我说 Unity 在 Shader 中直接会给数据，调用 Unit</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="Shader" scheme="https://cwhisme.github.io/categories/Unity3D/Shader/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="图形学" scheme="https://cwhisme.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="Shader" scheme="https://cwhisme.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>打包 AssetBundle 的基础规则整理</title>
    <link href="https://cwhisme.github.io/2022/11/23/%E6%89%93%E5%8C%85AssetBundle%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86/"/>
    <id>https://cwhisme.github.io/2022/11/23/%E6%89%93%E5%8C%85AssetBundle%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86/</id>
    <published>2022-11-23T10:12:11.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前其实有写一篇 『<a href="">AssetBundle 的实际测试与总结</a>』的文章，不过现在看了下，感觉漏了一些，而且不够完善。</p><p>但是感觉改又不好改了，于是新建了一篇文章，重新整理一下。</p><p>主要使用工具有：</p><ul><li>Unity3D 2018.4.36f1</li><li>Unity3D 2021.3.6f1</li><li>Microsoft Visual Studio 2022</li><li>Unity 工具：AssetBundles-Browser-1.7.0</li></ul><h2 id="功能简介"><a class="anchor" href="#功能简介">#</a> 功能简介</h2><p>已知目前 Unity 主要提供了两种方式打 AssetBundle 包</p><ul><li>一种是全打，根据整个项目资源的 AssetBundleName 标记自动生成，该过程全自动化，只有设置 AssetBundleName 这个步骤可以人为控制</li><li>另一种是单打，根据传入的资源路径、指定的 AssetBundleName 单独生成指定资源的 AssetBundle 包</li></ul><p>均为一个接口的两个重载：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 全打接口，根据项目已设置 AssetBundleName 的资源</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 传入参数为 整个输出路径、打包选项及打包平台</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AssetBundleManifest</span> <span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> outputPath<span class="token punctuation">,</span> <span class="token class-name">BuildAssetBundleOptions</span> assetBundleOptions<span class="token punctuation">,</span> <span class="token class-name">BuildTarget</span> targetPlatform<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 单打接口，可以传入一个『需要打包』的资源列表、打包选项及打包平台</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AssetBundleManifest</span> <span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> outputPath<span class="token punctuation">,</span> <span class="token class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> builds<span class="token punctuation">,</span> <span class="token class-name">BuildAssetBundleOptions</span> assetBundleOptions<span class="token punctuation">,</span> <span class="token class-name">BuildTarget</span> targetPlatform<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="公共参数"><a class="anchor" href="#公共参数">#</a> 公共参数</h3><p>其中公共参数为：</p><ul><li>BuildAssetBundleOptions</li><li>BuildTarget</li></ul><h4 id="buildtarget"><a class="anchor" href="#buildtarget">#</a> BuildTarget</h4><p>BuildTarget 就像名字一样很简单，主要是具体为哪个平台打的资源包，最简单的方式是直接使用  <code>EditorUserBuildSettings.activeBuildTarget</code>  即可。</p><p>或者利用预定义：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> UNITY_STANDALONE_WIN</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//BuildTarget.StandaloneWindows64</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">elif</span> UNITY_IPHONE</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//BuildTarget.iOS</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">elif</span> UNITY_ANDROID</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//BuildTarget.Android</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>单独分平台判断也可以 (用预定义的话，有必要的情况下这里还可以做些其它操作)。</p><h4 id="buildassetbundleoptions"><a class="anchor" href="#buildassetbundleoptions">#</a> BuildAssetBundleOptions</h4><p>默认情况下 AssetBundle 压缩格式为 LZMA，这个选项可以额外选择设置为 不压缩 或者 LZ4 压缩格式：</p><pre><code>BuildAssetBundleOptions.UncompressedAssetBundleBuildAssetBundleOptions.ChunkBasedCompression</code></pre><p>可能有人会好奇两个同时传入会如何 (比如说我)?</p><p>试了下编辑器会直接报错，提示：</p><blockquote><p><font color=red>Cannot use options UncompressedAssetBundle and ChunkBasedCompression at the same time.</font></p></blockquote><p>其它比较重要的还有：</p><h5 id="1buildassetbundleoptionsdeterministicassetbundle"><a class="anchor" href="#1buildassetbundleoptionsdeterministicassetbundle">#</a> 1）BuildAssetBundleOptions.DeterministicAssetBundle</h5><p><s>这个参数会保证同样的资源每次打出来的 AssetBundle 包二进制一致。</s></p><p>~~ 我的测试方式是：不传入该参数，先全打一次资源备份好，然后删除项目的 Library 再全打一次，就发现新的资源大小虽然跟原本的一样，但是内部二进制就有很大的不同了：<br />~~<br /><s>(以下错误尝试及结论内容已删除)</s></p><p>经过反复尝试，多次试验后得出结果：DeterministicAssetBundle 似乎并非这个作用。<br />之所以第一次删除 Library 后打包得出结果不一致，主要是因为 Library 生成的缓存不一致。在试验中，除了第一次删除试验，之后每次重新删除 Library ，再重新打开，后续工程打出来的 AssetBundle 包对比文件均一致了。</p><p>尝试在一个工程同时打出带 DeterministicAssetBundle 及不带该选项的资源包，结果最终生成的二进制 AssetBundle 资源包同样完全一致：</p><p><img data-src="/blogimages/2022/2022-11-23/m_bc96359133bb56dd0d1223b6639bf8d5_r.png" alt="" /></p><p>只有在单打某个资源时，该选项打出的资源包才会产生差异。</p><p>说明这个选项，至少在同一个环境下全打资源是不会对 AssetBundle 资源包产生任何影响的。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkQXNzZXRCdW5kbGVPcHRpb25zLkRldGVybWluaXN0aWNBc3NldEJ1bmRsZS5odG1s">官方文档说明</span>：</p><blockquote><p>重新构建资源包时，资源包中对象的 ID 将在完成重新构建后 保持不变。<br />从 DeterministicAssetBundle 中加载内容也比一般资源包要慢。</p></blockquote><p>那么这个选项究竟是起什么作用呢？有坏处，却没说明白好处。</p><p>官方的说明文档信息太少了，反复斟酌之后，偶然看到了说明的最后一行文字：</p><blockquote><p>注意：此功能会始终启用。</p></blockquote><p>...... 原来如此？难怪传入不传入，都没有影响。</p><p>后来又经过多方查找后，还看到有说找 Unity 官方确认，确定 Unity5.X 以后的确是默认加入的选项了：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbnN3ZXIudXdhNGQuY29tL3F1ZXN0aW9uLzVhN2E4YjIzODQ3ODAyMjU4YTA2NTAzOA==">https://answer.uwa4d.com/question/5a7a8b23847802258a065038</span></p></blockquote><p>然后后续继续查找资料，在 Unity 官方论坛 <a href="https://forum.unity.com/threads/is-the-deterministic-asset-bundle-option-obsolete.455510/">Is the deterministic asset bundle option obsolete?<br /></a> 帖子也提到了同样的困惑，Unity 官方人员回答说该选项已经无效：</p><blockquote><p>It's a bit of a mess, but yes, it's enabled permanently - the option has no effect.</p></blockquote><p>但是为什么单打时，这个选项针对同一个资源，又会产生影响了？</p><p>测试单打资源显示：</p><pre><code>BuildAssetBundleOptions.None: 54.7 KB (56,036 字节)BuildAssetBundleOptions.DeterministicAssetBundle：54.7 KB (56,039 字节)</code></pre><p>传入 DeterministicAssetBundle 选项时增加了 3 个字节大小，那么是否可以怀疑，单打时依然会有影响，官方说的『始终启用』仅针对全打资源的情况？</p><p>毕竟单打时的引用关系处理，跟全打也是有差异的。</p><p>所以这里可以总结为：该选项主要用于生成确定性 ID 以处理重新打包资源时依赖、引用关系，确保增量打包时没有真实修改的资源不会被重打。目前 Unity 全打接口已默认包含该项，且无论是否传入均不影响，单打资源时才会有影响且导致资源产生差异。</p><h5 id="2buildassetbundleoptionsdisablewritetypetree"><a class="anchor" href="#2buildassetbundleoptionsdisablewritetypetree">#</a> 2）BuildAssetBundleOptions.DisableWriteTypeTree</h5><p>禁用写入类型树。</p><p>根据相关介绍，这个为了给 Unity 跨版本之间做兼容性用的，在真机包出包版本与热更资源都是由一个版本出包情况下，这个选项可以考虑传入以优化性能。</p><p>禁用后可以降低包体和内存并提高加载效率，但是可能会造成 Unity 版本的兼容问题。</p><p>原理是根据序列化的字段进行反序列化，例如我们资源 meta 版本都有 serializedVersion ，以区分各个版本序列化选项情况，不同版本每个选项可能并不一致。</p><p>开启写入类型树时，Unity 在打 AssetBundle 时会先把数据内容的树状结构先写入一遍，然后再写入对应值，这样在加载 AssetBundle 时，先解析出字段的树状结构，然后与真机包包体的解析结构进对比，再解析实际数据值，处理缺失或多余字段，避免反序列化出错 (错位)。</p><p>如果不写入，那就是直接根据顺序去反序列化了，换了 Unity 版本字段可能就会反序列化错位，导致出现问题。</p><p>为了确定上述说法，可以进行一个简单的测试。</p><p>我用 Unity2018.4.36f1 打了两个 Cube.prefab AssetBundle 资源包，分为默认启用以及禁用，压缩模式为 不压缩：</p><p><img data-src="/blogimages/2022/2022-11-23/m_ce296dced15e16733103cfb044033bab_r.png" alt="" /></p><p>然后在 Unity2021.3.6f1 中进行加载测试：</p><p><img data-src="/blogimages/2022/2022-11-23/m_334251ea9573f4af016c1fdf351a5600_r.png" alt="" /></p><p>默认打包模式是可以直接读取的 (虽然按照名字加载失败了)，确实加载到了对应资源。<br />场景中也可以利用  <code>GameObject.Instantiate(x[0] as GameObject);</code>  正确实例化出来。</p><p>而换成加载 『cube2018_disablewritetypetree』则直接报错，提示：</p><blockquote><p>The AssetBundle 'Assets\MyBundles\cube2018_disablewritetypetree' could not be loaded because it contains run-time classes of incompatible version. Rebuild the AssetBundle to fix this error.</p></blockquote><p>对于上述测试，利用 AssetBundles-Browser 也可以直接看出问题，默认的可以预览 Cube 各项属性，DisableWriteTypeTree 的资源版本则报同样错误。</p><p>如图所示：</p><p><img data-src="/blogimages/2022/2022-11-23/m_d2487c01c62a4a665b66a3d1deab67a2_r.png" alt="" /></p><p>当然，这个兼容性也有代价，首先每个 AssetBundle 都得包含额外的 TypeTree 信息，加载 AssetBundle 资源时会先构建这个 TypeTree 结构，然后再解析字段，增加部分 CPU 和 内存消耗。</p><h5 id="3buildassetbundleoptionsforcerebuildassetbundle"><a class="anchor" href="#3buildassetbundleoptionsforcerebuildassetbundle">#</a> 3）BuildAssetBundleOptions.ForceRebuildAssetBundle</h5><p>默认为增量构建，基于上一次的打包结果，对发生变化的资源重新打包，若传入这个参数，会完全重新打一次。<br />经过测试，增量构建的关键点在于 Unity 为每个 AssetBundle 资源同时生成的 .manifest 文件。<br /><font color=red>注 1：删除文件的 .manifest 也会产生同样的效果。<br />注 2：我们项目的 AssetBundle 关系由自己维护，尝试打完了之后删除 .manifest 节省空间，发现会被重新全打一次。<br />注 3：关系总表的 .manifest 对其它资源不产生影响，只删除某个资源的 .manifest 就会导致该资源直接被重打。</font></p><h5 id="4disableloadassetbyfilename-disableloadassetbyfilenamewithextension"><a class="anchor" href="#4disableloadassetbyfilename-disableloadassetbyfilenamewithextension">#</a> 4）DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension</h5><p>禁用使用 名字加载，这两个选项只影响内置的 AssetBundle.LoadAsset 方法。</p><p>如通过 AssetBundle.LoadAllAssets 加载后根据名字判断依然可行。</p><p>文件名 + 扩展名会在加载成功后生成，取决于项目的 AssetBundle 资源具体加载方式，可以传入减少一点点内存占用。例如通过全路径或者 AssetBundleRequest allAssets 自己判断方式。</p><p>例如，我们通常通过 AssetBundle.LoadAllAssets (LoadAllAssetsAsync) 加载全部资源，然后管理，AssetBundle 自带的 LoadAsset 接口是不会使用的，此时就可以禁用名字加载。</p><p>测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">string</span></span> pathDir <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">AssetBundle</span> assetBundle <span class="token operator">=</span> AssetBundle<span class="token punctuation">.</span><span class="token function">LoadFromFile</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">,</span> Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> x <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAllAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Object</span> o <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Cube"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Object</span> o1 <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Cube.prefab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Object</span> o2 <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Assets/Cube.prefab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OK2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>表现如下：</p><p><img data-src="/blogimages/2022/2022-11-23/m_5b4b541cc358119d2bdfde8bf1e09a6d_r.png" alt="" /></p><p>—————————————————————————————————————————</p><p>最后，简单测试一下各个不同选项打出来资源大小：</p><h5 id="图片"><a class="anchor" href="#图片">#</a> 图片</h5><pre><code>LZMA：tex_default:272 KB (279,003 字节)tex_disablename：272 KB (278,994 字节)tex_disablewritetypetree：271 KB (278,163 字节)tex_disablewritetypetree_and_disablename：271 KB (278,147 字节)Uncompress:tex_default：466 KB (477,968 字节)tex_disablename：466 KB (477,984 字节)tex_disablewritetypetree：466 KB (477,904 字节)tex_disablewritetypetree_and_disablename：466 KB (477,936 字节)LZ4:tex_default：302 KB (309,643 字节)tex_disablename：302 KB (309,653 字节)tex_disablewritetypetree：300 KB (308,172 字节)tex_disablewritetypetree_and_disablename：300 KB (308,183 字节)</code></pre><h5 id="prefab"><a class="anchor" href="#prefab">#</a> Prefab</h5><pre><code>LZMA：tex_default：54.7 KB (56,036 字节)tex_disablename：54.7 KB (56,040 字节)tex_disablewritetypetree：47.6 KB (48,775 字节)tex_disablewritetypetree_and_disablename：47.6 KB (48,789 字节)Uncompress:tex_default：194 KB (198,880 字节)tex_disablename：194 KB (198,896 字节)tex_disablewritetypetree：116 KB (119,168 字节)tex_disablewritetypetree_and_disablename：116 KB (119,200 字节)LZ4:tex_default：80.2 KB (82,141 字节)tex_disablename：80.2 KB (82,148 字节)tex_disablewritetypetree：62.1 KB (63,668 字节)tex_disablewritetypetree_and_disablename：62.1 KB (63,678 字节)</code></pre><p>可以发现实际测试下来，在资源包大小上 DisableWriteTypeTree 影响更大，特别是 Prefab 资源，不压缩减少了 60% 左右、LZ4 模式减少了 25% 左右大小，LZMA 也有 13%。<br />虽然对纯图片资源这种 (其它音效之类一样) 减少不会很明显 —— 差不多就 1KB 的样子，毕竟图片资源的 meta 项本身也不会太多。</p><p>相对来说禁止名字加载对资源包的大小基本就没什么影响了，顶多几个字节的差异 (甚至是增加大小)，不过据说 DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension<br /> 更多是减少运行时内存 —— 这一点在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1NjcmlwdFJlZmVyZW5jZS9CdWlsZEFzc2V0QnVuZGxlT3B0aW9ucy5EaXNhYmxlTG9hZEFzc2V0QnlGaWxlTmFtZS5odG1s">官方文档</span> 也有明确说明，更详细的内存方面的对比，后续我会再进行详细测试。</p><h3 id="全打接口"><a class="anchor" href="#全打接口">#</a> 全打接口</h3><p>关于全打接口，大概可以总结如下基本规则：</p><ol><li><strong>资源与其引用资源都指定了不同的 AssetBunldeName ，会分别分离单打</strong></li><li><strong>没有指定 AssetBunldeName，那么会跟引用它的对象打一个包</strong></li><li><strong>没有指定 AssetBunldeName，存在多个对它的引用就会有多个副本，造成内存冗余</strong></li></ol><p>对于全打接口的工作原理，使用 AssetBundles-Browser 也可以比较清晰看出其关系。</p><p>设置对应的 AseetbundleName 之后，就会展示在 AssetBundles-Browser 中。</p><ol><li>Prefab 和 图片设置不同 AseetbundleName：<br /><img data-src="/blogimages/2022/2022-11-23/m_2bd4afc7e2d136def3d3d0b3c35716bf_r.png" alt="" /></li><li>只设置 Prefab AseetbundleName:<br /><img data-src="/blogimages/2022/2022-11-23/m_06a422a91bf2e0782625afe388a5f7e2_r.png" alt="" /></li><li>不指定 AssetbunldeName，而又有多个对它产生引用的对象，AssetBundles-Browser 都会直接进行提示：<br /><img data-src="/blogimages/2022/2022-11-23/m_26177c9cb01b7f3e654c5b61cfd11c6b_r.png" alt="" /><br />若忽略提示，打包出来结果如下：<br /><img data-src="/blogimages/2022/2022-11-23/m_4b5774781fe0214bc8fa42a0fdae1c72_r.png" alt="" /><br />两个 Assetbunlde 包就分别包含了两份同样的图片资源。</li></ol><p>调用全打接口代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>对于上述设置一，会生成两个分别包含 RawImage (test1) 和 Tex (tex) 的 AssetBundle 资源包</li><li>对于上述设置二，会生成一个同时包含 RawImage 和 Tex 的 AssetBundle 资源包，名字为 『test1』</li><li>对于上述设置三，会生成两个同时包含 Prefab 和 图片的 AssetBundle 资源包，名字为 『test1』、『test2』</li></ul><p>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BlcmZhcmUvQXNzZXRTdHVkaW8=">AssetStudio</span> 进行观察打出的 AssetBundle 资源包，可以验证与上述关系一致。</p><h3 id="单打接口"><a class="anchor" href="#单打接口">#</a> 单打接口</h3><p>单打接口实际规则，跟全打有一点差异。</p><p>总结规则如下：</p><ol><li><strong>若只有主资源存在列表，无论引用资源是否有设置其它 AssetBundleName，其引用资源会自动与主资源打成一个包</strong></li><li><strong>若将主资源及其引用资源都传入，且引用资源有自己的 AssetBundleName ，那么会分别根据各自的 AssetBundleName 单打</strong></li><li><strong><s>若将主资源及其引用资源都传入，但引用资源没有设置自己的 AssetBundleName ，那么引用资源都打入主资源一个包里。</s>(注：此处应当是因为触发了第一项规则)</strong></li></ol><p>与『全打资源』最大的区别，大概要数第一项：无论被引用资源是否设置自己的 AssetBundleName，只要这次单打没有传入引用资源，那么就会被打入主资源包里。</p><p>单打测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelect(LZMA)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectLZMA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">PackSelect</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelect</span><span class="token punctuation">(</span><span class="token class-name">BuildAssetBundleOptions</span> opt<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> extName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">Object</span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span>activeObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span> <span class="token punctuation">?</span> importer<span class="token punctuation">.</span>assetBundleName <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> extName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> build <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上述『PackSelect』代码及上述资源为例，为 『RaweImage』『RaweImage2』及『Tex』分别设置不同的 AssetBunldeName，调用 PackSelect 传入各自的 AssetBunldeName 及资源路径分别进行单打操作，结果：<br /><img data-src="/blogimages/2022/2022-11-23/m_24dd53cc74994ba2914dce5568cb0a08_r.png" alt="" /><br />主资源及其引用图片被打进了一个包里。</p><p>对比调用 『PackALL』 全打资源结果：<br /><img data-src="/blogimages/2022/2022-11-23/m_a445e82bab3e8e6d2ae40826775a5bd0_r.png" alt="" /><br />其中 test1、test2 均引用了 tex 资源，从大小上看即可表明单打接口资源是被分别单打的了。</p><p>—————————————————————————————————————————</p><p>若单打资源，同时传入了主资源和引用资源呢？</p><p>稍微修改一下『PackSelect』代码，使其可以单打所有『当前选中』的资源：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelectALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectALL</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFiltered</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Assets<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> buildArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">[</span>o<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buildArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> importer<span class="token punctuation">.</span>assetPath <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        buildArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buildArray<span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>刚开始研究这个单打接口，或许会写出这种单打当前选中所有资源的代码，然后总结出错误的结论 (比如说我)：<s>若传入两个没有引用关系的资源，但是都为同一个 assetBundleName，单打会报错，只会生成其中一个资源的 assetBundle 包。</s></p><p>但要是深入一点测试、思考一下，就会发现这种写法是有问题的。</p><p>问题在哪儿呢？</p><p>首先尝试上述代码执行，选中两个设置了同一个 assetBundleName 的资源后，调用结果：</p><blockquote><p><font color=red>Trying to add file F:/Study/AssetbundleTest/Assets/MyBundles/tex.manifest to the list of ouptut files in the build report, but a file at that path has already been added.</font></p></blockquote><p>意思是添加的文件重复了，但明显资源名字是不同的，那问题可能就是在 assetBundleName？</p><p>然后往参数那边看，每一个 AssetBundleBuild 中的 assetNames 参数实际上是一个『数组』，也就是一系列的资源路径，所以对于单打接口，每个 AssetBundleBuild 都是独立的，它不会自动去判断传入的总列表中是否有重复的标签，因此需要我们手动去重：把同一个标签，重复的合并在一个结构中。</p><p>修改后代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelectALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectALL</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFiltered</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Assets<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">List<span class="token punctuation">&lt;</span>AssetBundleBuild<span class="token punctuation">></span></span> assetBundleBuilds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>AssetBundleBuild<span class="token punctuation">></span></span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 判断是否存在重复</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        index <span class="token operator">=</span> assetBundleBuilds<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>assetBundleName <span class="token operator">==</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> importer<span class="token punctuation">.</span>assetPath <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            assetBundleBuilds<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// 重复，则添加进去</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            build <span class="token operator">=</span> assetBundleBuilds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> newAssets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>build<span class="token punctuation">.</span>assetNames<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            newAssets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            System<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>assetNames<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newAssets<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> build<span class="token punctuation">.</span>assetNames<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> newAssets<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            assetBundleBuilds<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> assetBundleBuilds<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>再次尝试，同一个 AssetBunldeName 没有引用关系的几个资源，顺利被打入同一个 AssetBundle 资源包。</p><h2 id="动画资源"><a class="anchor" href="#动画资源">#</a> 动画资源</h2><p>昨天主程会提到了动画脱壳，简单试一下资源包大小：</p><p><img data-src="/blogimages/2022/2022-11-23/m_0fbdab2ab9986238e383a031a9f9af5e_r.png" alt="" /></p><p>上述分别为：</p><p>anim_off：带 FBX 动画，关闭 Anim.Compression<br />animall：带 FBX 动画，Anim.Compression 为默认的 KeyFramReduction<br />animreopt：不带 FBX 动画，Anim.Compression 为默认的 KeyFramReduction<br />animreduce：不带 FBX 动画，Anim.Compression 为 Optimal</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>调用全打资源接口时：</p><ol><li><strong>资源与其引用资源都指定了不同的 AssetBunldeName ，会分别分离单打</strong></li><li><strong>没有指定 AssetBunldeName，那么会跟引用它的对象打一个包</strong></li><li><strong>没有指定 AssetBunldeName，存在多个对它的引用就会有多个副本，造成内存冗余</strong></li></ol><p>调用单打资源接口时：</p><ol><li><strong>若只有主资源存在列表，无论引用资源是否有设置其它 AssetBundleName，其引用资源会自动与主资源打成一个包</strong></li><li><strong>若将主资源及其引用资源都传入，且引用资源有自己的 AssetBundleName ，那么会分别根据各自的 AssetBundleName 单打</strong></li></ol><p>取决于项目资源加载管理，可采用的优化选项：DisableWriteTypeTree、DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension</p><p>例如，像我们项目通过 AssetBundle.LoadAllAssets (LoadAllAssetsAsync) 加载全部资源，然后管理，AssetBundle 自带的 LoadAsset (Name) 接口是不会使用的，此时就可以禁用名字加载。(正常情况下加载一个资源，一般来说也是使用完整路径的)</p><p>另外，通常出包以及出热更包必然也是同一个 Unity 版本 (应该不可能有 『项目还在线上就去动 release 分支 Unity 版本』的操作吧)，此时可以禁用写入类型树以优化内存及加载。</p><p><font color=red>其它：DeterministicAssetBundle 经测试与多方对比，可以认为全打资源默认始终包含该选项，仅单打资源时该项会对资源产生额外影响。(这大概也是为什么同为『始终启用』的 CollectDependencies 被标记为弃用，但它没有 —— 大概就是因为 DeterministicAssetBundle 对于单打该选项还有效)</font></p><blockquote><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkUGlwZWxpbmUuQnVpbGRBc3NldEJ1bmRsZXMuaHRtbA==">BuildPipeline.BuildAssetBundles</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvTWFudWFsL0Fzc2V0QnVuZGxlcy1CdWlsZGluZy5odG1s">AssetBundles-Building</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIudW5pdHkuY24vcHJvamVjdHMvNjE1NjYyMjNlZGJjMmEwMDIxNTU3MzY0">Asset 的一生</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWJnYW1lL3AvMzk3MzE3Ny5odG1s">Unity AssetBundle 爬坑手记</span></li><li><a href="https://answer.uwa4d.com/question/5a7a8b23847802258a065038">AB 增量打包问题<br /></a></li><li><a href="https://forum.unity.com/threads/is-the-deterministic-asset-bundle-option-obsolete.455510/">Is the deterministic asset bundle option obsolete?<br /></a></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkQXNzZXRCdW5kbGVPcHRpb25zLkRldGVybWluaXN0aWNBc3NldEJ1bmRsZS5odG1s">DeterministicAssetBundle</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1NjcmlwdFJlZmVyZW5jZS9CdWlsZEFzc2V0QnVuZGxlT3B0aW9ucy5EaXNhYmxlTG9hZEFzc2V0QnlGaWxlTmFtZS5odG1s">DisableLoadAssetByFileName</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9hc3NldGJ1bmRsZXMtYW5kLWRlcGVuZGVuY2llcy4zNzc3NjAv">assetbundles-and-dependencies</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前其实有写一篇 『&lt;a href=&quot;&quot;&gt;AssetBundle 的实际测试与总结&lt;/a&gt;』的文章，不过现在看了下，感觉漏了一些，而且不够完善。&lt;/p&gt;
&lt;p&gt;但是</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="AssetBundle" scheme="https://cwhisme.github.io/categories/Unity3D/AssetBundle/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="AssetBundle" scheme="https://cwhisme.github.io/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder 扩容规则研究</title>
    <link href="https://cwhisme.github.io/2022/11/18/StringBuilder%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99%E7%A0%94%E7%A9%B6/"/>
    <id>https://cwhisme.github.io/2022/11/18/StringBuilder%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99%E7%A0%94%E7%A9%B6/</id>
    <published>2022-11-18T09:37:51.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>在上面 <a href="">对项目字符串性能优化方式及测试</a> 文章中，我查看了 StringBuilder 的源码，并总结出了 StringBuilder 的一般及自动扩容规则：</p><p>容量足够的情况下，通过 unsafe 方法进行指针及直接内存操作：</p><ol><li>获取添加的字符串指针</li><li>获取字符数组待添加下标指针</li><li>调用 Buffer.Memcpy 进行内存拷贝进字符数组</li></ol><p>如果后续容量不够，则进行动态扩容，不过动态扩容不是直接扩容字符数组，而是通过单向链表的方式：</p><p><strong>将当前数据全部转移至『上一个』节点，然后自己创建一个新的字符数组进行处理。</strong></p><p>简单来说，就是创建一个新的 StringBuilder，把自己当前所有数据转移过去，自己创建一个新的数组继续继续处理余下的。</p><p>然后就一直有个疑问：如何做到每次扩容是之前的 2 倍大小的？</p><p>然后现在研究半天发现，都知道实现扩容的具体方法是通过单链表，2 倍扩容的原理其实已经是明面上的规则了：是个非常简单的原理，只是思维上一直没考虑到而已，所以作个记录。</p><p>这里前言先不说具体原理，从试验和测试开始，具体的留到文后总结再写吧。</p><h2 id="扩容测试"><a class="anchor" href="#扩容测试">#</a> 扩容测试</h2><p>StringBuilder 默认容量是 16 个字符，如果测试扩容的话，数量太大容易混淆。</p><p>因此我传设置了默认的容量 1，并依次传入 1、2、3、4、5，并打印每个数值 Append 之后容量大小，测试代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其结果为：</p><pre><code>12448</code></pre><p>可以发现，每次扩容容量都是以 2 倍递增，所以为什么呢？</p><p>用反编译工具对 StringBuilder 的源代码看了又看，有点想不明白。</p><p>想不明白就像试一试，直接上调试大法，断点打到 StringBuilder 里边去：</p><p><img data-src="/blogimages/2022/2022-11-18/m_28c3073b4ee0fe17074da5a4471f73b6_r.png" alt="" /></p><p>上述截图显示的是：当前 StringBuilder 容量为 2，且 Append (3) 的情况。</p><p>盯着这个看了下，计算了一下数值与结果，一个个分析下：</p><ul><li>minBlockCharCount 当前为 1</li><li>当前长度 Length 为 2</li><li>扩容长度为 Max (Length,minBlockCharCount)[8000 是翻倍上限，后续翻倍到这数量级后最多扩容 8000，除非传入字符串剩余字符大于 8000]</li><li>即扩容 Max (2,1)</li></ul><p>而 Length 在这里是个属性，点进 Length 去看：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 当前实际存储字符长度</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Length</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">get</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkOffset <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其由 m_ChunkOffset+m_ChunkLength 构成。</p><p>将代码往上一层的  <code>Append(char* value, int valueCount)</code>  方法移动：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 当空间不足走扩容逻辑时</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 当前剩余容量</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> num3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>num3 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 剩余容量大于 0，就先复制一部分填满</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//m_ChunkLength 设置为字符数组满长度</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 至少扩容长度 = 添加字符串长度 - 剩余已添加字符长度</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> num4 <span class="token operator">=</span> valueCount <span class="token operator">-</span> num3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 执行扩容</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ExpandByABlock</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 将剩余字符复制进扩容后的字符数组（以前的已经变成链表的上一个节点了）</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 设置当前 StringBuilder 已使用长度</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength <span class="token operator">=</span> num4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>从这里可以看出，每次扩容之前，前一个数组必然是被填满的，也就是说：</p><ul><li>m_ChunkLength = 上一个节点实际使用字符长度</li><li>m_ChunkOffset 直接可以在扩容方法中看到，为前面所有节点的 m_ChunkLength (通过 += 赋值的)</li></ul><p>由此可以得出结果：在扩容的时候，Length=this.m_ChunkOffset + this.m_ChunkLength = 所有节点的总长度<br /> (注：只有在扩容的时候才是如此，否则 Capacity [this.m_ChunkChars.Length + this.m_ChunkOffset] 才是就算没装满的所有节点的总容量)</p><p>当依照 所有节点的总长度 创建一个新节点的时候，新节点的字符数组长度即为之前所有节点总和。</p><p>这时候统计的就是新的节点加上以前所有节点长度，两者相加：相当于就扩容了两倍！</p><p>例如旧的所有节点相加为 32，扩容的新节点为 32，那么新的总节点容量就是 64..... 以此类推。</p><p>然后就焕然大悟了，原来这么回事啊。</p><h2 id="性能测试"><a class="anchor" href="#性能测试">#</a> 性能测试</h2><p>现在知道扩容为什么是翻倍的了。</p><p>然后在这个过程中，突然想到插入问题，插入与追加显然是不同的方法：比较单链表的模式，每个链表节点都是一个单独数组，想往前面的数组插入值？</p><p>想想这种模式插入就不大好办，看了下 Insert 代码，插入一次就得创建一个 StringBuilder (除非之前的节点有空闲空间，正常情况下不可能)</p><p>而且，不遵守扩容规则：最大为扩容字符串长度，最小为默认的 16 个字符，然后重连链表结构。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//MakeRooms：每次调用插入，都会先创建一个 StringBuilder 占位，然后填充数据，一一处理链表节点</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>m_MaxCapacity<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>m_ChunkPrevious<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果插入的下标正好还处于某一个节点字符数据中间，还需要遍历链表通过 CopyTo 移动数据，所以插入操作是比较耗时的。</p><h3 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h3><p>为此我尝试使用 TestRunner 进行测试，分别测试 追加、插入开始、插入中间、插入结束的性能。</p><p>每个操作分别进行 100000 次，测试代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> TestNum <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppend Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertStart Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertMiddle Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertEnd Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppendNormalParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppendNormalParams Capacity："</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppendFormatParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">"X&#123;0&#125;Y"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppend Capacity："</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p><pre><code>TestAppend (0.026s)---TestAppend Capacity104192TestAppendNormalParams (0.030s)---TestAppendNormalParams Capacity：304192TestAppendFormatParams (0.032s)---TestAppend Capacity：304192TestInsertStart (5.795s)---TestInsertStart Capacity100000TestInsertMiddle (2.852s)---TestInsertMiddle Capacity100000TestInsertEnd (0.069s)---TestInsertEnd Capacity100000</code></pre><p>由于插入操作必须对插入节点后续的节点作额外处理，因此插入越靠前消耗越大，可以看出即使是直接插入最后一个节点，也是比追加字符操作更为耗时的，所以使用 StringBuilder 时，尽量不要采用插入操作。</p><p>另外 AppendFormat 采用了与 string.Format 类似的处理方式：遍历字符串找占位符，因此也会造成多余消耗 (这里因为只有一个占位符，因此与普通 3 次追加差距不大，但消耗确实也多了，占位符越多消耗越大)。</p><h3 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h3><p>之前看源码，插入时通过创建一个新的 StringBuilder 插入链表，且默认最小容量为 16。</p><p>但是现在为什么打印出来的 Capacity 容量，这里插入操作的增加反而最小？难道之前分析错了？</p><p>—————————————————————————————————————————</p><p>于是另外写了一份更简单的插入代码，查看链表插入节点信息：</p><p><img data-src="/blogimages/2022/2022-11-18/m_71f1f5a195aab49f88c42ce132b4910e_r.png" alt="" /></p><p><strong>Capacity=this.m_ChunkChars.Length + this.m_ChunkOffset<br />m_ChunkLength = 上一个节点实际使用字符长度<br /> m_ChunkChars.Length = 字符数组长度<br /> m_ChunkOffset = 之前节点实际使用长度总和</strong></p><p>这里插入起始的这个节点，真实容量 Capacity=16<br /> 但是到了后续节点，由于后边节点只统计实际使用长度，后续节点 Capacity=1 + 当前字符数组长度 ，导致只统计了插入字符串实际长度大小，容量就变回去了。</p><p>所以对于插入的节点，测试打印出来的 Capacity 增加很小是个错觉，每个插入的 StringBuilder 依然还是有占用，至少 16 个空字符数组大小。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>最后发现原因就是这么简单：因为是链表结构，扩容的新节点长度等于以前节点总和，所以同样有了倍增的效果。</p><p>不过插入操作则会打乱倍增规律：例如原本 4 个下一次倍增应该为 8，若此时插入一个字符，下一次则扩容为 10。</p><p>另外 AppendFormat 原理与普通 string.Format 类似：遍历字符串找占位符，因此也会造成多余消耗。</p><p>同时顺便测试了下追加与插入等操作的性能，插入原理是创建一个新的、至少 16 个字符容量的 StringBuilder，性能消耗很大，因此得出尽量不要使用插入操作的结论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在上面 &lt;a href=&quot;&quot;&gt;对项目字符串性能优化方式及测试&lt;/a&gt; 文章中，我查看了 StringBuilder 的源码，并总结出了 StringBuilder </summary>
      
    
    
    
    <category term="理论研究" scheme="https://cwhisme.github.io/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://cwhisme.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单测试手动垃圾回收</title>
    <link href="https://cwhisme.github.io/2022/11/17/%E6%B5%8B%E8%AF%95%E6%89%8B%E5%8A%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>https://cwhisme.github.io/2022/11/17/%E6%B5%8B%E8%AF%95%E6%89%8B%E5%8A%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2022-11-17T08:28:06.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>这两天又复习了下垃圾回收机制，在看到 析构函数 的时候，突然想到：析构函数是在真正垃圾回收时才会执行的，那么是否可以用这个来测试一个对象，什么情况下可以立即被垃圾回收？或者说变成垃圾对象。</p><p>例如，使用完毕后立即赋值为空，它变成垃圾对象了吗？还是其它什么时机才会。</p><p>测试方式为：在不同场景下，调用 GC.Collect ，并查看运行结果：析构函数是否被调用。</p><h2 id="准备"><a class="anchor" href="#准备">#</a> 准备</h2><p>工具：</p><ul><li>VS2022</li><li>.Net6.0</li><li>测试类：</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TestClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Doing！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">~</span><span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"被垃圾被回收了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="测试"><a class="anchor" href="#测试">#</a> 测试</h2><h3 id="1情景一方法内部定义对象使用后赋值为空"><a class="anchor" href="#1情景一方法内部定义对象使用后赋值为空">#</a> 1）情景一：方法内部定义对象使用后赋值为空</h3><p>方法内立即调用 GC.Collect ()</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        test <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用。</p><p>将 GC.Collect () 方法调用移动到 DoTest () 方法的 TestMethod () 调用之后：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><p>将  <code>test = null</code>  去掉，依然执行了析构函数。</p><blockquote><h4 id="结论方法块内的代码使用完毕后无论是否赋值为空都不会立即变成垃圾当方法块结束后才会自动成为垃圾对象能够被垃圾回收处理"><a class="anchor" href="#结论方法块内的代码使用完毕后无论是否赋值为空都不会立即变成垃圾当方法块结束后才会自动成为垃圾对象能够被垃圾回收处理">#</a> 结论：方法块内的代码，使用完毕后无论是否赋值为空，都不会立即变成垃圾，当方法块结束后才会自动成为垃圾对象，能够被垃圾回收处理。</h4></blockquote><h3 id="2情景二全局变量方法内部使用后赋值为空"><a class="anchor" href="#2情景二全局变量方法内部使用后赋值为空">#</a> 2）情景二：全局变量方法内部使用后赋值为空</h3><p>方法内立即调用 GC.Collect ()</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">TestClass</span> _test<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        _test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        _test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        _test <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用。</p><p>将 GC.Collect () 方法调用移动到 DoTest () 方法的 TestMethod () 调用之后：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><blockquote><h4 id="结论全局变量方法内部使用后赋值为空在该方法结束后才会变成垃圾对象"><a class="anchor" href="#结论全局变量方法内部使用后赋值为空在该方法结束后才会变成垃圾对象">#</a> 结论：全局变量方法内部使用后赋值为空，在该方法结束后，才会变成垃圾对象。</h4></blockquote><h3 id="3情景三委托方法中包含对象"><a class="anchor" href="#3情景三委托方法中包含对象">#</a> 3）情景三：委托方法中包含对象</h3><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">Action</span> callback <span class="token operator">=</span> TestMethod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        callback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><p>此处改成：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action</span> callback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>结果一致。</p><blockquote><h4 id="结论委托-匿名方法本身新建的局部变量会按照正常的方法调用规则在调用结束后释放"><a class="anchor" href="#结论委托-匿名方法本身新建的局部变量会按照正常的方法调用规则在调用结束后释放">#</a> 结论：委托、匿名方法本身新建的局部变量，会按照正常的方法调用规则在调用结束后释放。</h4></blockquote><h3 id="4情景四匿名方法中包含对象"><a class="anchor" href="#4情景四匿名方法中包含对象">#</a> 4）情景四：匿名方法中包含对象</h3><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token return-type class-name">Action</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//test.DoSomething();</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用，对象生命周期应该变成 DoTest 的了。</p><p>测试方法如下，在调用 DoTest 方法处再进行 GC.Collect 调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MainClass</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>main<span class="token punctuation">.</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>则执行了析构函数。</p><p>缓存为类的全局变量：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action</span> callback<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        callback <span class="token operator">=</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        callback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>未执行析构函数，除非与上述一样在 DoTest 执行完毕后调用 GC.Collect。</p><blockquote><h4 id="结论匿名方法中引用了局部变量会增加局部变量对象生命周期提升至委托的调用存放级别规则与普通对象一致委托不被置为空变量也会一直存活"><a class="anchor" href="#结论匿名方法中引用了局部变量会增加局部变量对象生命周期提升至委托的调用存放级别规则与普通对象一致委托不被置为空变量也会一直存活">#</a> 结论：匿名方法中引用了局部变量，会增加局部变量对象生命周期，提升至委托的调用 (存放) 级别，规则与普通对象一致 —— 委托不被置为空，变量也会一直存活。</h4></blockquote><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>在方法块内对某个对象赋值为空，不管是全局还是局部变量，该对象并不能立刻成为『垃圾』，至少等该方法块执行完毕后，才可能能够被回收。</p><p>若存在匿名方法使用了局部变量，其生存周期与委托绑定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;这两天又复习了下垃圾回收机制，在看到 析构函数 的时候，突然想到：析构函数是在真正垃圾回收时才会执行的，那么是否可以用这个来测试一个对象，什么情况下可以立即被垃圾回</summary>
      
    
    
    
    <category term="理论研究" scheme="https://cwhisme.github.io/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://cwhisme.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>音效资源设置测试与总结</title>
    <link href="https://cwhisme.github.io/2022/11/08/%E9%9F%B3%E6%95%88%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>https://cwhisme.github.io/2022/11/08/%E9%9F%B3%E6%95%88%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-08T09:25:53.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a class="anchor" href="#0x01-前言">#</a> 0x01 前言</h2><p>之前虽然有用过，但是并没有对其做个人的整理与总结，只大概知道哪个选项会造成什么情况，此处进行一次详尽的实际测试并总结。</p><h2 id="0x02-工具"><a class="anchor" href="#0x02-工具">#</a> 0x02 工具</h2><ul><li>Unity2021.3.6f1</li><li>UnityProfiler</li><li>音效：<img data-src="/blogimages/2022/2022-11-08/m_2c999f422afd7de75758f0b6ae7a97c5_r.png" alt="" /></li></ul><h2 id="0x03-设置选项"><a class="anchor" href="#0x03-设置选项">#</a> 0x03 设置选项</h2><h3 id="1-loadtype"><a class="anchor" href="#1-loadtype">#</a> 1. LoadType</h3><p>分为三个选项，这个选择比较重要：直接决定音效在内存中的大小。</p><h4 id="1-加载即解压decompress-on-load"><a class="anchor" href="#1-加载即解压decompress-on-load">#</a> 1). 加载即解压 (Decompress On Load)</h4><p>性能最好，不过会占用更多内存。</p><p>在内存中的大小至少是选择 PCM 压缩格式在 ImportedSize 的预览大小 —— 因为在选择 Vorbis 后，再选择解压到内存会多一些。</p><p>分别查看设置对应压缩格式后，Imported Size 以及利用 Profiler 查看运行时内存大小。<br />对比如下：</p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.6KB (+3.6KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：310.1KB (+4KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：13.9KB<br /> 运行时内存：343.2KB (+37.2KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：16.6KB<br /> 运行时内存：345.7KB (+39.7KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：22.9KB<br /> 运行时内存：348.1KB (+42KB)</li></ul><p>采样率设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：<br />Imported Size：153.1KB<br /> 运行时内存：156.7KB (+3.6KB)</li><li>ADPCM：<br />Imported Size：43.1KB<br /> 运行时内存：157.1KB (+4KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：7.6KB<br /> 运行时内存：192.9KB (+40KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：9.5KB<br /> 运行时内存：192.9KB (+40KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：12KB<br /> 运行时内存：192.9KB (+40KB)</li></ul><p>Decompress On Load 模式下，在内存中的音效大小与 PCM 的 ImportedSize 显示的大小差不多，其中 PCM 和 ADPCM 在这个基础上多了几 KB，可能是其它数据。</p><p>而当 Vorbis 压缩格式采用 Decompress On Load 则会导致更多的额外内存消耗，平均 40KB 左右。<br /><s>且会随着质量设置越高而增加。</s>，见下方『注 1』，推测为音效源文件 44100Hz 有不一致的地方，手动设置为更低采样率后保存一致。</p><h4 id="2-压缩格式存放在内存compressed-in-memory"><a class="anchor" href="#2-压缩格式存放在内存compressed-in-memory">#</a> 2). 压缩格式存放在内存 (Compressed In Memory)</h4><p>播放时会额外消耗 CPU 解压，内存情况测试如下：</p><p>Original Size：<strong>32.8KB</strong></p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.7KB (+3.7KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：90.7KB (+4.5KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：13.9KB<br /> 运行时内存：39.1KB (+25.2KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：16.6KB<br /> 运行时内存：44.1KB (+27.5KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：22.9KB<br /> 运行时内存：52.9KB (+30KB)</li></ul><p>采样率设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.7KB (+3.7KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：90.7KB (+4.5KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：7.6KB<br /> 运行时内存：35.3KB (+27.7KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：9.5KB<br /> 运行时内存：37.3KB (+27.7KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：12KB<br /> 运行时内存：39.8KB (+27.7KB)</li></ul><p>通过测试可以看出：</p><p>Compressed In Memory 模式下，PCM 和 ADPCM 下内存占用情况为预览面板的 ImportedSize + 几 KB，总体上差不多。</p><p>Vorbis 压缩模式会额外占用更多内存 (大概多了 30KB 左右)。<br /><s>且会随着质量设置越高而增加。</s>，见下方『注 1』，推测为音效源文件 44100Hz 有不一致的地方，手动设置为更低采样率后保存一致。</p><h4 id="3-流式播放streaming"><a class="anchor" href="#3-流式播放streaming">#</a> 3). 流式播放 (Streaming)</h4><p>流式播放占用内存相对整个文件来说比较少 —— 前提是音效文件本身大于 200KB，根据官方文档介绍，就算小于 200KB 的音效，采用流式播放也会产生 200KB 左右的缓存消耗。</p><p>坏处是播放的时候对 IO、CPU 都会有额外开销。</p><p><img data-src="/blogimages/2022/2022-11-08/m_8a5a8185e25aa508822013b2229e98e0_r.png" alt="" /></p><p>以上述两个音效文件为例，当设置一致 (SampleRateSetting 为 PreserveSampleRate [44100Hz])，并采用流式播放时结果如下：</p><ul><li>PCM：197.7KB</li><li>ADPCM：198KB</li><li>Vorbis (1% 质量)：231.3KB</li><li>Vorbis (70% 质量)：233.8KB</li><li>Vorbis (100% 质量)：236.2KB</li></ul><p>Vorbis 下会多 30KB 左右，且受质量设置影响 (比较小)</p><p>质量影响量太小了，尝试手动设置一下 Sample Rate 为 <strong>44100Hz</strong>：</p><ul><li>PCM：197.7KB</li><li>ADPCM：198KB</li><li>Vorbis (1% 质量)：231.3KB</li><li>Vorbis (70% 质量)：233.8KB</li><li>Vorbis (100% 质量)：236.2KB</li></ul><p>发现同一采样率下，缓存内存占用量没有变化，另外选择 <strong>Optimiz SampleRate</strong> 也是同样的内存占用结果。</p><p>依然以上述两个音效为例，将 Sample Rate 手动设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：163.7KB</li><li>ADPCM：164KB</li><li>Vorbis (1% 质量)：199.9KB</li><li>Vorbis (70% 质量)：199.9KB</li><li>Vorbis (100% 质量)：199.9KB</li></ul><p>可以看到，Vorbis 下依然会多 30KB 左右，但是质量选择已经没有影响了。</p><p>接着缓存 <strong>8000Hz</strong> 的 Sample Rate：</p><ul><li>PCM：141.7KB</li><li>ADPCM：142KB</li><li>Vorbis (1% 质量)：167.9KB</li><li>Vorbis (70% 质量)：167.9KB</li><li>Vorbis (100% 质量)：167.9KB</li></ul><p>可以得出结论：Streaming 播放音效时，至少会产生 140KB (最低 8000Hz 采样率) 左右的内存缓存，Vorbis 压缩格式下会额外增加 30KB 左右的消耗。</p><p>采样率 (越低内存占用越低)、强制单声道也会统一影响到三种设置在流式的缓存占用)，</p><p><font color=red>注 1：上述 <strong>44100Hz</strong> 采样率时，Vorbis 压缩下内存占用会有微小差异，同样适用于  Decompress On Load、Compressed In Memory，推测是音效源文件的采样率部分不一致导致，因为手动设置为更低采样率后就保持一致了。</font></p><h3 id="2-compression-format压缩格式"><a class="anchor" href="#2-compression-format压缩格式">#</a> 2. Compression Format (压缩格式)</h3><ul><li>PCM：不压缩，效果最好文件最大，试过甚至比导入音效本身文件都还大<br /><img data-src="/blogimages/2022/2022-11-08/m_53f9ea44065a5a44a00872836c0c4db6_r.png" alt="" /></li><li>ADPCM：有一定压缩效果，压缩率视情况音效源文件而定，经过测试一般在 50%~80% 浮动，也可能比源文件大小更大。<br /><img data-src="/blogimages/2022/2022-11-08/m_d5e6f3117362ddf0191c81fc14ff473d_r.png" alt="" /></li><li>Vorbis/Mp3：压缩率最高的方式，唯一确定一定能压缩大小的选项，该选项还可以额外设置 Quality，值越小，压缩越厉害，大小也越小<br /><img data-src="/blogimages/2022/2022-11-08/m_b9d67a27160a7a123e41e7187626c837_r.png" alt="" /></li></ul><h3 id="3-force-to-mono"><a class="anchor" href="#3-force-to-mono">#</a> 3. Force To Mono</h3><p>强制单声道，例如下图：</p><p><img data-src="/blogimages/2022/2022-11-08/m_6b48857f690b8f651eb8298e484f2393_r.png" alt="" /></p><p>这个音效就包含了 ch1、ch2 两个声道，若勾选该项，两个声道将会合并为一个，并减少一部分大小。</p><p><img data-src="/blogimages/2022/2022-11-08/m_e5634eac0a5337c2917083632be16d38_r.png" alt="" /></p><p>测试结果：</p><p><strong>文件 1：</strong></p><ul><li>PCM：153.1KB-&gt;76.6KB(50%)</li><li>ADPCM：43.1KB-&gt;21.6KB(50%)</li><li>Vorbis(1%)：7.6KB-&gt;6.4KB(15%)</li><li>Vorbis(100%)：12KB-&gt;9.8KB(18%)</li></ul><p><strong>文件 2：</strong></p><ul><li>PCM：9.6MB-&gt;4.8MB(50%)</li><li>ADPCM：2.7MB-&gt;1.4MB(50%)</li><li>Vorbis(1%)：0.6MB-&gt;426.3KB(30%)</li><li>Vorbis(100%)：2.8MB-&gt;0.6MB(80%)</li></ul><p>通过对两个音效文件：一个大文件及一个小文件对比，可以得出结论：</p><p>强制单声道选项中，PCM 和 ADPCM 的格式可以减少 50% 大小，Vorbis 视压缩质量及音效本身大小而定 —— 这个应该跟音效本身两个通道数据量有关，文件 2 实测双通道声音会有更大的差异。</p><p>注：单声道并不是说只有一个喇叭会播放声音，而是两个喇叭播放同样的声音。</p><h3 id="4-sample-rate"><a class="anchor" href="#4-sample-rate">#</a> 4. Sample Rate</h3><p>采样率，在不影响效果的情况，还可以考虑设置统一的更低的采样率，也会影响大小。</p><p>对于影响效果，测试结果如下：</p><ul><li>PCM(44100Hz)：306KB-&gt;153.1KB(22050Hz)-&gt;76.6KB(11025Hz)-&gt;55.6KB(8000Hz)</li><li>ADPCM(44100Hz)：86.2KB-&gt;43.1KB(22050Hz)-&gt;21.6KB(11025Hz)-&gt;15.7KB(8000Hz)</li><li>Vorbis(1%)(44100Hz)：13.9KB-&gt;7.6KB(22050Hz)-&gt;8.7KB(11025Hz)-&gt;6.1KB(8000Hz)</li><li>Vorbis(100%)(44100Hz)：22.9KB-&gt;12KB(22050Hz)-&gt;11.8KB(11025Hz)-&gt;8.8KB(8000Hz)</li></ul><p>从上述测试结果可以看出，采样率对内存占用影响成比例关系：减少多少采样率，相对就减少多少空间。</p><p>我们游戏音效导入默认是 44100Hz ，就是统一将其设置为 22050Hz，相比初始默认的 44100Hz，减少一半占用，Vorbis 压缩有部分浮动，不过也大体符合规则。</p><h3 id="5-preload-audio-data"><a class="anchor" href="#5-preload-audio-data">#</a> 5. Preload Audio Data</h3><p>根据说明，是会在场景加载时预先加载，默认开启的，适用于那种直接拖到 GameObject 上的音效，过多估计会影响场景加载速度。</p><p>一般最好关了，因为我们都是代码动态加载播放，场景不会直接挂。所以这个选项实际上没用。</p><h3 id="6-load-in-background"><a class="anchor" href="#6-load-in-background">#</a> 6. Load In Background</h3><p>在单独线程延迟加载，不卡主线程，但是这个选项或许会造成音画不同步。</p><h2 id="0x04-总体资源消耗测试"><a class="anchor" href="#0x04-总体资源消耗测试">#</a> 0x04 总体资源消耗测试</h2><p>上面在单项设置中，分别对比过各自会在内存中的占用量，此处将对 内存、CPU 消耗作一个总体对比。</p><p>对于如何测试 CPU 性能的消耗，由于单个音效的播放时很不明显，因此我在测试时采用 20 份播放同一个音效的 AudioSource，并对比总消耗、使用 Profiler 检查每个设置对 CPU 消耗造成的影响，取平均出现最多的值。</p><p>同时为了减少内存误差，测试文件更换了一个更大的音效，OriginalSize 为 2.8MB。</p><p>其默认测试设置如下：<br /><img data-src="/blogimages/2022/2022-11-08/m_8ffecf7064f644e1473a9626eb88d393_r.png" alt="" /></p><h4 id="1-压缩格式vorbis1质量"><a class="anchor" href="#1-压缩格式vorbis1质量">#</a> 1) 压缩格式：Vorbis (1% 质量)</h4><p><img data-src="/blogimages/2022/2022-11-08/m_e427525c6a80e39dc0ecddc990751942_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;2.5%-&gt;2.8%<br /> 内存消耗：7.3MB-&gt;2.8MB-&gt;5.9MB</p><h4 id="2-压缩格式vorbis100质量"><a class="anchor" href="#2-压缩格式vorbis100质量">#</a> 2) 压缩格式：Vorbis (100% 质量)</h4><p><img data-src="/blogimages/2022/2022-11-08/m_fcd8822723b729b78904dfc82246b15c_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;4.9%-&gt;5%<br /> 内存消耗：7.3MB-&gt;3.7MB-&gt;5.9MB</p><h4 id="3-压缩格式adpcm"><a class="anchor" href="#3-压缩格式adpcm">#</a> 3) 压缩格式：ADPCM</h4><p><img data-src="/blogimages/2022/2022-11-08/m_2c08a89d388540ae8df5de75acd03a33_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;1.8%-&gt;2.1%<br /> 内存消耗：7.2MB-&gt;3.8MB-&gt;5.6MB</p><h4 id="4-压缩格式pcm"><a class="anchor" href="#4-压缩格式pcm">#</a> 4) 压缩格式：PCM</h4><p><img data-src="/blogimages/2022/2022-11-08/m_531b2b0591cf77c7e75377e99be059ec_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;1.1%-&gt;1.4%<br /> 内存消耗：7.2MB-&gt;7.2MB-&gt;5.6MB</p><h4 id="5-总结"><a class="anchor" href="#5-总结">#</a> 5) 总结</h4><p>上述测试结果中，感觉其中 Streaming Vorbis 内存占用与预计的有点不符，于是使用单 AudioSource 额外进行测试：</p><p><img data-src="/blogimages/2022/2022-11-08/m_8ea6c5c446af60829b7e9b32c492c26b_r.png" alt="" /></p><p>Streaming 播放模式，从左自右分别为：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM</p><p>CPU 消耗：0.5%-&gt;0.5%-&gt;0.4%-&gt;0.3%<br /> 内存消耗：2.6MB-&gt;2.6MB-&gt;2.5MB-&gt;2.5MB</p><p>Vorbis 压缩格式，在 Streaming 下 Taotal Audio Memery 消耗多了 100KB 的样子，而在上面使用 Take Sample 单个查看时只额外多了 30KB 内存占用。</p><p>这里只能推测两个原因：</p><ul><li>要么 Taotal Audio Memery 还计算了其它数据</li><li>要么由于统计没有显示具体 KB 消耗值导致的误认 (例如 PCM 原本为 2.57MB 一类，加上 30KB 左右就到 2.6MB 了)。</li></ul><p>另外需要注意的是，Streaming 播放模式下，会随着通同一个文件的反复加载，而叠加文件流及解码内存消耗 —— 例如上述单个播放为 124KB-&gt;20 个 = 124KBx20=2.4MB</p><h5 id="总体内存消耗"><a class="anchor" href="#总体内存消耗">#</a> 总体内存消耗：</h5><p>Decompress On Load：Vorbis 额外 30KB 左右内存消耗，总体差不多<br /> Compress In Memery：PCM-&gt;ADPCM-&gt;Vorbis (100% 质量)-&gt;Vorbis (1% 质量)<br /> Streaming：Vorbis 额外几十 KB 内存消耗，总体差不多</p><h5 id="总体cpu消耗"><a class="anchor" href="#总体cpu消耗">#</a> 总体 CPU 消耗：</h5><p>Decompress On Load：CPU 消耗基本一致<br /> Compress In Memery：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM<br />Streaming：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM</p><h4 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h4><blockquote><p>对于总体内存消耗，或许会有疑问（比如说我自己）：在测试单个音效播放时，Profiler Audio 面板中的 Total Audio Memery 的内存数值，比 Profiler Memery 面板中 Take Sample 获取到的单个音效内存占用更大，这个是每个音效实际都比 TakeSample 大些，还是说仅仅因为 Total Audio Memery 计算了其它额外内存？</p></blockquote><p>于是进行测试，首先是空场景 Audio 信息统计：<br /><img data-src="/blogimages/2022/2022-11-08/m_c1482d2c86711e3b82d23fed6e922ae3_r.png" alt="" /></p><p>接着使用三个不同大小的音效，使用 PCM (Decompress On Load) 格式进行播放，查看 Total Audio Memery 数值：<br /><img data-src="/blogimages/2022/2022-11-08/m_62f502a630dccf7903d280cd34439677_r.png" alt="" /></p><p>可以发现 Total Audio Memery 数值是根据 PCM Imported Size 大小增加的，Sample Sound Memery (Decompress On Load 解压内存占用量) 亦是按照实际大小跟随递增。</p><h5 id="补充-pcmcompressed-in-memory-模式"><a class="anchor" href="#补充-pcmcompressed-in-memory-模式">#</a> 补充 PCM (Compressed In Memory) 模式：</h5><p><img data-src="/blogimages/2022/2022-11-08/m_93c42e0ec47651dd4433f781999ed190_r.png" alt="" /><br />DSP CPU：项目在加载类型为 Compressed In Memory 的非流式声音的混音、音频效果和解压缩中使用的 CPU 量。<br />Sample Sound Memory：加载类型为 Decompress On Load 的音频文件用于所有已解压缩样本数据的内存量。</p><p>也就是可以得出结论：</p><ul><li>Total Audio Memery 是所有内存总量，确实是计算了额外消耗内存的。</li><li>Profiler Memery 面板中 Take Sample 获取到的单个音效内存就是实际占用量，与总消耗内存可以表现出一种递增的对应关系。</li><li>PCM 虽然是无压缩格式，但若是选择 Compressed In Memory ，虽然单个音效内存跟选择与否没有变化，但对总体内存也会有一定影响 (测试表现是增加了一点)。</li></ul><h2 id="0x05-压缩格式对最终-assetbunle-资源影响"><a class="anchor" href="#0x05-压缩格式对最终-assetbunle-资源影响">#</a> 0x05 压缩格式对最终 AssetBunle 资源影响</h2><h4 id="1-默认设置-samplerate-22050hz-pcm-格式"><a class="anchor" href="#1-默认设置-samplerate-22050hz-pcm-格式">#</a> 1) 默认设置、SampleRate 22050Hz、PCM 格式：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_0d325cddd386fb945373c5d125e95248_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_0d75a39f780213b3007ecbd23f996ac8_r.png" alt="" /></p><h4 id="2-默认设置-samplerate-22050hz-adpcm-格式"><a class="anchor" href="#2-默认设置-samplerate-22050hz-adpcm-格式">#</a> 2) 默认设置、SampleRate 22050Hz、ADPCM 格式：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_de861340a651647f686105eb35f7fb16_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_16d83cb95231207d45e0362af6914021_r.png" alt="" /></p><h4 id="3-默认设置-samplerate-22050hz-vorbis-压缩质量-70"><a class="anchor" href="#3-默认设置-samplerate-22050hz-vorbis-压缩质量-70">#</a> 3) 默认设置、SampleRate 22050Hz、Vorbis 压缩，质量 70%：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_7eea0eda7f26befe6ca6567c999d3493_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_a22fc28a39eb76fc140d69a392fd0928_r.png" alt="" /></p><p>可以看出，跟图片压缩一样，压缩格式对最终出包的 AssetBunle 资源大小也会有影响，除压缩方式选择外，Vorbis 压缩质量数值也会影响。</p><p>最终 AssetBundle 包大小基本与音效面板上的 ImportedSize 差不多 (+ 部分 AssetBundle 额外数据)。</p><h2 id="0x06-总结"><a class="anchor" href="#0x06-总结">#</a> 0x06 总结</h2><p>测试结果有些与之前预想的一致，也有部分预想被『推翻』。</p><p>在<font color=blue>内存占用量</font>上，对于 Decompress On Load、Compressed In Memory、Streaming 三种 LoadType 方式：</p><ul><li>Decompress On Load 是以 <font color=red>PCM 格式下 ImportedSize 大小</font>为基准，PCM、ADPCM 格式下在内存解压后占用量基本一致，Vorbis 多占用 40KB 左右</li><li>Compressed In Memory：压缩模式存放内存，Vorbis 压缩会比 <font color=red>自身 ImportedSize</font> 大 30KB 左右</li><li>Streaming 以 200KB 缓存为基准，Vorbis 压缩后加载相比另外两种会额外占用 30KB 左右的内存。<br /><font color=red>注 1：关于内存占用比较基准，需要注意的是比较基准对象是不同的，这篇文章写完了，我脑袋就混乱了几天才反应过来</font><br /><font color=red>注 2：大的音效也满足该标准，上述 OriginalSize 为 2.8MB、32.8KB 的音效 Profiler 表现基本一致</font></li></ul><p>在 <font color=blue>CPU 资源消耗</font>上，对于 Decompress On Load、Compressed In Memory、Streaming 三种 LoadType 方式：</p><ul><li>Decompress On Load：CPU 消耗差不多</li><li>Compressed In Memory：压缩存放内存时，以 PCM-&gt;ADPCM-&gt;Vorbis (质量越高消耗越多)</li><li>Streaming：流式播放时，以 PCM-&gt;ADPCM-&gt;Vorbis (质量越高消耗越多)</li></ul><p>在<font color=blue>音效质量</font>上：</p><ul><li>主要受压缩格式影响。PCM 不压缩效果最好，ADPCM 其次，Vorbis 最后。</li><li>对此可以在预览面板看出，更换压缩格式后，振幅会有轻微变动 —— 不过从实际听起来的效果看，PCM、ADPCM 和 Vorbis 高质量压缩下的效果差不多，至少个人没听出太大差别。</li><li>经过测试，如果源音效质量就不大行，PCM 和 Vorbis 效果是一样，修改该项音效振幅不会发生任何改动 —— 甚至 Vorbis 1%~100% 质量都没有差别，比如测试所用的 『lvbu』 音效。</li></ul><p>另外 Force To Mono、Sample Rate 统一影响上述表现 (CPU、内存消耗、表现质量)</p><p>经过上面的测试，可以发现音效设置主要是质量换效率、或者空间换时间、或者时间换空间，总有一定取舍。</p><p>因此最后再说一下个人总结：</p><ul><li>可以使用 PCM 模式下的 Imported Size 预估实际解压消耗内存量</li><li>没有绝对的最好设置，这个设置可能需要平衡 包体、内存、CPU 消耗得出结论，前期可以选择一个合适的格式统一设置，后续完整了再进行具体优化</li><li>以 PCM ImportedSize 为基准，一两百 KB、比较频繁使用的小音效，例如按钮声音、战斗中的技能音效，可以考虑使用 ADPCM 压缩格式<br />普通小音效选择 Compress In Memery、非常频繁的音效选择 Decompress On Load</li><li>大一点或者比较少用的音效，不至于常影响到 CPU，采用 Vorbis 压缩，LoadType 采用 Compress In Memery。</li><li>采用 Vorbis 压缩可以调节质量滑块减少内存及 CPU 消耗 (当然这样音效质量也会受到影响)</li><li>十几兆或者几十兆的，如果直接放在内存会很影响的情况下再考虑是否用流式播放 (感觉手游应该也不至于，对于手游来说还是有点奢侈了)，采用流式播放最好采用 ADPCM 或 PCM 格式了，省一些播放时的 CPU 解压消耗。</li><li>另外在可以接受的情况下， Sample Rate 可以设置为 22050Hz，比默认 44100Hz 减少一半的占用</li><li>Force To Mono 在小音效上应该也可以勾上，例如按钮点击音效总不能也是真的立体声吧，也可以省下一半资源。不过在音效源文件本身就是纯单通道的时候，勾选与否都没有影响</li></ul><p>在我们游戏中，都是采用前两种 LoadType+Vorbis 压缩方式，质量 70%、压缩模式存放 (Compressed In Memory)、SampleRate 22050Hz。</p><p>注：选择压缩同时也会影响打包资源大小，最终 AssetBundle 包大小基本与音效面板上的 ImportedSize 差不多 (+ 部分 AssetBundle 额外数据)。最终设置得权衡质量、包体和内存及性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#0x01-前言&quot;&gt;#&lt;/a&gt; 0x01 前言&lt;/h2&gt;
&lt;p&gt;之前虽然有用过，但是并没有对其做个人的整理与总结，只大概知道哪个选项会造成什么情况，此处进行一次详尽的实际测试并总结。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="资源设置" scheme="https://cwhisme.github.io/categories/Unity3D/%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于二进制十六进制转十进制与ARGB图片存储格式</title>
    <link href="https://cwhisme.github.io/2022/11/03/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6/"/>
    <id>https://cwhisme.github.io/2022/11/03/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6/</id>
    <published>2022-11-03T02:38:36.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a class="anchor" href="#0x01-前言">#</a> 0x01 前言</h2><p>今天写文章的时候，突然想起用十六进制当做标题序号，于是再记录一下。</p><h2 id="0x02-十六进制与十进制转换"><a class="anchor" href="#0x02-十六进制与十进制转换">#</a> 0x02 十六进制与十进制转换</h2><p>首先，在十六进制中 1~16 数字代表有：0,1,2,3,4,56,7,8,9,A (10),B (11),C (12),D (13),E (14),F (15)</p><p>前位为 0 可以被忽略，例如：</p><p>0x1<mark>0x01</mark>1<br />0x0A<mark>0xA</mark>10</p><p>只有前一位有大于 1 的情况才会作计算，如：</p><p>0x1A<mark>26</mark>1*16+10</p><p>后位为 0 则会使前一位成为进位数：</p><p>0xA00==10<em>16</em>16+0+0=2560</p><p>对于进位来说，当前处于哪位，计算时就需要自身数值乘对应数量 N 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>6</mn><mi>N</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">16^N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 次方</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi>x</mi><mi>A</mi><mi>A</mi><mi>A</mi><mo>=</mo><mo>=</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>2</mn></msup><mo>+</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>1</mn></msup><mo>+</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>0</mn></msup><mo>=</mo><mo>=</mo><mn>2730</mn></mrow><annotation encoding="application/x-tex">0xAAA==10*16^2+10*16^1+10*16^0==2730</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord mathnormal">A</span><span class="mord mathnormal">A</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord">3</span><span class="mord">0</span></span></span></span></p><p>同理，经常见到的颜色值：0xFFFF 类似</p><p>0xFFFF<mark>15<em>16</em>16<em>16+15</em>16<em>16+15</em>16+15</mark>65535</p><p>这中最大值的情况，计算其实可以简化一下：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>6</mn><mn>4</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mo>=</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>−</mo><mn>1</mn><mo>=</mo><mo>=</mo><mn>65535</mn></mrow><annotation encoding="application/x-tex">16^4-1==16*16*16*16-1==65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">5</span><span class="mord">5</span><span class="mord">3</span><span class="mord">5</span></span></span></span></p><h2 id="0x03-二进制与十进制转换"><a class="anchor" href="#0x03-二进制与十进制转换">#</a> 0x03 二进制与十进制转换</h2><p>对于二进制转十进制，常用的还是数数。</p><p>数二进制中有多少个 1 ，这个 1 所占用的位置 N 作为 2 (N-1) 次方，然后累加起来。</p><p>例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1011</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">1011=2^3+2^1+2^0=15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span></p><p>例如 4 个字节 容量有多大？</p><p>我们知道：</p><p>1 个字节有 8 位<mark> 0b11111111</mark>255<br />2 个字节有 16 位<mark> 0b1111111111111111</mark>256<em>256-1=65535<br />3 个字节有 24 位<mark> 0b111111111111111111111111</mark>256</em>256<em>256-1=16777215<br />4 个字节有 32 位<mark> 0b11111111111111111111111111111111</mark>256</em>256<em>256</em>256-1=4294967295</p><p>一张 ARGB32 的图片格式就是：</p><p>每个通道 8 位 ==255 表示一个颜色，也就是我们常见的 (255,255,255,255) 颜色组合，也即是『原图』。</p><p>上次评审也问到过这个问题：没答上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#0x01-前言&quot;&gt;#&lt;/a&gt; 0x01 前言&lt;/h2&gt;
&lt;p&gt;今天写文章的时候，突然想起用十六进制当做标题序号，于是再记录一下。&lt;/p&gt;
&lt;h2 id=&quot;0x02-十六进制与十进制转换&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="理论研究" scheme="https://cwhisme.github.io/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="数学" scheme="https://cwhisme.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于对项目字符串拼接的优化研究</title>
    <link href="https://cwhisme.github.io/2022/10/31/%E5%85%B3%E4%BA%8E%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>https://cwhisme.github.io/2022/10/31/%E5%85%B3%E4%BA%8E%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%9A%84%E4%BC%98%E5%8C%96/</id>
    <published>2022-10-31T02:17:26.000Z</published>
    <updated>2022-12-22T03:29:48.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a class="anchor" href="#1-前言">#</a> 1. 前言</h2><p>在对组员代码进行审查时，经常碰到看着很不合理的字符串拼接操作，特别是对数组数据操作，也直接一个 for 循环，使用 + 号进行。</p><p>甚至有时候还是直接以 Text 作为主体，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> soldierData<span class="token punctuation">.</span>Skills<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>m_soldiersDesc<span class="token punctuation">.</span>text <span class="token operator">+=</span> soldierData<span class="token punctuation">.</span>Skills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetLvDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在这个地方，首先 m_soldiersDesc.text 是一个主体，『+=』操作相当于 取值 + 字符串拼接 + 赋值 + 重构 Text 数据，还是在循环中进行 —— 有多费就不用多说了。</p><p>再次对组员进行强调：使用对应指定方式拼接字符串。</p><p>项目中其实已有公共的采取 StringBuilder 拼接相关方法，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/// 組合数组</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> split <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">StringBuilder</span> sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sbd<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">?</span> split <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> sbd<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>注：虽然该方法是已有的，但是使用的不多 (而且该方法使用 StringBuilder 方式也不大好，例如调用了 StringBuilder Append 还在用 + 号拼接小的)，大多都是在搞自我拼接。</p><p>所以虽然要求大家使用项目自定义的字符串拼接相关扩展方法，不过这边这块恐怕需要进行优化一下。</p><h2 id="2-第一版优化"><a class="anchor" href="#2-第一版优化">#</a> 2. 第一版优化</h2><p>为此我在这个基础上增加了一份扩展，优化主要有两点：使用 StringBuilder 拼接，且对其进行缓存，每次回收利用。</p><p>主要代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> _stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _stringCacheLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _stringCacheTopIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// 将数组组合为字符串</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> split <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        _stringCacheLength <span class="token operator">=</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        _stringCacheTopIndex <span class="token operator">=</span> _stringCacheLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _stringCacheLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> _stringCacheTopIndex<span class="token punctuation">)</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/// 将列表组合为字符串</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">RCallback<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> T<span class="token punctuation">></span></span> getStr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> split <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        _stringCacheLength <span class="token operator">=</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        _stringCacheTopIndex <span class="token operator">=</span> _stringCacheLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _stringCacheLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">getStr</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> _stringCacheTopIndex<span class="token punctuation">)</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">/// 将字典组合为字符串</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span> dic<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> split <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">.</span>Count <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>getStrCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">else</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">getStrCallback</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> item<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>_stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/// 将数组组合为字符串，换行分割</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name">RCallback<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> T<span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">/// 将列表组合为字符串，换行分割</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">RCallback<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> T<span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">/// 将字典组合为字符串，换行分割</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span> dic<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">return</span> dic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>主要提供有两种处理方式：一种直接将数组每个数据拼接，另一种会经过回调处理后再拼接。<br />并支持数组、列表、字典三个常用数据结构内容的拼接。</p><p>这里只使用一份 StringBuilder 缓存，是因为考虑到游戏中单线程模式即用就即时返回结果了，没有必要采用对象池模式去缓存多个。</p><h2 id="3-性能测试与优化"><a class="anchor" href="#3-性能测试与优化">#</a> 3. 性能测试与优化</h2><h3 id="四种拼接方式性能测试"><a class="anchor" href="#四种拼接方式性能测试">#</a> 四种拼接方式性能测试</h3><p>对于性能测试，这里首先以 100000 个放置于一个数组中的随机字符串的拼接为例，分别采用 + 号拼接、string.Join、自定义 StringBuilder、带回调自定义 StringBuilder 四种方式，测试其消耗时长：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> TestCount <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 纯字符串数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _strArray<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 初始化测试数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        _strArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>TestCount<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            _strArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment">// 测试数据填充完毕</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">//==========</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">//1. 测试直接拼接数组</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> finalStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _strArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            finalStr <span class="token operator">+=</span> <span class="token string">","</span> <span class="token operator">+</span> _strArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>finalStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"直接拼接数组：&#123;0&#125;"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">//2. 测试内部函数 join 拼接数组</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        finalStr <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> _strArray<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>finalStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"string.Join 拼接数组：&#123;0&#125;"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">//3. 测试自定义函数拼接数组</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        finalStr <span class="token operator">=</span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>finalStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接数组：&#123;0&#125;"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">//4. 测试带回调自定义函数拼接数组</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        finalStr <span class="token operator">=</span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> str <span class="token operator">=></span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>finalStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"带回调自定义函数拼接数组：&#123;0&#125;"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/// 返回一个随机值字符串</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Intern</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="/blogimages/2022/2022-10-31/m_58a128e53038c421467e1deabe1943b5_r.png" alt="" /></p><p>如上图所示，可以看见直接使用 + 号进行拼接的方式，相比另外几种方式其消耗时间可以说是一骑绝尘：可以确定内部基本上没有什么优化的。</p><p>严格来说，上述测试方式并不准确，不过这里主要是因为 + 号拼接太过于消耗时间，数据大了电脑跑不动。因此我就仅执行一次大批量测试了 —— 确定这方式真可以丢一边了。</p><h3 id="平均性能测试"><a class="anchor" href="#平均性能测试">#</a> 平均性能测试</h3><p>接下来，剔除 + 号拼接方式，对比余下方式去取平均消耗时间。</p><p>join、concat、自定义函数、带回调自定义函数分别执行 100 次，取平均时间。<br />除此之外，增加对 列表、字典、类类型结构测试。</p><p>测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">StrClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _desStr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">StrClass</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        _desStr <span class="token operator">=</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> _desStr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 数据长度</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> TestValueCount <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 每一轮测试次数，取平均消耗时间</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> TestNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 保存一下结果</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _logPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 纯字符串数组</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _strArray<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 纯字符串列表</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> _strList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 字典</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> _strDic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 返回字符串的类结构</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">StrClass<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _strClassArray<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// 初始化测试数据</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    _strArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>TestValueCount<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    _strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>TestValueCount<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    _strClassArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StrClass</span><span class="token punctuation">[</span>TestValueCount<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    _strDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>TestValueCount<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestValueCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        _strArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        _strList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        _strClassArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StrClass</span><span class="token punctuation">(</span><span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        _strDic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 测试数据填充完毕</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">//==========</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">//Stopwatch stopwatch = Stopwatch.StartNew();</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">//1. 测试直接拼接数组</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">//stopwatch.Start();</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token comment">//string finalStr = "";</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">//for (int i = 0; i &lt; _strArray.Length; i++)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">//&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">//    finalStr += "," + _strArray[i];</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">//&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">//stopwatch.Stop();</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">//UnityEngine.Debug.Log(finalStr);</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">//UnityEngine.Debug.LogWarning (string.Format ("直接拼接数组：&#123;0&#125;", stopwatch.Elapsed.ToString ()));</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">// 清空日志</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    _logPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"TestLog.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>_logPath<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">// 测试内部函数 concat 拼接数组</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.concat 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>_strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">//2. 测试内部函数 join 拼接数组</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.Join 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> _strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">//3. 测试自定义函数拼接数组</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token comment">//4. 测试带回调自定义函数拼接数组</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"带回调自定义函数拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> str <span class="token operator">=></span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token comment">//5. 测试 join 函数拼接列表</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.Join 拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token comment">//6. 测试自定义函数拼接列表</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token comment">//7. 测试带回调自定义函数拼接列表</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"带回调自定义函数拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token comment">//8. 测试自定义函数拼接类类型</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接类类型"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strClassArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> data <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token comment">//9. 测试自定义函数拼接字典</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接字典"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token comment">//10. 测试自定义函数拼接字典</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接字典(带回调操作)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=></span> k <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">/// 执行一轮对 callback 运行测试</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">,</span> <span class="token class-name">Action</span> callback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token class-name"><span class="token keyword">long</span></span> totalTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        totalTime <span class="token operator">+=</span> stopwatch<span class="token punctuation">.</span>ElapsedTicks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>    <span class="token class-name">TimeSpan</span> span <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span>totalTime<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> log <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"* &#123;0&#125;：&#123;1&#125;秒&#123;2&#125;毫秒\n"</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> span<span class="token punctuation">.</span>Seconds<span class="token punctuation">,</span> span<span class="token punctuation">.</span>Milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    File<span class="token punctuation">.</span><span class="token function">AppendAllText</span><span class="token punctuation">(</span>_logPath<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>    UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token comment">/// 返回一个随机值字符串</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRandomStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Intern</span><span class="token punctuation">(</span>UnityEngine<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>结果如下：</p><ul><li>string.concat 拼接数组：00:00:00.0099083</li><li>string.Join 拼接数组：00:00:00.0132115</li><li>自定义函数拼接数组：00:00:00.0179701</li><li>带回调自定义函数拼接数组：00:00:00.0175816</li><li>string.Join 拼接列表：00:00:00.0184016</li><li>自定义函数拼接列表：00:00:00.0185559</li><li>带回调自定义函数拼接列表：00:00:00.0180418</li><li>自定义函数拼接类类型：00:00:00.1013892</li><li>自定义函数拼接字典：00:00:00.0224806</li><li>自定义函数拼接字典 (带回调操作)：00:00:00.0983786</li></ul><p>有点奇怪的是，在数组结构上，带回调自定义函数时间消耗反而比不带回调的低一点？</p><p>所以可以确定一下性能排序分别为：</p><blockquote><p>string.concat-&gt;string.Join-&gt;StringBuilder 自定义拼接 -&gt;+ 号拼接</p></blockquote><p>(其中 concat 之所以性能更高，除了因为少了一位『分隔符』的插入，看源码似乎还利用了创建一个最终大小字符串，通过内存拷贝方式复制进去实现)</p><p>这么看起来，还是内置拼接函数性能比较高。</p><p>不过 concat、Join 的局限性在于：只能用于数组类型，且只处理字符串 —— 如果对象不是字符串，则直接通过 ToString 强转为字符串进行拼接。(要是有某个非字符串数组类型对象重载过 ToString 输出正确值也不是不能用)</p><h2 id="4-第二版优化"><a class="anchor" href="#4-第二版优化">#</a> 4. 第二版优化</h2><p>经过测试之后，大概性能也有点数了。</p><p>于是就有一些新的想法：例如无回调需求时使用 join 拼接、分隔符为空则采用 concat 拼接 —— 虽然会增加一点判断，但是性能该是可以提升一点的。</p><p>另外在目前自定义扩展函数的使用方式上，感觉也还有点缺点：比如字典类型，如果别人想把 k、v 结构也拼接在一块，那么这里就不大好办了，让调用者在回调方法用 + 号拼接一次？这样可就又冗余了。所以最好也提供一个重载使其作为可选项。</p><p>最终形成以下方法：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> _stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _stringCacheLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _stringCacheTopIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// 将数组组合为字符串</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> separator <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> getStrCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">//if (getStrCallback == null) return string.Join(separator, arr);</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        _stringCacheLength <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        _stringCacheTopIndex <span class="token operator">=</span> _stringCacheLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _stringCacheLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">CheckDeliverValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> _stringCacheTopIndex<span class="token punctuation">)</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">/// 将列表组合为字符串</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> separator <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> getStrCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">//if (getStrCallback == null) return string.Join(separator, list);</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        _stringCacheLength <span class="token operator">=</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        _stringCacheTopIndex <span class="token operator">=</span> _stringCacheLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _stringCacheLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">CheckDeliverValue</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> _stringCacheTopIndex<span class="token punctuation">)</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">/// 将字典的所有 value 组合为字符串，忽略字典的 Key 值</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/// &lt;param name="separator"> 分隔符 & lt;/param></span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/// &lt;param name="getValueStrCallback"> 如果 value 转化为字符串需要其它接口，可使用回调返回调用后的值 & lt;/param></span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token comment">/// &lt;returns>value,value,value,value,value......&lt;/returns></span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span> dic<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> separator <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>V<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getValueStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">(</span>dic<span class="token punctuation">,</span> separator<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> getValueStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">/// 将字典 key 和 value 成对组合为字符串，需要传入对应的分隔符</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/// &lt;param name="separator"> 每个对象之间分割符 & lt;/param></span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/// &lt;param name="separatorKV">key 和 value 分隔符，传入空值拼接时将忽略 key 值 & lt;/param></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">/// &lt;param name="getKeyStrCallback"> 如果 key 转化为字符串需要其它接口，可使用回调返回调用后的值 & lt;/param></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">/// &lt;param name="getValueStrCallback"> 如果 value 转化为字符串需要其它接口，可使用回调返回调用后的值 & lt;/param></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">/// &lt;returns > 默认：key:value,key:value,key:value......&lt;/returns></span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toString</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span> dic<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> separator<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> separatorKV<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getKeyStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>V<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getValueStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dic <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> dic<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token comment">//kv 分隔符为空，则当做表示不拼接 key</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token class-name"><span class="token keyword">bool</span></span> appendKey <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>separatorKV<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token comment">// 附加字典 key</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>appendKey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">CheckDeliverValue</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> getKeyStrCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>separatorKV<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token comment">// 附加字典值</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">CheckDeliverValue</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> getValueStrCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>            <span class="token comment">// 分隔符</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            _stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        _stringBuilder<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>_stringBuilder<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token keyword">return</span> _stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token comment">/// 将数组组合为字符串，换行分割</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token comment">/// 将列表组合为字符串，换行分割</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token comment">/// 将字典组合为字符串，换行分割 (忽略 key 值)</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">toStringLine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>K<span class="token punctuation">,</span> V<span class="token punctuation">></span></span> dic<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>V<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getStrCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token keyword">return</span> dic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> getStrCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="108"></td><td><pre></pre></td></tr><tr><td data-num="109"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token comment">/// 检查是否对值进行回调处理（若 getValueStrCallback 不为空则返回调用后结果，参数为 value）</span></pre></td></tr><tr><td data-num="111"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="112"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">CheckDeliverValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> getValueStrCallback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getValueStrCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">getValueStrCallback</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="性能测试"><a class="anchor" href="#性能测试">#</a> 性能测试：</h4><p>依然是 100000 个随机字符串，循环一百次拼接。</p><p>测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 测试内部函数 concat 拼接数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.concat 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>_strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//2. 测试内部函数 join 拼接数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.Join 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> _strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//3. 测试自定义函数拼接数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//4. 测试带回调自定义函数拼接数组</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"带回调自定义函数拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> str <span class="token operator">=></span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//5. 测试 join 函数拼接列表</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.Join 拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">//6. 测试自定义函数拼接列表</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//7. 测试带回调自定义函数拼接列表</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"带回调自定义函数拼接列表"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//8. 测试自定义函数拼接类类型</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接类类型"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strClassArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> data <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//9. 测试自定义函数拼接字典</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"自定义函数拼接字典"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//10. 测试自定义函数拼接字典</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">//DoTest ("自定义函数拼接字典 (带回调操作)", () => _strDic.toString (",");</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.concat 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>_strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"string.join 拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> _strArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接数组(无分隔符)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接数组"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接数组(带回调)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> str <span class="token operator">=></span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典 Value"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典(带 Value 回调)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> v <span class="token operator">=></span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典 K、V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典 K、V(带 Key 回调)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> k <span class="token operator">=></span> k<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典 K、V(带 Key、Value 回调)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> k <span class="token operator">=></span> k<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=></span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典(字典转数组拼接)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token string">"拼接字典(字典转列表拼接)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _strDic<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>string.concat 拼接数组：0 秒 937 毫秒</li><li>string.Join 拼接数组：1 秒 282 毫秒</li><li>自定义函数拼接数组：1 秒 837 毫秒</li><li>带回调自定义函数拼接数组：1 秒 809 毫秒</li><li>string.Join 拼接列表：1 秒 858 毫秒</li><li>自定义函数拼接列表：1 秒 916 毫秒</li><li>带回调自定义函数拼接列表：1 秒 847 毫秒</li><li>自定义函数拼接类类型：10 秒 400 毫秒</li><li>自定义函数拼接类类型 (GetDes () 无计算)：1 秒 870 毫秒</li><li>自定义函数拼接字典：2 秒 316 毫秒</li><li>string.concat 拼接数组：0 秒 910 毫秒</li><li>string.join 拼接数组：1 秒 253 毫秒</li><li>拼接数组 (无分隔符)：1 秒 638 毫秒</li><li>拼接数组：1 秒 764 毫秒</li><li>拼接数组 (带回调)：1 秒 794 毫秒</li><li>拼接字典 Value：2 秒 332 毫秒</li><li>拼接字典 (带 Value 回调)：2 秒 356 毫秒</li><li>拼接字典 K、V：8 秒 121 毫秒</li><li>拼接字典 K、V (带 Key 回调)：8 秒 111 毫秒</li><li>拼接字典 K、V (带 Key、Value 回调)：8 秒 335 毫秒</li><li>拼接字典 (字典转数组拼接)：14 秒 391 毫秒</li><li>拼接字典 (字典转列表拼接)：15 秒 655 毫秒</li></ul><p>(低版本 C# 的 string.concat、string.Join 连列表都不支持，甚至只能用在字符串数组上，所以上边说检测到对应情况 (没有分隔符或纯字符串数组) 后执行系统拼接函数只能在高版本下使用)</p><blockquote><p>[concat 由于低版本 C# 不支持除纯字符串数组之外的对象且有 object 重载，泛型数组也是可以直接丢进去的，然而直接当做 object.ToString 返回了，测试时发现消耗时间短得不可思议，仔细看才发现不对，例如上述『拼接列表 (无分隔符)』就是走进这个分支判断的情况，只能先注释掉]</p></blockquote><h2 id="5-stringbuilder-源码"><a class="anchor" href="#5-stringbuilder-源码">#</a> 5. StringBuilder 源码</h2><p>另外稍微看了下源码，StringBuilder 默认初始化 16 个字符大小的数组：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x060065BB RID: 26043 RVA: 0x00155704 File Offset: 0x00153904</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// Token: 0x060065BC RID: 26044 RVA: 0x0015570E File Offset: 0x0015390E</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// Token: 0x060065D7 RID: 26071 RVA: 0x001561B8 File Offset: 0x001543B8</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token function">ComVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">StringBuilder</span> <span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>容量足够的情况下，通过 unsafe 方法进行指针及直接内存操作：</p><ol><li>获取添加的字符串指针</li><li>获取字符数组待添加下标指针</li><li>调用 Buffer.Memcpy 进行内存拷贝进字符数组</li></ol><p>如果后续容量不够，则进行动态扩容：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x060065D1 RID: 26065 RVA: 0x0015603C File Offset: 0x0015423C</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>SecuritySafeCritical<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name">StringBuilder</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> chunkChars <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> chunkLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> chunkLength <span class="token operator">+</span> length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> chunkChars<span class="token punctuation">.</span>Length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 容量足够</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 走扩容</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AppendHelper</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>不过动态扩容不是直接扩容字符数组，而是通过单向链表的方式：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x06006615 RID: 26133 RVA: 0x0015730C File Offset: 0x0015550C</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExpandByABlock</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> minBlockCharCount<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minBlockCharCount <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> minBlockCharCount <span class="token operator">||</span> minBlockCharCount <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_MaxCapacity<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token string">"requiredLength"</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span><span class="token function">GetResourceString</span><span class="token punctuation">(</span><span class="token string">"ArgumentOutOfRange_SmallCapacity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>minBlockCharCount<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkPrevious <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkOffset <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkOffset <span class="token operator">+</span> num <span class="token operator">&lt;</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutOfMemoryException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">char</span></span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>将当前数据全部转移至『上一个』节点，然后自己创建一个新的字符数组进行处理。</p><p>除 StringBuilder 本身外，string 类提供的一些静态操作方法也再次利用 StringBuilder 对性能进行优化，如 join、format 底层都会调到那边去，还采用了 StringBuilderCache 对象池。</p><h2 id="6-join-部分源码"><a class="anchor" href="#6-join-部分源码">#</a> 6. Join 部分源码</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x060004B8 RID: 1208 RVA: 0x00010B4C File Offset: 0x0000ED4C</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>SecuritySafeCritical<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Join</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> separator<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//======= 省略判断 ================</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 字符串类型数组，直接通过分配一大块字符串内存，通过 unsafe 内存拷贝实现</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FastAllocateString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>text<span class="token punctuation">.</span>m_firstChar<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">UnSafeCharBuffer</span> unSafeCharBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UnSafeCharBuffer</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        unSafeCharBuffer<span class="token punctuation">.</span><span class="token function">AppendString</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            unSafeCharBuffer<span class="token punctuation">.</span><span class="token function">AppendString</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            unSafeCharBuffer<span class="token punctuation">.</span><span class="token function">AppendString</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> text<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 连接迭代器 (列表类型) 通过 StringBuilder 进行</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// Token: 0x060004B5 RID: 1205 RVA: 0x000109C4 File Offset: 0x0000EBC4</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">[</span><span class="token function">ComVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> separator<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> values<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 省略部分处理代码</span></pre></td></tr><tr><td data-num="30"></td><td><pre>result <span class="token operator">=</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">GetStringAndRelease</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// 连接 object 数组类型，通过 StringBuilderCache 对象池取 StringBuilder 进行拼接</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// Token: 0x060004B4 RID: 1204 RVA: 0x0001093C File Offset: 0x0000EB3C</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">[</span><span class="token function">ComVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Join</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> separator<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// 省略</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">GetStringAndRelease</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="7-stringconcat"><a class="anchor" href="#7-stringconcat">#</a> 7. string.Concat</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 当连接数量级比较低时，参数为 string 则直接通过创建最终字符串内存连接</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Token: 0x06000556 RID: 1366 RVA: 0x00013524 File Offset: 0x00011724</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>SecuritySafeCritical<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Concat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str0<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> str1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 部分判断代码省略 ===============</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> str0<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FastAllocateString</span><span class="token punctuation">(</span>length <span class="token operator">+</span> str1<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FillStringChecked</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FillStringChecked</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> length<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> text<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 连接迭代器 (列表类型) 通过 StringBuilder 进行</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// Token: 0x06000555 RID: 1365 RVA: 0x000134B8 File Offset: 0x000116B8</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token function">ComVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">__DynamicallyInvokable</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Concat</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> values<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 省略</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">GetStringAndRelease</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 当连接数量级比较低时，参数为 object 则直接通过符号连接</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// Token: 0x06000551 RID: 1361 RVA: 0x00013330 File Offset: 0x00011530</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">[</span>__DynamicallyInvokable<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Concat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> arg0<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> arg1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> arg2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 判断省略 ==========</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">return</span> arg0<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> arg1<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> arg2<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">//ConcatArray (当 string.Concat 超过三个 object 对象时调用)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// 超出这个数量则通过内存分配进行</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// Token: 0x06000559 RID: 1369 RVA: 0x000136AC File Offset: 0x000118AC</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">[</span>SecuritySafeCritical<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ConcatArray</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> totalLength<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FastAllocateString</span><span class="token punctuation">(</span>totalLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">FillStringChecked</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> num<span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        num <span class="token operator">+=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">return</span> text<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>直接分配指定字符串数组所有字符串长度大小的大块字符串，然后通过 wstrcpy-&gt;Buffer.Memcpy 对内存直接进行拷贝操作。</p><h2 id="8-format"><a class="anchor" href="#8-format">#</a> 8. Format</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">FormatHelper</span><span class="token punctuation">(</span><span class="token class-name">IFormatProvider</span> provider<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> format<span class="token punctuation">,</span> <span class="token class-name">ParamsArray</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">GetStringAndRelease</span><span class="token punctuation">(</span>StringBuilderCache<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span>Length <span class="token operator">+</span> args<span class="token punctuation">.</span>Length <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendFormatHelper</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span> format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="对-stringformat-与普通拼接的性能测试"><a class="anchor" href="#对-stringformat-与普通拼接的性能测试">#</a> 对 string.Format 与普通拼接的性能测试</h3><p>除了对数组一类数据结构类型的拼接之外，常用的估计就 2~3 个带参数的简单字符串拼接了。</p><p>这种通常见到的还是直接 + 号进行，也有使用 string.Format 的。</p><p>为了评估以后究竟以使用哪种方式为准，我想再加一点测试，测一测使用 + 号与 string.Format 拼接简单字符串两者的性能。</p><p>每一项进行 10000 次操作，测试结果如下：</p><ul><li>简单拼接测试（X+1）：0 秒 3 毫秒</li><li>简单拼接测试（1+X）：0 秒 3 毫秒</li><li>简单拼接测试（X+1+Y）：0 秒 4 毫秒</li><li>简单拼接测试（X+1+Y+2）：0 秒 6 毫秒</li><li>简单拼接测试（X+1+Y+2+Z+3）：0 秒 11 毫秒</li><li>简单拼接测试（X+1+Y+2+Z+3+W+4）：0 秒 14 毫秒</li><li>string.concat（X+1）：0 秒 3 毫秒</li><li>string.concat（1+X）：0 秒 3 毫秒</li><li>string.concat（X+1+Y）：0 秒 4 毫秒</li><li>string.concat（X+1+Y+2）：0 秒 6 毫秒</li><li>string.concat（X+1+Y+2+Z+3）：0 秒 26 毫秒</li><li>string.concat（X+1+Y+2+Z+3+W+4）：0 秒 14 毫秒</li><li>string.format 拼接测试（X {0}）：0 秒 7 毫秒</li><li>string.format 拼接测试（{0} X）：0 秒 7 毫秒</li><li>string.format 拼接测试（X {0} Y）：0 秒 7 毫秒</li><li>string.format 拼接测试（X {0} Y {1}）：0 秒 11 毫秒</li><li>string.format 拼接测试（X {0} Y {1} Z {2}）：0 秒 16 毫秒</li><li>string.format 拼接测试（X {0} Y {1} Z {2} W {3}）：0 秒 35 毫秒</li><li>StringBuilder 拼接测试（X+1）：0 秒 4 毫秒</li><li>StringBuilder 拼接测试（1+X）：0 秒 4 毫秒</li><li>StringBuilder 拼接测试（X+1+Y）：0 秒 5 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2）：0 秒 8 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2+Z+3）：0 秒 11 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2+Z+3+W+4）：0 秒 14 毫秒</li></ul><p>每一项进行 100000 次操作，去除随机参数，测试结果如下：</p><ul><li>简单拼接测试（X+1）：0 秒 16 毫秒</li><li>简单拼接测试（1+X）：0 秒 15 毫秒</li><li>简单拼接测试（X+1+Y）：0 秒 20 毫秒</li><li>简单拼接测试（X+1+Y+2）：0 秒 25 毫秒</li><li>简单拼接测试（X+1+Y+2+Z+3）：0 秒 66 毫秒</li><li>简单拼接测试（X+1+Y+2+Z+3+W+4）：0 秒 77 毫秒</li><li>string.concat（X+1）：0 秒 17 毫秒</li><li>string.concat（1+X）：0 秒 16 毫秒</li><li>string.concat（X+1+Y）：0 秒 35 毫秒</li><li>string.concat（X+1+Y+2）：0 秒 24 毫秒</li><li>string.concat（X+1+Y+2+Z+3）：0 秒 65 毫秒</li><li>string.concat（X+1+Y+2+Z+3+W+4）：0 秒 64 毫秒</li><li>string.format 拼接测试（X {0}）：0 秒 60 毫秒</li><li>string.format 拼接测试（{0} X）：0 秒 66 毫秒</li><li>string.format 拼接测试（X {0} Y）：0 秒 68 毫秒</li><li>string.format 拼接测试（X {0} Y {1}）：0 秒 71 毫秒</li><li>string.format 拼接测试（X {0} Y {1} Z {2}）：0 秒 106 毫秒</li><li>string.format 拼接测试（X {0} Y {1} Z {2} W {3}）：0 秒 145 毫秒</li><li>StringBuilder 拼接测试（X+1）：0 秒 28 毫秒</li><li>StringBuilder 拼接测试（1+X）：0 秒 27 毫秒</li><li>StringBuilder 拼接测试（X+1+Y）：0 秒 33 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2）：0 秒 38 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2+Z+3）：0 秒 67 毫秒</li><li>StringBuilder 拼接测试（X+1+Y+2+Z+3+W+4）：0 秒 62 毫秒</li></ul><p>结果非常出乎意料，原以为 string.format 性能应该是比较好的，没成想竟然是最费的... 也许由于字符串内部占位符需要单独做解析，导致了大量消耗？</p><p>于是看了下源码，发现在 AppendFormatHelper 方法中，对整个字符串都做了一次遍历，去分析是否有 {} 这种占位符，这个确实是个会随字符串量级增加而增加消耗的一个操作 ——string.format 对于连接字符串存在多个参数的情况下，耗费时间也同样会随着参数增长而增加。</p><p>因此除了字符串数组类型拼接方法外，可以自己专门定义一个方法用于连接『散』字符串，以选择性能更好的拼接方式。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>根据上面的测试 —— 虽然这种测试不一定很准确 (毕竟 Unity 中 .Net 版本比较低)，以及对 string 源码本身的查看，基本上可以总结以下几个注意点：</p><p>连接纯字符串超过 3 个时，有分隔符可以选择 StringBuilder、string.join (数组)，否则使用 string.concat (数组)，至于 string.format—— 除了好看一点，能不用就不要用了，性能上完全没有优势。</p><p>其中 string.concat 及 string.join 的源码显示，其对不同类型选择了不同的处理方式。</p><p>共同点有：</p><ul><li>字符串类型数组，直接通过分配一大块字符串内存，通过 unsafe 内存拷贝实现</li><li>连接迭代器 (列表类型) 或者连接 object 数组均通过 StringBuilderCache 取 StringBuilder 进行</li></ul><p>string.Concat 特有：</p><ul><li>参数为 string，当连接数量级比较低时，直接通过分配一块最终字符串大小内存，通过 unsafe 内存拷贝实现</li><li>参数为 object，当连接数量级比较低时 (3 个以下)， 则直接通过符号连接，超过三个则创建临时数组变量将 object 转字符串，再走正常字符串数组连接方法</li></ul><h4 id="最终可以得出结论"><a class="anchor" href="#最终可以得出结论">#</a> 最终可以得出结论：</h4><p>拼接数量在 2 个：可以使用 + 号<br />拼接数量在 4 个及以下：字符串可以使用 string.concat (非字符串 3 个或以下时直接 + 号拼接，4 个或以上时会生成临时数组变量将 object.tostring，然后调用字符串数组拼接函数处理 —— 调用不定参数方法时也是如此处理)，否则最好 StringBuilder<br /> 拼接数量在超过 4 个：StringBuilder (不推荐 string.concat 是因为通过可变参数传参它会生成额外临时字符串数组，直接拼接数组时更有优势)<br /> 连接字符串数组、字符串列表类型：可以用 string.join 或 string.concat (无分隔符)，有特殊回调需求则自定义 StringBuilder (注：内部实际上也是用 StringBuilder 拼接的，不过看 DotNetCore 的源码实现不一样，是创建一个结构体 ValueStringBuilder，通过 stackalloc 在栈上分配 char 数组 (Span) 结构进行拼接)<br /> 连接其它容器 (比如字典)：StringBuilder</p><p>再解释一下：</p><p>连接字符串在 4 个及以下时，可以通过 string.concat (强调：字符串类型，非字符串可以 toString 传入)<br /> 字符串数组和字符串列表都可以用 string.join 或 string.concat (内部 StringBuilder ，有对象池)<br /> 其它类型的数组、列表或字典容器以及超出 4 个单字符串的连接，采用自己 StringBuilder 进行，并且可以缓存这个 StringBuilder 进行重复使用。<br />只有两个字符串拼接，才允许使用符号 +</p><p>(注：上述均表示一次性拼接的前提，若连续多次连接，则 StringBuilder 无疑是最好选择)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-前言&quot;&gt;#&lt;/a&gt; 1. 前言&lt;/h2&gt;
&lt;p&gt;在对组员代码进行审查时，经常碰到看着很不合理的字符串拼接操作，特别是对数组数据操作，也直接一个 for 循环，使用 + 号进行。&lt;/p&gt;
&lt;p&gt;甚至有</summary>
      
    
    
    
    <category term="理论研究" scheme="https://cwhisme.github.io/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://cwhisme.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>图片资源格式设置测试与总结</title>
    <link href="https://cwhisme.github.io/2022/10/26/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>https://cwhisme.github.io/2022/10/26/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/</id>
    <published>2022-10-26T03:57:38.000Z</published>
    <updated>2022-12-22T03:29:48.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>在今年 10 月份这次评审的时候，有问到图片设置相关的内容，当时感觉也是没回答多好。</p><p>例如，ETC1 与 ETC2 相比有什么差别？</p><p>回答的是 ETC1 不带 Alpha 通道，ETC2 带 Alpha 通道，其它就差不多 (实际上压缩质量也会高一点)</p><p>有问到如果 ETC 质量不佳怎么办？回答的是用 RGBA 设置看效果，而且还被追问除此之外呢？是否直接就用 RGBA 了？</p><p>下来后才想明白，意思应该是想问 ASTC 的，然而当时不知是觉得这个格式项目没有实际普及还是什么，根本没回答这个点... 甚至回答上都没提到 ASTC，虽然 ASTC 这格式肯定是知道，ios、android 新机型通用的一种图片压缩格式，估计也跟只在理论上了解、却没自己实践对比有关 —— 就很难反应过来。</p><p>因此这里就对这些格式挨个进行尝试、对比，整理一下自己了解的差异，以期得到更好的理解。</p><h2 id="图片设置"><a class="anchor" href="#图片设置">#</a> 图片设置</h2><p>sRGB 选项，本身处于 gamma 颜色空间内时，勾选与否都不影响。<br />处于线性颜色空间内时，勾选后才会做校正。</p><p>Mipmap：UI 肯定不能勾，3D 模型勾不勾取决于有没有相机远近操作及内存平衡。</p><h2 id="图片压缩格式"><a class="anchor" href="#图片压缩格式">#</a> 图片压缩格式</h2><p>为什么需要压缩？</p><blockquote><p>减少内存、减少数据传输带宽需求，压缩是有损的。</p></blockquote><h3 id="压缩格式"><a class="anchor" href="#压缩格式">#</a> 压缩格式</h3><p>对此官方文档也有列表说明：</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMjEuMi9NYW51YWwvY2xhc3MtVGV4dHVyZUltcG9ydGVyT3ZlcnJpZGUuaHRtbA==">class-TextureImporterOverride</span></p><h4 id="一-rgba"><a class="anchor" href="#一-rgba">#</a> 一、RGBA</h4><p>RGBA 格式主要分为：</p><p>RGBA64：每个像素 64 位，每个通道 16 位<br /> RGBA32：每个像素 32 位，每个通道 8 位<br /> RGBA16：每个像素 16 位，每个通道 4 位</p><p>其中 RGBA64、RGBA32 均为无压缩，RGBA16 官方文档说是『量化』模式，可能是靠直接量化缩放减少像素精度以减少内存占用，不过这种模式质量损失其实感觉有点大，对比了下还不如 ASTC4x4 压缩。</p><p><img data-src="/blogimages/2022/2022-10-26/m_42dd7d724910306bfad9c502639914ee_r.gif" alt="" /><br />分辨率 128x128，RGBA32-&gt;ASTC4x4，大小为 32kb-&gt;16kb (质量和大小都不占优)</p><p>RGBA64 高精度模式，图片本身不支持的情况下，设置了也只是浪费内存，所以基本上可以把 RGBA32 当做『原图』看待。</p><h4 id="二-ect1"><a class="anchor" href="#二-ect1">#</a> 二、ECT1</h4><p>安卓，不带 Alpha 通道，4bits/pixel<br /> 强行要求图片分辨率为 2N 次方。</p><h4 id="三-etc2"><a class="anchor" href="#三-etc2">#</a> 三、ETC2</h4><p>安卓，带 Alpha 通道 8bits/pixel，不带 Alpha 通道 4bits/pixel，质量比 ETC1 好。<br />强行要求图片分辨率为 2N 次方。</p><p>ETC1 与 ETC2 对比（128x128&amp;10.7kb）：<br /><img data-src="/blogimages/2022/2022-10-26/m_c127eafb4fe2f0fd9f71884b89aa3b01_r.gif" alt="" /></p><p>(字体边缘变化模糊度更低的就是 ETC2)</p><blockquote><p>ETC2 还有一种支持镂空图 (无 Alpha 过度) 的模式 (RGB+1bit Alpha)，也是 4 bits/pixel，这个格式网上没有解释如何处理的，猜测是将 Alpha 0.5 为界限，完全透明或不透明。</p></blockquote><p>我用 PS 大概画了一张渐变图进行测试，设置后对比效果如下：<br /><img data-src="/blogimages/2022/2022-10-26/m_a826a55fc92b56bcb2afebe58984bf6d_r.png" alt="" /></p><p>例如：<br /><img data-src="/blogimages/2022/2022-10-26/m_609ff492c0b942aa2caa9c7a78074344_r.png" alt="" /><br />左边为 ETC2 RGB+1bit Alpha 4Bit (8KB)，右边为 ETC2 RGBA 8Bit (16KB)<br /> 整体质量相对会差一点，不过相比常规 ETC2 RGBA 省一半内存。感觉这种适合效果要求不是很高、小一些的无渐变的纯透明图标，不过边缘像素必须处理好，不然边缘可能会比较明显，或者存在锯齿。</p><p>注：ETC 和 ETC2 在 Unity 还有种 Crunched 模式，可以自己选择压缩比 (不过 ETC2 只有 RAGB Crunched)，这种模式会增加一定解压消耗，因为它会在 CPU 上将该纹理解压缩为 ETC 传给 GPU (虽然官方称解压过程『非常快』)，更多见 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMjEuMS9NYW51YWwvdGV4dHVyZS1jb21wcmVzc2lvbi1mb3JtYXRzLmh0bWw=">官方文档</span> 说明。</p><h4 id="四-astc"><a class="anchor" href="#四-astc">#</a> 四、ASTC</h4><p>文档表示同等压缩率下，效果比 ETC2 更好，其 blockSize 越大压缩率越高，压缩分块从 4x4 到 12x12 最终可以压缩到每个像素占用 1bit 以下</p><p>其原理是将图片分块，每块颜色固定为 16bytes，然后通过控制每块存放多少像素 (4x4、6x6) 来控制压缩率，所以存放颜色越多压缩率越高，效果就越差。</p><p>不像 ETC、PVRTC 强行要求分辨率 2N 次方，当然符合这个规则的图片最好。<br />参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM3NjkyMTUzNi9hbnN3ZXIvMTA2MzI3MjMzNg==">https://www.zhihu.com/question/376921536/answer/1063272336</span></p><p>与 RGBA 格式相比：<br /><img data-src="/blogimages/2022/2022-10-26/m_1cdadb33b2ad7d459502ea3928123fdb_r.png" alt="" /></p><p>计算公式为：压缩后像素大小 = 16bytes/(分块宽高) x8bit</p><p>尝试计算一张 1024x1024 图片在 ASTC 10x10 下的大小：</p><p>压缩后每像素颜色占用：16/(10x10) x8=1.28bit<br /> 原本大小：1024x1024x32=4MB<br />4MB/(32/1.28)=1024x1024x1.28=1342177.28bit=163.84KB</p><p>ASTC 的 Alpha 通道是自动识别的 (特指安卓平台，ios 倒是可以单独选择是否带 Alpha 通道格式)。如果带 Alpha 通道，可以设置更低的 block size，否则可以设置更高的 size。<br />例如，根据压缩率的对比，若将 4x4 作为带 Alpha 透明通道图片标准：</p><ul><li>4x4=8bit=RGBA (32bit)= 压缩率 4 倍</li><li>不带 Alpha 通道 压缩率 4 倍 = RGB (24bit)/4=6bit~5x5</li></ul><p>当然，换算也不绝对，还是要看实际图片效果进行确定，不过感觉一般通用可以按照这种规则来，若某些特定图片出现可见的损失则手动处理。</p><p>对比了一下：<br /><img data-src="/blogimages/2022/2022-10-26/m_a3628ccb80bd4c4bf8a34d6efe7dfc91_r.gif" alt="" /><br />分辨率 128x128，ETC2-&gt;ASTC4x4，大小为 16kb-&gt;16kb</p><p><img data-src="/blogimages/2022/2022-10-26/m_e08338c3627fd662eaebe5a10151a8c9_r.gif" alt="" /><br />分辨率 128x128，ETC2-&gt;ASTC5x5，大小为 16kb-&gt;10.6kb</p><p><img data-src="/blogimages/2022/2022-10-26/m_dce12c80ae66fc19ac3437d779f5a89c_r.gif" alt="" /><br />分辨率 128x128，ETC2-&gt;ASTC6x6，大小为 16kb-&gt;7.6kb</p><p><img data-src="/blogimages/2022/2022-10-26/m_5aa5d2788a135af160a24bf2a58eac85_r.gif" alt="" /><br />分辨率 128x128，ETC2-&gt;ASTC8x8，大小为 16kb-&gt;4kb</p><p>同一张带 Alpha 通道的 Icon 图片，直到 ASTC8x8 的时候才与 ETC2 有了比较明显的差距 (比之更糊点)，但是大小可是小了 4 倍！那怕 ASTC6x6 也小了一倍以上，且效果更好。</p><p>最后，再分别使用 ASTC4x4、ETC2 与 RGBA32 (也就是原图) 进行对比：</p><p><img data-src="/blogimages/2022/2022-10-26/m_0725399211d37c2164d73402e59dc5f2_r.gif" alt="" /><br />分辨率 128x128，RGBA32-&gt;ASTC4x4，大小为 64kb-&gt;16kb  ↑</p><p><img data-src="/blogimages/2022/2022-10-26/m_3e3bb61964458ed75820064d9196d2e1_r.gif" alt="" /><br />分辨率 128x128，RGBA32-&gt;ETC2，大小为 64kb-&gt;16kb ↑</p><p>其中，RGBA32-&gt;ASTC4x4 损失的质量很少，RGBA32-&gt;ETC2 质量损失就比较明显了。</p><p>后续还测试了 RGBA32-&gt;ASTC5x5，虽然噪点更多，不过在宏观上来看，对于小图来说基本跟原图差别不是很大。</p><p>虽然按照文档所说，ASTC 效果会比 ETC2 更好，不过设置更高的 block 获得更高压缩率后效果肯定还是会降低，这是压缩率跟质量必然的取舍。不过大的 ASTC block 压缩率是真的高，而且 ios 和 android 都支持 (除了非常非常老的设备 ——iPhone6 以前、android OpenGLES3.0 部分及所有 OpenGLES3.1 GPU)。</p><h4 id="五-pvrtc"><a class="anchor" href="#五-pvrtc">#</a> 五、PVRTC</h4><p>IOS (GPU) 专用，强行要求图片分辨率为 2N 次方的方形。</p><p><img data-src="/blogimages/2022/2022-10-26/m_cfd9379259a7046ae87bffb4e9f287ec_r.png" alt="" /><br />从左自右分别是：ASTC4x4 (16kb)-&gt;ASTC6x6 (7.6kb)-&gt;ASTC8x8 (4kb)-&gt;PVRTC_4bit (8kb)-&gt;PVRTC_2bit (4kb)</p><p>就实际结果而言，PVRTC 2bit 糊得基本没法看，而 PVRTC 4bit 实际效果，基本也就跟 ASTC8x8 差不多，细节上甚至还差一点 —— 而 ASTC8x8 容量却比它低了一半。</p><p>PVRTC 4bit 只能说比 ASTC10x10 好些 —— 但 ASTC10x10 都直接压缩到 2.6kb 了</p><p>所以 ASTC 在 ios 上的质量 / 压缩比优势比在 android 平台更大，如果目标机型不是 iPhone6 (iPhone6 支持) 以前的设备，最好就使用 ASTC 了。</p><h4 id="六-其它"><a class="anchor" href="#六-其它">#</a> 六、其它</h4><p>除此之外，还有部分『其它』格式，例如：</p><ul><li>R8：未压缩单通道 (R)</li><li>Alpha 8：未压缩单通道 (A)</li><li>EAC：与 ETC 类似，不过只有单通道或双通道。</li><li>R EAC 4 bit ：压缩单通道 (R)</li><li>RG EAC 8 bit ：压缩双通道 (RG)</li><li>等</li></ul><p>详细解释在官方文档 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMjEuMi9NYW51YWwvY2xhc3MtVGV4dHVyZUltcG9ydGVyT3ZlcnJpZGUuaHRtbA==">class-TextureImporterOverride</span> 也都有说明，不过这些诸如拆分通道的格式，基本上不常用 (或者说没见过用)，或许某些情况下，写 Shader 只需要单通道之类的可能会用到？</p><h2 id="压缩后对-assetbundle-影响"><a class="anchor" href="#压缩后对-assetbundle-影响">#</a> 压缩后对 AssetBundle 影响</h2><p>在对图片格进行一堆测试之后，心里就冒出一个想法：</p><blockquote><p>既然图片本体进行了压缩，那么对最终资源大小有影响吗？如果图片本身压缩后，AssetBundle 打包无法减少更小，是否可以选择对图片采取不压缩，或者 LZ4 压缩模式？</p></blockquote><p>于是找了一张图进行测试，由于这张图片不是 POT 分辨率，因此以 ASTC 与 RGBA32 (原图) 为例。</p><p>简单的测试代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelect(LZMA)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectLZMA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">PackSelect</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelect(LZ4)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectLZ4</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token function">PackSelect</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle <span class="token operator">|</span> BuildAssetBundleOptions<span class="token punctuation">.</span>ChunkBasedCompression<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelect(Uncompress)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectUncompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token function">PackSelect</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle <span class="token operator">|</span> BuildAssetBundleOptions<span class="token punctuation">.</span>UncompressedAssetBundle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelect</span><span class="token punctuation">(</span><span class="token class-name">BuildAssetBundleOptions</span> opt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token class-name">Object</span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span>activeObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token class-name">AssetImporter</span> importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>importer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token class-name">AssetBundleBuild</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>        BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> build <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>对比结果：</p><p><img data-src="/blogimages/2022/2022-10-26/m_45ae9e30c0769a8bf06e42f270e4b5b0_r.png" alt="" /><br />RGBA (1.8M)-&gt;LZMA (449kb [25%])-&gt;LZ4 (755kb [41%])-&gt; 不压缩 (1.85M [102%])</p><p><img data-src="/blogimages/2022/2022-10-26/m_6cb8901537c88400d2f74a18cfbf539f_r.png" alt="" /><br />ASTC4x4 (462.2kb)-&gt;LZMA (273kb [59%])-&gt;LZ4 (303kb [65%])-&gt; 不压缩 (467kb [101%])</p><p><img data-src="/blogimages/2022/2022-10-26/m_143d4ebe0f769145f38441f41cbbe99a_r.png" alt="" /><br />ASTC12x12 (52.1kb)-&gt;LZMA (33kb [63%])-&gt;LZ4 (37kb [71%])-&gt; 不压缩 (57kb [109%])</p><p>ETC2 压缩模式对于 NPOT 的图片，勾选 ToNearest (正常被压缩) 以及不勾选 (无法正常被压缩为 ETC2) 的大小：<br /><img data-src="/blogimages/2022/2022-10-26/m_7625bcb93b3ed36ae3f31571ecd2bf35_r.png" alt="" /></p><p>根据结果可以得出结论：</p><blockquote><p>被压缩过的图片，最终打出来的 AssetBundle 包压缩率也会更低 —— 当然无论如何，图片本身进行过压缩格式压缩后，最终资源包体会更小。<br />ETC 一类如果图片是 NPOT 分辨率，则压缩将会无效</p></blockquote><p>所以从空间占用来考虑，打包时『通常压缩』格式依然还是需要选择压缩模式的。</p><p>为什么『通常压缩』要打重点？</p><p>因为后面我在测试 ETC Crunched 压缩模式时，确认这种高压模式 AssetBundle 无法再作压缩了。</p><p>依然以上述图片为例，设置为 ETC Crunched 100% 质量：<br /><img data-src="/blogimages/2022/2022-10-26/m_905a5cbc8b864c77f6b34a21e50bdef8_r.png" alt="" /></p><p>打包的 AssetBundle 大小基本跟 Inspector 预览差异不大 (多了一点 AssetBundle 数据)<br /> 所以要是选用了 ETC Crunched 模式，打包 AssetBundle 倒是可以采用『不压缩』或者『LZ4』来进一步节省加载时间。</p><h2 id="注意"><a class="anchor" href="#注意">#</a> 注意</h2><p>就算是 ASTC 压缩，如果选择开启了 Mipmap，则同样要求必须是 POT 的图，否则无法压缩 —— 对此项 Unity 会有 Warning 提示。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>根据上述各种对比，可以得出结论：</p><ul><li><p>质量 (由高到低)：RGBA32 (64kb)-&gt;ASTC4x4 (16kb)-&gt;ASTC5x5 (10.6kb)-&gt;ASTC6x6 (7.6kb)-&gt;ETC2 (16kb)-&gt;ASTC8x8 (4kb)~PVRTC4bit (8kb)-&gt;ASTC10x10 (2.6kb)-&gt;PVRTC2bit (4kb)</p></li><li><p>大小 (由高到低)：RGBA32 (64kb)-&gt;ASTC4x4 (16kb)-&gt;ETC2 (16kb)-&gt;ASTC5x5 (10.6kb)-&gt;PVRTC4bit (8kb)-&gt;ASTC6x6 (7.6kb)-&gt;ASTC8x8 (4kb)-&gt;PVRTC2bit (4kb)-&gt;ASTC10x10 (2.6kb)</p></li></ul><p>所以，除非对非常老的机型也想支持，否则默认就可以使用 ASTC6x6 ，再视情况而定对 Block 进行增加或减少。</p><p>否则:</p><ul><li>安卓：不带 Alpha 使用 ETC2 RGB，带 Alpha 使用 ETC2 RGBA</li><li>IOS：不带 Alpha 使用 PVRTC RGB 4bit，带 Alpha 使用 PVRTC RGBA 4bit<br /><font color=red>注 1：ETC 要求图片为 2N 次方 (长宽不强行要求一致)</font><br /><font color=red>注 2：PVRTC 要求图片为 2N 次方的方形 (长宽强行要求一致)</font><br /><font color=red>注 3：IOS PVRTC 勾选 ToNearest 同样会被强行压缩为正方形，比安卓平台变形会更大 (当长宽差距过大 ToNearest 也会失败)</font><br /><font color=red>注 4：勾选 ToNearest 时，缩放算法可以选 Bilinear ，个人对比后觉得这个细节明显更好点，默认的 Mitchell 更糊。</font></li></ul><p>另外，在实在无法启用 ASTC，但是又想减少包体大小的情况，可以考虑使用 ETC Crunched (有损压缩) 模式，该模式增加部分解压 CPU 消耗，以时间换存储空间，且对于运行时内存使用量没有影响 (在<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9xdWVzdGlvbnMtYWJvdXQtY29tcHJlc3Npb24tZm9ybWF0cy1ldGMyLWNydW5jaC1ldGMuNTExNTYwLw==">加载时被解压缩</span>，官方称 解压缩速度非常快)。<br />(由于压缩率很高，文件大小减少，变相减少了 IO，对整体加载时间的影响或许不会太大？)<br /><font color=red>注 1：ETC Crunched 无法再被 AssetBundle 进一步压缩</font><br /><font color=red>注 2：ETC Crunched 压缩比非常高，经过测试可能比 ASTC12x12 都小</font><br /><font color=red>注 3：实测 ETC2 Crunched 100% 质量也比普通 ETC2 更糊一些</font></p><ul><li>部分无法压缩的 NPOT 图片，勾选 ToNearest 会导致效果出现问题，或者使用的不规则图片然后调用了 SetNativeSize 的情况 (一般出现于老项目，比如说我们汉室复兴)，也可以采取使用 RGB16 或 RGBA16 的格式，比 32 位减少一半大小。<br /><font color=red>注：优化老项目时 (例如我们的项目)，对于设置 ETC2 和 RGBA16 时可以评估考虑两者具体占用大小、效果。</font>例如带透明通道 RGBA16 某些大图可能会会产生『条纹』。部分情况 (RGBA) 下 ToNearest ETC2 (8bit） 占用比 RGBA16 还要高 (512x512x8&gt;300x300x16)，强行要求方形的 PVRTC (4bit) 极端情况下可能也有类似问题 (512x512x4&gt;400x100x16)。可以写个工具计算两者哪个更划算再进行设置。</li></ul><p>其它还需要注意的是官方对平台不支持纹理的说明：</p><blockquote><p>当 Unity 加载的纹理具有设备不支持的压缩格式时，它会将纹理解压缩为该平台的默认未压缩格式，并将未压缩副本与原始压缩纹理一起存储在内存中。这会增加纹理加载时间并使用额外的内存。当 Unity 加载的纹理具有设备支持的压缩格式时，GPU 可以使用该数据而无需任何转换。</p></blockquote><p>最后：<br />因为 ETC 不支持 Alpha，一些老项目会出现单独分离透明通道的做法。<br />虽然 ASTC 已经不强行要求 2N 次方了，不过 POT 最好也让美术遵守一下，对性能有一定好处，<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM3NjkyMTUzNi9hbnN3ZXIvMTA2MzI3MjMzNg==">参考</span>。</p><h2 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h2><p>既然 ASTC 会根据 Alpha 自动计算压缩效果，Unity (2021.3.6f1) 为安卓平台提供的 ASTC 选项也是合并在一块的，为什么 IOS 平台又是分开设置的了？</p><blockquote><p>注：Unity2018.4.36f1 安卓也是分开的，分为 ASTC RGB 和 ASTC RGBA，推测高版本 Unity 安卓平台增加了 ASTC HDR 模式后，因为设置量太多而合并？</p></blockquote><p>参考文章：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNTg3NDAyNDk=">ASTC 纹理压缩格式详解</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMjEuMS9NYW51YWwvdGV4dHVyZS1jb21wcmVzc2lvbi1mb3JtYXRzLmh0bWw=">texture-compression-formats</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMjEuMS9NYW51YWwvY2xhc3MtVGV4dHVyZUltcG9ydGVyT3ZlcnJpZGUuaHRtbA==">class-TextureImporterOverride</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在今年 10 月份这次评审的时候，有问到图片设置相关的内容，当时感觉也是没回答多好。&lt;/p&gt;
&lt;p&gt;例如，ETC1 与 ETC2 相比有什么差别？&lt;/p&gt;
&lt;p&gt;回</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="资源设置" scheme="https://cwhisme.github.io/categories/Unity3D/%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://cwhisme.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于纪元项目Demo</title>
    <link href="https://cwhisme.github.io/2022/09/30/%E5%85%B3%E4%BA%8E%E7%BA%AA%E5%85%83%E9%A1%B9%E7%9B%AEDemo/"/>
    <id>https://cwhisme.github.io/2022/09/30/%E5%85%B3%E4%BA%8E%E7%BA%AA%E5%85%83%E9%A1%B9%E7%9B%AEDemo/</id>
    <published>2022-09-29T16:00:00.000Z</published>
    <updated>2022-12-22T03:29:48.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>这是以前制作人还在的时候，发起的一个 Demo，不过由于没有最终定性，因此只是让我在空余时间搞一搞。</p><p>游戏背景之类这里就不做介绍了。</p><p>这个 Demo 主要实现有：</p><ol><li><p>利用腾讯地图 SDK 结合，实现定位 + 地图手动移动功能:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sYnMucXEuY29tL21vYmlsZS91bml0eUdlby91bml0eUdlb0d1aWRlL3VuaXR5R2VvT3ZlcnZpZXc=">TencentLocationSdk (定位)</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sYnMucXEuY29tL21vYmlsZS91bml0eVNkay91bml0eVNka0d1aWRlL3VuaXR5T3ZlcnZpZXc=">TencentMapSdk (地图)</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sYnMucXEuY29tL3NlcnZpY2Uvd2ViU2VydmljZS93ZWJTZXJ2aWNlR3VpZGUvd2ViU2VydmljZU92ZXJ2aWV3">WebService API (路径信息)</span></li></ul></li><li><p>同时整合了汉室复兴的战斗系统逻辑层，并修改为实时操纵移动、战斗，嵌入新的表现层</p></li><li><p>一套简单的 UI 管理 (由于只是 Demo，因此并未采用平移汉室复兴的 UI 框架，自己实现了一个以栈结构为基础的简单 UI 管理结构)</p></li></ol><h2 id="效果"><a class="anchor" href="#效果">#</a> 效果</h2><p>地图：</p><p><img data-src="/blogimages/2022/2022-09-30/m_3638219618620ffbee8bee495860613a_r.gif" alt="地图" /></p><p>信息：</p><p><img data-src="/blogimages/2022/2022-09-30/m_f2ed7a226ee4957d7f0b6983aeda3df0_r.gif" alt="" /></p><p>信息上，复用了汉室复兴的配置表，这儿只是简单把所有道具都放了一个在包裹中。</p><p><img data-src="/blogimages/2022/2022-09-30/m_d6d6172695a9dfa7e8bed36f3ec5dc4c_r.gif" alt="" /></p><p>战斗与之前不一样的主要是可以允许玩家手动移动、点选目标等，对于这种离线帧同步的战斗模式，所有玩家操作命令都必须作记录，以便后续 WebServer 搭建好了，可以与以前一样进行验算。</p><p>这里直接将这些项目作为外部操作命令新增，由于玩家可以不断点击，如果优化指令数量 (因为一场战斗最多会有有 5400 帧 [即 3 分钟])，可以通过增加移动间隔、压缩同类型指令进行，不过这里只是前期 Demo，因此暂未实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;这是以前制作人还在的时候，发起的一个 Demo，不过由于没有最终定性，因此只是让我在空余时间搞一搞。&lt;/p&gt;
&lt;p&gt;游戏背景之类这里就不做介绍了。&lt;/p&gt;
&lt;p&gt;这</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="Demo" scheme="https://cwhisme.github.io/categories/Unity3D/Demo/"/>
    
    
    <category term="Demo" scheme="https://cwhisme.github.io/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>解决守望项目刘海屏真机白屏问题记录</title>
    <link href="https://cwhisme.github.io/2022/09/28/%E8%A7%A3%E5%86%B3%E5%AE%88%E6%9C%9B%E9%A1%B9%E7%9B%AE%E5%88%98%E6%B5%B7%E5%B1%8F%E7%9C%9F%E6%9C%BA%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://cwhisme.github.io/2022/09/28/%E8%A7%A3%E5%86%B3%E5%AE%88%E6%9C%9B%E9%A1%B9%E7%9B%AE%E5%88%98%E6%B5%B7%E5%B1%8F%E7%9C%9F%E6%9C%BA%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-27T16:00:00.000Z</published>
    <updated>2022-12-22T03:29:48.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p><strong>注：该问题可能仅适用于项目，或者公司该项目衍生版本 (该是没有了)</strong></p><p>在给对面出了新包之后，由于我方测试都只有低端机，连刘海都没有，因此没有测出该问题。</p><p>后续由运营同步过来，显示效果如下：</p><p><img data-src="/blogimages/2022/2022-09-28/m_a67c42c71cc70838d1f8a1081d9ec448_r.png" alt="" /></p><p>描述的服务器问题可以忽略，那个是因为后台没开外网测试服导致。</p><p>然后我就看了下以前<font color=red>上一个项目组</font>出给对面的白包效果：</p><p><img data-src="/blogimages/2022/2022-09-28/m_b8f77ca2faa524d65d5da4d97b76443e_r.png" alt="" /></p><p>这旧版本的刘海更大了！所以还是感觉新版如果把刘海也渲染进去，表现效果会更好一点，稍微查了一下，就得知刘海没有被渲染的原因是因为出包工程 Unity2018.4.36 这个版本没勾 『Render outside safe area』选项导致的，于是勾上重新出包。</p><h2 id="问题"><a class="anchor" href="#问题">#</a> 问题</h2><p>这时候真的问题就来了：</p><p>在我自己的刘海屏 (红米 K50G) 真机安装后，会正常执行初始的 Loading 界面，后续立刻白屏！</p><p>表现效果如下：</p><p><img data-src="/blogimages/2022/2022-09-28/m_cf7b1733e5867c699e36082f5a3cb43f_r.gif" alt="" /></p><p>看着这个表现，最开始怀疑过是 Unity 的问题：因为我拿到项目时，版本虽然是 Unity2018，但并不是 Unity2018 最新版本，后来给它升级到 Unity2018.4.36 了，就猜测是不是 Unity 出啥事了？</p><p>项目设置如下：</p><p><img data-src="/blogimages/2022/2022-09-28/m_c53c356eab861de7f5b7b9a6ba011e48_r.png" alt="" /></p><p>2018.4 官方说明文档：</p><p><img data-src="/blogimages/2022/2022-09-28/m_05c3ec910acdc69b5899d43ad7cd8e72_r.png" alt="" /></p><p>如上图所示，查询文档显示 Unity2018 文档上并没有 Render outside safe area 这选项，跟项目实际设置表现并不一致，该选项是否是 Unity2018 后续才更新上去的？导致出现了什么兼容性问题。</p><p>不过后边根据表现情况一想，也不对。</p><p>毕竟最开始 Loading 都能正常显示出来，那么说明 Render outside safe area 并没有让我们的真机整体的渲染出现问题。</p><p>根据发生情况地点：初始 Loading 界面完毕，UI 框架接管之后 —— 问题恐怕只可能出现在我们自己的 UI 框架作适配性的地方。</p><p>还有一个信息可以使得 100% 确定是项目的适配而非 Unity 的问题：</p><p>—— 可以打开日志界面！</p><p><img data-src="/blogimages/2022/2022-09-28/m_68a9dc72678952c375016e2d306ca555_r.png" alt="" /></p><p>日志界面是可以正常显示的，因此出问题的只可能是项目 AorUISystem 中适配问题。</p><h2 id="尝试解决"><a class="anchor" href="#尝试解决">#</a> 尝试解决</h2><p>对于项目中适配的地方，根据代码引用一步一步查询，大概可以找出两个可能会比较影响点：</p><ul><li>Main.cs 中 AdapteFullScreen () 判断刘海方法</li><li>AorUIManager.cs 中 ScaleMode-&gt;changeScaleMode ()-&gt;updateStageSize ()</li></ul><p>开始虽然基本可以定位是这两块的问题，但是并没有更详细的头绪。</p><p>并猜测：</p><ul><li>是否是 Stage 缩放大小被错误设置为 0？因为 Stage scale 其实很小，而且根据分辨率不同还可能更小<br /><img data-src="/blogimages/2022/2022-09-28/m_debc641d73c783234617782f0234fb8f_r.png" alt="" /></li><li>是否由于读取到刘海，Stage 发生了严重的错误偏移？</li><li>是否是 MainLayer 层级有遮挡？</li></ul><h4 id="出包测试"><a class="anchor" href="#出包测试">#</a> 出包测试</h4><p>为了对上述猜测进验证，且由于是真机、特定机型问题，为了测试，基本上都是改一次代码，出一个包，导致时间消耗更加拉长。</p><h4 id="injectfix-远程热更测试"><a class="anchor" href="#injectfix-远程热更测试">#</a> Injectfix 远程热更测试</h4><p>后来想着这样可不是办法，于是我把 Injectfix 远程热更调试功能给它整合了进去，然后才变得方便起来。</p><p>找到游戏点击屏幕处理方法，直接热更输出需要的详细信息，并操作对猜测进试验：</p><p><img data-src="/blogimages/2022/2022-09-28/m_a2038f3d25baa22c262b0fadcf7b7d68_r.png" alt="" /></p><p>Loading 结束，进入正式 UI 管理后，其基本结构如下：</p><p><img data-src="/blogimages/2022/2022-09-28/m_4affba82fd8aabee3e1d63ae7452a1d6_r.png" alt="" /></p><p>尝试使用排除法，操作结果反馈如下：</p><ul><li>隐藏 MainLayer：无变化</li><li>隐藏 AorUIStage# 所有子节点：无变化</li><li>隐藏 AorUIStage#：无变化</li><li>隐藏 AorUICanvas#：有明显变化，白屏变成黑屏</li><li>隐藏 AorUICanvas# 所有子节点：同隐藏父类，有明显变化，白屏变成黑屏</li><li>在 AorUICanvas#、AorUIStage# 子节点动态创建色块，无变化</li><li>隐藏 AorUICanvas# 所有子节点，创建动态色块，能看到色块显示</li></ul><h2 id="原因"><a class="anchor" href="#原因">#</a> 原因</h2><p>结合上面一通测试结果，以及输出信息。</p><p>可以基本确认，是 AorUICanvas# 下的某个子节点出了问题。</p><p>于是尝试：</p><ul><li>隐藏 AorUICanvas# 除 AorUIStage# 以外的所有子节点，登录界面正常展示！</li></ul><p>在 AorUIStage# 层级更高的节点中，ipx 这个节点就比较可疑，再次进行测试，仅隐藏 ipx，登录界面也正常显示，白屏消失。</p><p>此时基本可以定位问题原因。</p><p>于是查看代码，我很快在 AdapteFullScreen () 方法中发现了这么些处理方法：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Application<span class="token punctuation">.</span>platform <span class="token operator">==</span> RuntimePlatform<span class="token punctuation">.</span>Android <span class="token operator">&amp;&amp;</span> Screen<span class="token punctuation">.</span>width <span class="token operator">==</span> <span class="token number">2400</span> <span class="token operator">&amp;&amp;</span> Screen<span class="token punctuation">.</span>height <span class="token operator">==</span> <span class="token number">1080</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>isTest <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 关键就这里！！！！！！</span></pre></td></tr><tr><td data-num="4"></td><td><pre>YKApplication<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>IsIphoneX <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>CommonModel<span class="token punctuation">.</span>Inst<span class="token punctuation">.</span>IsLandscapeLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>mIsFullAdapter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//===== 代码省略 =======</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 编译器测试</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>isTest <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">==</span> uiManger<span class="token punctuation">.</span>mCanvasT<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"ipx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 创建 ipx 组件，该组件模拟 iphone 边框进显示</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="/blogimages/2022/2022-09-28/m_39da789ee4d022ce3dac2872115e7849_r.png" alt="" /></p><p>大家看到了吗？</p><h5 id="editoronly"><a class="anchor" href="#editoronly">#</a> EditorOnly！</h5><p>也就是说，这张图片根本不会打进真机包里 —— 然而代码却在实例化它？！</p><p>导致图片丢失，直接整个屏幕就是一块白色覆盖。</p><p>问题就是这样：代码执行了不应该真机生效的代码，错误地创建了一个根本不应该创建的东西，导致出现了这么一个很难让人一眼看出问题的问题。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>问题是解决了，但是花了一天多时间调试。</p><p>造成的根本原因是，<font color=red>项目代码里面直接强行判断若『当前为安卓平台，且分辨率为 2400x1080』，就会实例化测试边框，看起来完全是为了测试用 (特别是注释都写了编辑器测试的)，且图片又是被标记为 EditorOnly —— 而真机执行，测试边框的图通常情况下根本不会打出去，那就坏了！</font><br />注：我拿到项目这张图片就是 EditorOnly，代码也是这个样子，出包工程也并不存在 Resources 中图片的软链接</p><p>看注释还写着『编译器测试』，测试代码，如果只是想测试生效，就不应该这样加入正常代码流程，再不济用完也应该注释吧？或者再加个编辑器生效判断也好。</p><p>折腾这么大一通，倒也也不算没有收获：为守望项目整合了远程代码热更调试工具用，并详细测了一波热更代码，拿到守望项目代码之后，热更结构我也是做过改动的，因此测试一波也是也有必要。</p><h3 id="另一种解决方案"><a class="anchor" href="#另一种解决方案">#</a> 另一种解决方案</h3><p>但实际上还有另一个方法，要是使用的话，一开始就能很快定位并解决问题：</p><h4 id="framedebugger"><a class="anchor" href="#framedebugger">#</a> FrameDebugger</h4><p>虽然 Unity2018 的 FrameDebugger 连接真机并不怎么好用，渲染对象跟随真机老是闪来闪去。</p><p>不过使用 FrameDebugger 连接真机后，还是可以大概查询渲染目标，可以清晰看出来：原本登录界面是正常渲染了的，只是登录界面上更上一层，被白色的东西直接盖了个彻彻底底。</p><p>进而定位渲染没问题，而是覆盖问题导致。</p><p>可惜我也是在查出问题后，才想起用这个连接真机试试的，要不然肯定会少许多麻烦了。</p><p>除此之外 Renderdoc 应该也可以。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注：该问题可能仅适用于项目，或者公司该项目衍生版本 (该是没有了)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在给对面出了新包之后，由于我方测试都只有低端机，</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="问题" scheme="https://cwhisme.github.io/categories/Unity3D/%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="问题记录" scheme="https://cwhisme.github.io/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>关于从Unity2021降级为Unity2018的问题</title>
    <link href="https://cwhisme.github.io/2022/08/31/%E5%85%B3%E4%BA%8E%E4%BB%8EUnity2021%E9%99%8D%E7%BA%A7%E4%B8%BAUnity2018%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cwhisme.github.io/2022/08/31/%E5%85%B3%E4%BA%8E%E4%BB%8EUnity2021%E9%99%8D%E7%BA%A7%E4%B8%BAUnity2018%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-30T16:00:00.000Z</published>
    <updated>2022-12-22T03:29:48.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前不是有写过 『关于汉室复兴升级 Unity2021 的问题记录』 这文章么，当时是为了将项目越南版本从 Unity2017 升级为 Unity2021。</p><p>主要考虑有三点：</p><ul><li>越南版本拖了一年多不止，新版可以拉开与其它版本差异，除此之外增加了一些越南特有优化，没准有助于提审</li><li>越南还未上线，先行升级可以先看相关兼容性</li><li>Hybridclr 若可以使用，只要提审成功一次，就可以像纯 xlua 项目一样更新，有助于运营</li></ul><p>越南还未上线，升级 Unity2021 之后测试也测了两个月了，包括真机我们这边和对面运营都跑过不少次，该有的问题页改得差不多了，目前唯一的问题就是还没有大规模地测试兼容性。</p><p>不过对于兼容性这一点，我也反复跟我们这边运营对过，后期会上 TestBird (真的能过审的话)。</p><p>不过本周周会的时候，前几次主程例会都提到过升级这个事，这一次上级反对意见比较大，大概就是得不求有功，但求无过。于是只能再作降级操作，后续研究计划也暂且放弃了。</p><p>虽然从低版本升级上去资源没有太大问题，但是反而降级操作，会造成大量资源问题，这里特记录一下。</p><p>目前发现主要有几个点：</p><ul><li>分散后的 DLL 重替换，Unity2018 安装目录下也有分散 DLL，直接替换即可</li><li>场景 Unity 组件丢失，例如挂载的 UGUI 相关 StandaloneInputModle、EventSystem</li><li>图集引用错乱，降级后，原有 Prefab 引用的图集中图片全乱了</li><li>所有在 Unity2021 修改过的 Prefab 都无法使用，Unity 组件，主要是 UGUI 出现 Missing</li></ul><p>后续再一一记录处理方式。</p><h2 id="场景unity组件丢失"><a class="anchor" href="#场景unity组件丢失">#</a> 场景 Unity 组件丢失</h2><p><img data-src="/blogimages/2022/2022-08-31/m_a40f0219e30bf832243a14d9802ac50e_r.png" alt="" /></p><p>这个救不了，看修改记录引用 GUID 都有变化，而且降级之后 Unity 完全不会处理这一块，已被自动升级修改的也不会再自动改回去，Missing 了也不见怪，只能还原到升级之前。</p><h2 id="图集引用错乱"><a class="anchor" href="#图集引用错乱">#</a> 图集引用错乱</h2><p><img data-src="/blogimages/2022/2022-08-31/m_1f4e876c1f2f9779eb9c917028000d99_r.png" alt="" /></p><p>如上图所示，真的很恐怖，查看相关组件，部分为 Missing，部分为错误的精灵引用。</p><p><img data-src="/blogimages/2022/2022-08-31/m_04ade9c242f57b10fd6630e40b23c9fb_r.png" alt="" /></p><p>经对比升级与现在降级后的修改记录，可以明显发现问题：ID 对应的精灵名字已经发生了变化</p><p>这个同样救不了了，需要还原。</p><p>此时必须先关闭 Unity，然后 Revert 本地所有修改 (因为使用 Unity2018 打开已经导致自动错误修改了大量 meta 了)，然后再针对之前升级提交记录进行还原。</p><p>在 SVN 上找到上次的提交记录，选择 『Revert changes from this version』，表示还原所有自此次提交的修改：</p><p><img data-src="/blogimages/2022/2022-08-31/m_f5e7234ddc313e2baff6c3a366cb9f56_r.png" alt="" /></p><p>还原时会有大量冲突，由于这次提交还原的主要是 meta 文件，因此只需要选择 Accept incomming 即可，meta 文件会被重新修改。</p><p>当然实际上没这么简单就是了，在资源目录总提交上，有些冲突 (例如 DLL) 会导致还原直接半途终止，因此最保险的方式还是从子目录开始，挨个检查是否涉及到需要还原的资源再进行还原。</p><p>图集还原之后，再将所有图集都重新打一遍就可以了。</p><blockquote><p>还好之前帮策划写过一个一键重打图集的工具！</p></blockquote><h2 id="高版本修改后的-prefab-无法使用"><a class="anchor" href="#高版本修改后的-prefab-无法使用">#</a> 高版本修改后的 Prefab 无法使用</h2><p>关于这个，拿一个 Prefab Missing 组件举例，此处为一个 Image 组件：</p><p>修改前的 Unity2017 版本：</p><p><img data-src="/blogimages/2022/2022-08-31/m_5afd85c5e555fbb8b1095b1db879c2cb_r.png" alt="" /></p><p>从数据对比上来看，其中 Missing 的组件 ID 为 114414057906683420</p><p>然后搜索并对比修改前后两个组件的差异：</p><p><img data-src="/blogimages/2022/2022-08-31/m_98e244d2128270bb09b31b0bc60e0d18_r.png" alt="" /></p><p>可以注意到，此处虽然高版本多了点东西、少了点啥，其实这些影响都不大，但是最关键的是 m_Scripts 字段 fileID、guid 全变了！</p><p>小心翼翼地手动将 fileID、guid 改回去，刷新一下：</p><p><img data-src="/blogimages/2022/2022-08-31/m_6563156f7f997661be21d505355c2c11_r.png" alt="" /></p><p>已经 Missing 的组件变成正常了！</p><p>说明导致 Missing 的影响要素确实是这个问题。</p><p>注：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0Zvcm1hdERlc2NyaXB0aW9uLmh0bWw=">官方 meta 文件描述</span></p><h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3><p>经过上述尝试，可以发现有三种可供选择的方法：</p><ol><li>碰到一个修一个，手动修改 fileID、guid<blockquote><p>这个简直就是灾难，并且会花费大量时间，或许可以给实习生练手？但是没有必要</p></blockquote></li><li>直接还原这两个月的 Prefab 修改<blockquote><p>之前针对外服写过备份修改工具，可以一键重导入之前的修改。但是这涉及到部分工具无法处理，必须手动修改的 Prefab，可能出现遗漏</p></blockquote></li><li>写个工具，直接遍历所有 Prefab，并将指定 fileID、guid 作对应替换<blockquote><p>手动改肯定不可能，不过就算写工具，也得一个个找出脚本新旧对应的 fileID、guid ，并改回去，但相比前两种方法，已经算是可以接受的程度了。</p></blockquote></li></ol><p>所以经过考虑，采用了第三种方法，首先对两个版本的组件 fileID、guid 进行对比：</p><ul><li><h4 id="unity2018436f1"><a class="anchor" href="#unity2018436f1">#</a> Unity2018.4.36f1：</h4></li></ul><pre><code>Image：m_Script: &#123;fileID: -765806418, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;RawImage：m_Script: &#123;fileID: -98529514, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Scroll View：m_Script: &#123;fileID: 1367256648, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Scrollbar：m_Script: &#123;fileID: -2061169968, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Slider：m_Script: &#123;fileID: -113659843, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Toggle：m_Script: &#123;fileID: 2109663825, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Text：m_Script: &#123;fileID: 708705254, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Button：m_Script: &#123;fileID: 1392445389, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Dropdown：m_Script: &#123;fileID: 853051423, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;InputField：m_Script: &#123;fileID: 575553740, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;ContentSizeFilter：m_Script: &#123;fileID: 1741964061, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Mask：m_Script: &#123;fileID: -1200242548, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;GridLayoutGroup：m_Script: &#123;fileID: -2095666955, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;HorizontalLayouGroup：m_Script: &#123;fileID: -405508275, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;ToggleGroup：m_Script: &#123;fileID: -1184210157, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;CanvasScaler：m_Script: &#123;fileID: 1980459831, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;GraphicRaycaster：m_Script: &#123;fileID: 1301386320, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;Outline：m_Script: &#123;fileID: -900027084, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;EventTrigger：m_Script: &#123;fileID: -1862395651, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;LayoutElement：m_Script: &#123;fileID: 1679637790, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;VerticalLayoutGroup：m_Script: &#123;fileID: 1297475563, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;AspectRatioFitter：m_Script: &#123;fileID: -1254083943, guid: f70555f144d8491a825f0804e09c671c, type: 3&#125;</code></pre><ul><li><h4 id="unity202136f1"><a class="anchor" href="#unity202136f1">#</a> Unity2021.3.6f1：</h4></li></ul><pre><code>Image：m_Script: &#123;fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3&#125;RawImage：m_Script: &#123;fileID: 11500000, guid: 1344c3c82d62a2a41a3576d8abb8e3ea, type: 3&#125;Scroll View：m_Script: &#123;fileID: 11500000, guid: 1aa08ab6e0800fa44ae55d278d1423e3, type: 3&#125;Scrollbar：m_Script: &#123;fileID: 11500000, guid: 2a4db7a114972834c8e4117be1d82ba3, type: 3&#125;Slider：m_Script: &#123;fileID: 11500000, guid: 67db9e8f0e2ae9c40bc1e2b64352a6b4, type: 3&#125;Toggle：m_Script: &#123;fileID: 11500000, guid: 9085046f02f69544eb97fd06b6048fe2, type: 3&#125;Text (Legacy)：m_Script: &#123;fileID: 11500000, guid: 5f7201a12d95ffc409449d95f23cf332, type: 3&#125;Button (Legacy)：m_Script: &#123;fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3&#125;Dropdown (Legacy)：m_Script: &#123;fileID: 11500000, guid: 0d0b652f32a2cc243917e4028fa0f046, type: 3&#125;InputField (Legacy)：m_Script: &#123;fileID: 11500000, guid: d199490a83bb2b844b9695cbf13b01ef, type: 3&#125;ContentSizeFilter：m_Script: &#123;fileID: 11500000, guid: 3245ec927659c4140ac4f8d17403cc18, type: 3&#125;Mask：m_Script: &#123;fileID: 11500000, guid: 31a19414c41e5ae4aae2af33fee712f6, type: 3&#125;GridLayoutGroup：m_Script: &#123;fileID: 11500000, guid: 8a8695521f0d02e499659fee002a26c2, type: 3&#125;HorizontalLayouGroup：m_Script: &#123;fileID: 11500000, guid: 30649d3a9faa99c48a7b1166b86bf2a0, type: 3&#125;ToggleGroup：m_Script: &#123;fileID: 11500000, guid: 2fafe2cfe61f6974895a912c3755e8f1, type: 3&#125;CanvasScaler：m_Script: &#123;fileID: 11500000, guid: 0cd44c1031e13a943bb63640046fad76, type: 3&#125;GraphicRaycaster：m_Script: &#123;fileID: 11500000, guid: dc42784cf147c0c48a680349fa168899, type: 3&#125;Outline：m_Script: &#123;fileID: 11500000, guid: e19747de3f5aca642ab2be37e372fb86, type: 3&#125;EventTrigger：m_Script: &#123;fileID: 11500000, guid: d0b148fe25e99eb48b9724523833bab1, type: 3&#125;LayoutElement：m_Script: &#123;fileID: 11500000, guid: 306cc8c2b49d7114eaa3623786fc2126, type: 3&#125;VerticalLayoutGroup：m_Script: &#123;fileID: 11500000, guid: 59f8146938fff824cb5fd77236b75775, type: 3&#125;AspectRatioFitter：m_Script: &#123;fileID: 11500000, guid: 86710e43de46f6f4bac7c8e50813a599, type: 3&#125;</code></pre><p><img data-src="/blogimages/2022/2022-08-31/m_022757aefd54eb580eb1ec28b1416276_r.png" alt="" /></p><p><img data-src="/blogimages/2022/2022-08-31/m_672ea79241bf3928186395657de137a7_r.png" alt="" /><br />(打印是后续调试进行过好几次的查漏补缺截图，因此数量才这么少)</p><p>另外需要注意千万不好混了，有一次就是复制重复了，导致组件上的脚本是有了，但却从 VerticalLayoutGroup 变成了 LayoutElement！</p><p>主要代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">string</span></span> resDir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"Resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> prefabLists <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>resDir<span class="token punctuation">,</span> <span class="token string">"*.prefab"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> prefabLists<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> linesTemp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name"><span class="token keyword">bool</span></span> doSave<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"降级修复中……"</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$"请等待，执行进度：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i <span class="token operator">+</span> <span class="token number">1</span></span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">num</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>i <span class="token operator">/</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    doSave <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    linesTemp <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>prefabLists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> lineIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> lineIndex <span class="token operator">&lt;</span> linesTemp<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> lineIndex<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 遍历 2021 最新的 id，检测每一行是否有对应数据</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> newIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> newIndex <span class="token operator">&lt;</span> Unity2021<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> newIndex<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>linesTemp<span class="token punctuation">[</span>lineIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>Unity2021<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token comment">//2021 替换为 2018</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                linesTemp<span class="token punctuation">[</span>lineIndex<span class="token punctuation">]</span> <span class="token operator">=</span> linesTemp<span class="token punctuation">[</span>lineIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>Unity2021<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> Unity2018<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                doSave <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>doSave<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"修复对象：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">prefabLists<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllLines</span><span class="token punctuation">(</span>prefabLists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> linesTemp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>AssetDatabase<span class="token punctuation">.</span><span class="token function">SaveAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后自己跑了下，出了真机包也试了一圈没什么问题，不过后续还是需要测试重新跑一次全量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前不是有写过 『关于汉室复兴升级 Unity2021 的问题记录』 这文章么，当时是为了将项目越南版本从 Unity2017 升级为 Unity2021。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://cwhisme.github.io/categories/Unity3D/"/>
    
    <category term="问题" scheme="https://cwhisme.github.io/categories/Unity3D/%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="问题记录" scheme="https://cwhisme.github.io/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
