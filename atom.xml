<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CWHISME</title>
  
  <subtitle>人不能没有梦想，也要有足够的敬畏</subtitle>
  <link href="https://wangjiaying.top/atom.xml" rel="self"/>
  
  <link href="https://wangjiaying.top/"/>
  <updated>2023-04-29T14:11:48.359Z</updated>
  <id>https://wangjiaying.top/</id>
  
  <author>
    <name>WangJiaYing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#与XLua交互原理研究</title>
    <link href="https://wangjiaying.top/2023/04/27/CS%E4%B8%8EXLua%E4%BA%A4%E4%BA%92%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/"/>
    <id>https://wangjiaying.top/2023/04/27/CS%E4%B8%8EXLua%E4%BA%A4%E4%BA%92%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/</id>
    <published>2023-04-27T08:40:38.000Z</published>
    <updated>2023-04-29T14:11:48.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>很久以前也有拿着 XLua C# 这边的源码看过，网上也找过资料... 就是搞不大清楚。</p><p>可惜没人提醒，后来才想明白，直接硬看 C# 这边的源码是不行的，想明白 C# 与 XLua 的交互原理，至少得先了解 C/C++ 与 Lua 的交互原理</p><p>—— 毕竟 C# 与 XLua 交互，依然是基于中间的 C API，了解了那边的概念，再看 C# 与 XLua 交互原理，才好理解。</p><h1 id="基本介绍"><a class="anchor" href="#基本介绍">#</a> 基本介绍</h1><ul><li>Lua 虚拟机由 C/C++ 实现，因此它可以直接与宿主进行通信</li><li>C# 则可以依靠 C API 通过 P/Invoke 方式调用 Lua 虚拟机函数</li><li>即 C# 可以借助 C/C++ 来与 Lua 进行数据通信</li><li>XLua 相关 P/Invoke 调用接口位于  <code>LuaDLL.cs</code>  文件</li></ul><h2 id="lua-和-cc-的数据交互"><a class="anchor" href="#lua-和-cc-的数据交互">#</a> Lua 和 C/C++ 的数据交互</h2><ul><li>基础：Lua 提供的一个虚拟栈</li><li>两者所有类型的数据交换都通过这个栈完成</li><li>Lua 提供了两种索引方式操作虚拟栈<ul><li>正数索引：1 表示栈底</li><li>反向索引：-1 表示栈顶</li></ul></li><li>例如：<ul><li><table><thead><tr><th style="text-align:center">正向索引</th><th style="text-align:center">反向索引</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">-2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">-3</td></tr></tbody></table></li></ul></li></ul><h2 id="lua-调用-cc-函数"><a class="anchor" href="#lua-调用-cc-函数">#</a> Lua 调用 C/C++ 函数</h2><ul><li>将 C++ 的函数包装成可供 Lua 调用的格式<ul><li>接收一个 Lua 状态机指针 ( <code>IntPtr</code> ) 的静态方法，该方法返回值为 int，表示方法返回值数量</li></ul></li><li>在 Lua 环境注册包装好的函数</li><li>Lua 调用<ul><li>首先通过  <code>lua_gettop</code>  获取 Lua 参数数量 (因为可能有重载)</li><li>继续通过正数索引从  <code>1</code>  开始在 Lua 栈上获取具体参数值</li><li>执行实际函数功能</li><li>将返回值压栈</li><li>包装函数的返回值为 int，表示返回值数量</li></ul></li></ul><h2 id="cc-调用-lua-函数"><a class="anchor" href="#cc-调用-lua-函数">#</a> C/C++ 调用 Lua 函数</h2><ul><li>使用  <code>lua_getglobal(xlua_getglobal)</code>  来获取函数，然后将其压入栈</li><li>若函数有参则依次将函数的参数也压入栈</li><li>调用  <code>lua_pcall</code>  让虚拟机执行函数<ul><li>参数分别为：<ul><li>虚拟机指针</li><li>参数个数</li><li>返回值个数</li><li>错误处理函数，0 表示无，表示错误处理函数在栈中的索引</li></ul></li><li>如果运行出错， <code>lua_pcall</code>  会返回一个非零的结果</li><li>若调用完毕没有出错，则可以通过 Lua 虚拟栈从中取出调用结果</li></ul></li></ul><h1 id="基元类型传递"><a class="anchor" href="#基元类型传递">#</a> 基元类型传递</h1><p>对于 bool、int 这样简单的值类型可以直接通过 C API 传递，见 LuaDLL.cs</p><ul><li>xlua_pushinteger</li><li>lua_pushboolean</li><li>lua_pushnumber</li><li>xlua_pushuint</li></ul><h1 id="对象类型传递"><a class="anchor" href="#对象类型传递">#</a> 对象类型传递</h1><h2 id="基本流程"><a class="anchor" href="#基本流程">#</a> 基本流程</h2><p>C# 与 Lua 交互依然还是依靠 C API 通过 P/Invoke 进行，为了正确的和 Lua 通讯，C# 与 Lua 通过相互保存的索引保持引用</p><p>对于 C# 对象，Lua 这边通过 Table 模拟，C# 对象在 Lua 对应的就是一个  <code>userdata</code> ，利用对象索引保持与 C# 对象的联系</p><ul><li>传递到 Lua 的只是 C# 对象的一个索引，并需要注册 C# 类型信息到 Lua 以便使用</li><li>其中，对象的基本信息通过  <code>XLua_Gen_Initer_Register__</code>  中初始化通过调用  <code>ObjectTranslator.DelayWrapLoader</code>  注册到 Lua 侧</li><li><code>userdata</code> ：特指 C# 对象在 Lua 这边对应的代理 userdata<ul><li>为  <code>userdata</code>  设置的元表表示的实际是对象的类型信息，可以称为 “代理”</li></ul></li><li>在将 C# 对象传递到 Lua 以后，还需要告知 Lua 该对象的类型信息，比如对象类型有哪些成员方法，属性或是静态方法等。将这些都注册到 Lua 后，Lua 才能正确的调用</li><li>对于  <code>userdata</code>  转  <code>index</code> ，主要由两个 C API 提供： <code>LuaAPI.xlua_tocsobj_safe</code> （实际上为 C API： <code>lua_touserdata</code> ）、 <code>LuaAPI.xlua_gettypeid</code> （实际上为 C API  <code>lua_getmetatable</code> ）从 Lua 虚拟栈取值<ul><li>注：取出的是代理对象在 C# 侧的 ObjectPool 实例对象数组索引</li></ul></li></ul><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>LUA_API <span class="token keyword">int</span> <span class="token function">xlua_tocsobj_safe</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span>udata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">lua_touserdata</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>udata <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_getmetatable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token function">lua_pushlightuserdata</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token function">lua_rawget</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">lua_isnil</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token function">lua_pop</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">return</span> <span class="token operator">*</span>udata<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token function">lua_pop</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>LUA_API <span class="token keyword">int</span> <span class="token function">xlua_tocsobj_fast</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span>udata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">lua_touserdata</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>udata<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">*</span>udata<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>LUA_API <span class="token keyword">int</span> <span class="token function">xlua_gettypeid</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">int</span> type_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">==</span> LUA_TUSERDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_getmetatable</span> <span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token function">lua_rawgeti</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> LUA_TNUMBER<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                type_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">lua_tointeger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> type_id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>类型的元表数据是通过  <code>ObjectTranslator</code>   <code>getTypeId</code>  函数调用之前注册的  <code>delayWrap</code>  回调生成并注册到 Lua 侧的 (或通过反射生成)<br /> 主要的两个方法代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ObjectTranslator.cs</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getTypeId</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> is_first<span class="token punctuation">,</span> <span class="token class-name">LOGLEVEL</span> log_level <span class="token operator">=</span> LOGLEVEL<span class="token punctuation">.</span>WARN<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> type_id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    is_first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeIdMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">out</span> type_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// no reference</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>IsArray<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>common_array_meta <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Fatal Exception! Array Metatable not inited!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> common_array_meta<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MulticastDelegate</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>common_delegate_meta <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Fatal Exception! Delegate Metatable not inited!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token function">TryDelayWrapLoader</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> common_delegate_meta<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        is_first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token class-name">Type</span> alias_type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        aliasCfg<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">out</span> alias_type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_getmetatable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> alias_type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> type<span class="token punctuation">.</span>FullName <span class="token punctuation">:</span> alias_type<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_isnil</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//no meta yet, try to use reflection meta</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TryDelayWrapLoader</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> alias_type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> type <span class="token punctuation">:</span> alias_type<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_getmetatable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> alias_type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> type<span class="token punctuation">.</span>FullName <span class="token punctuation">:</span> alias_type<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Fatal: can not load metatable of type:"</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token comment">// 循环依赖，自身依赖自己的 class，比如有个自身类型的静态 readonly 对象。</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeIdMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">out</span> type_id<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">IsEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__band"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstdcallcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> metaFunctions<span class="token punctuation">.</span>EnumAndMeta<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__bor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstdcallcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> metaFunctions<span class="token punctuation">.</span>EnumOrMeta<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IEnumerable</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__pairs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_getref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> enumerable_pairs_func<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushvalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            type_id <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_ref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LuaIndexes<span class="token punctuation">.</span>LUA_REGISTRYINDEX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type_id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_rawseti</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">IsValueType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                typeMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type_id<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>            typeIdMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> type_id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">return</span> type_id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment">// 已加载类型列表</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">></span></span> loaded_types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryDelayWrapLoader</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded_types<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    loaded_types<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_newmetatable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先建一个 metatable，因为加载过程可能会需要用到</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token class-name">Action<span class="token punctuation">&lt;</span>RealStatePtr<span class="token punctuation">></span></span> loader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> top <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">lua_gettop</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delayWrap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">out</span> loader<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        delayWrap<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token function">loader</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> !GEN_CODE_MINIMIZE &amp;&amp; !ENABLE_IL2CPP &amp;&amp; (UNITY_EDITOR || XLUA_GENERAL) &amp;&amp; !FORCE_REFLECTION &amp;&amp; !NET_STANDARD_2_0</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DelegateBridge<span class="token punctuation">.</span>Gen_Flag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">IsEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Delegate</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Utils<span class="token punctuation">.</span><span class="token function">IsPublic</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            <span class="token class-name">Type</span> wrap <span class="token operator">=</span> ce<span class="token punctuation">.</span><span class="token function">EmitTypeWrap</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> wrap<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"__Register"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Static <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Public<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> L <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            Utils<span class="token punctuation">.</span><span class="token function">ReflectionWrap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">,</span> privateAccessibleFlags<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="109"></td><td><pre>        Utils<span class="token punctuation">.</span><span class="token function">ReflectionWrap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">,</span> privateAccessibleFlags<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> NOT_GEN_WARNING</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Delegate</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> !</span><span class="token return-type class-name">XLUA_GENERAL</span></pre></td></tr><tr><td data-num="115"></td><td><pre>            UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; not gen, using reflection instead"</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="117"></td><td><pre>            System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Warning: &#123;0&#125; not gen, using reflection instead"</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">lua_gettop</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"top change, before:"</span> <span class="token operator">+</span> top <span class="token operator">+</span> <span class="token string">", after:"</span> <span class="token operator">+</span> LuaAPI<span class="token punctuation">.</span><span class="token function">lua_gettop</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> nested_type <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetNestedTypes</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Public<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="128"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nested_type<span class="token punctuation">.</span><span class="token function">IsGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="130"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>        <span class="token function">GetTypeId</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> nested_type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>    </pre></td></tr><tr><td data-num="136"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol><li>先判断是否生成过对应元数据，若存在这直接返回  <code>typeIdMap</code>  字典中 type 对应的  <code>type_id</code></li></ol><ul><li>注：数组是单独处理的， <code>LuaEnv</code>  构造函数最后调用的注册</li></ul><ol start="2"><li>若没有则先判断是否有生成代码，没有则反射 ( <code>ReflectionWrap</code> ) 填充元表</li></ol><ul><li>反射时注册的 __call 元方法是个公共的  <code>ObjectTranslator.methodWrapsCache.GetConstructorWrap</code>  反射创建对象的操作回调</li><li>反射创建的对象通过  <code>PushAny</code>  加入  <code>ObjectPool</code> （这里会判断实际类型去调用合适的添加操作，例如字符串直接调用  <code>lua_pushstring</code> ，基元类型调用  <code>pushPrimitive</code>  等）</li><li>注：该方法会递归调用，若对象类型中有嵌套的公共类型，则递归注册</li></ul><p>那么，Lua 如何知道调用呢？</p><ul><li>可以注意到  <code>Lua</code>  调用  <code>C#</code>  都是通过  <code>CS.XXX</code>  的方式进行的（因为我自己项目不是 XLua 项目，所以是看示例那些看的）</li><li>而在  <code>LuaEnv.cs</code>  的构造方法中，会有  <code>AddBuildin(&quot;CS&quot;, StaticLuaCallbacks.LoadCS)</code>  的注册</li><li>我怀疑这个是否就是将『CS』 注册为 Lua 侧的一个空表以当做命名空间？</li><li>当  <code>Lua</code>  使用  <code>CS.XXX</code>  的时候，就会到这边来查询</li></ul><h2 id="对象实例成员注册"><a class="anchor" href="#对象实例成员注册">#</a> 对象实例成员注册</h2><p>生成代码中，通过  <code>Utils.BeginObjectRegister</code>  注册对象基本信息至 Lua 元表中</p><ul><li><p>如方法数量、getter_count、setter_count</p><ul><li>注：指实例方法及实例字段，静态变量和方法不在此列</li><li>注：一个实例字段会被分别生成为  getter 与 setter 的静态 wrap 方法</li></ul></li><li><p>以及比较重要的  <code>__gc</code>  元方法等</p><ul><li>如果给对象设置了 __gc 元方法，那么当对象被 gc 回收时将会调用它的 __gc 元方法</li><li>C# 注册主要是为了当 Lua 回收 Lua 侧对应的 C# Table 对象后，同时可以允许回收 C# 这边的实际对象 (移除 C# 侧的缓存引用)</li></ul></li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Utils.cs</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//BeginObjectRegister 注册实例对象数据方法</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>translator<span class="token punctuation">.</span><span class="token function">HasCustomOp</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">decimal</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstdcallcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> translator<span class="token punctuation">.</span>metaFunctions<span class="token punctuation">.</span>GcMeta<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//StaticLuaCallbacks.cs </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">//Lua 侧代理对象被回收后执行的回调</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MonoPInvokeCallback</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">LuaGC</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">try</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> udata <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_tocsobj_safe</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>udata <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token class-name">ObjectTranslator</span> translator <span class="token operator">=</span> ObjectTranslatorPool<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span> translator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                translator<span class="token punctuation">.</span><span class="token function">collectObject</span><span class="token punctuation">(</span>udata<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"c# exception in LuaGC:"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后注册实例字段、方法</p><ul><li>多个重载方法会被注册为一个静态 wrap 函数<br />调用  <code>Utils.EndObjectRegister</code>  完成实例字段、方法注册</li></ul><h2 id="对象静态成员注册"><a class="anchor" href="#对象静态成员注册">#</a> 对象静态成员注册</h2><p>调用  <code>Utils.BeginClassRegister</code>  注册创建该类型实例的回调及静态字段访问方法 static_getter_count、static_setter_count 数量</p><ul><li>若传递了创建实例类型的回调，则会注册到 Lua 的  <code>__call</code>  元方法中 (当 table 名字做为函数名字的形式被调用的时候，会调用 __call 函数)</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Utils.cs</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//BeginClassRegister 注册静态数据时传递，注册创建对象实例回调</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>creator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token preprocessor property">#<span class="token directive keyword">if</span> </span><span class="token return-type class-name">GEN_CODE_MINIMIZE</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    translator<span class="token punctuation">.</span><span class="token function">PushCSharpWrapper</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> creator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token preprocessor property">#<span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstdcallcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> creator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token preprocessor property">#</span><span class="token return-type class-name">endif</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>注：代码生成始终会生成  <code>__CreateInstance</code>  即上述代码中  <code>creator</code>  这个回调，哪怕是静态类。<br />区别在于静态类要是调到了，是会直接报错的：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MonoPInvokeCallbackAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">__CreateInstance</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"TestS does not have a constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后  <code>Lua</code>  侧创建时，例如官方  <code>LuaCallCs.cs</code>  示例中通过  <code>local newGameObj2 = CS.UnityEngine.GameObject('helloworld')</code>  创建了一个新的  <code>GameObejct</code>  对象，此时就是通过  <code>Lua</code>  侧被注册的  <code>__call</code>  元方法回调调用到  <code>UnityEngineGameObjectWrap</code>  中的  <code>__CreateInstance</code>  方法而创建的一个新对象</p><p>创建出新对象后，该对象会被代表该  <code>Lua</code>  状态机的  <code>ObjectTranslator.ObjectPool</code>  所缓存</p><ul><li><code>ObjectPool</code>  默认容量为  <code>512</code> ，若超出则会双倍扩容</li></ul><p>随后，通过  <code>LuaAPI.xlua_pushcsobj</code>  将返回的索引、C# 对象类型对应的 Lua 元表  <code>type_id</code>  等信息推送至 Lua 虚拟栈上，Lua 那边取值并用  <code>userdata</code>  缓存下来</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>LUA_API <span class="token keyword">void</span> <span class="token function">xlua_pushcsobj</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> meta_ref<span class="token punctuation">,</span> <span class="token keyword">int</span> need_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> cache_ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span><span class="token operator">*</span> pointer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">lua_newuserdata</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">*</span>pointer <span class="token operator">=</span> key<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    </pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>need_cache<span class="token punctuation">)</span> <span class="token function">cacheud</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cache_ref<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">lua_rawgeti</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> meta_ref<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">lua_setmetatable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>最后就是：</p><ul><li>注册静态方法及字段</li><li>调用  <code>Utils.EndClassRegister</code>  结束静态字段、方法注册</li></ul><h2 id="其它"><a class="anchor" href="#其它">#</a> 其它</h2><ul><li>xlua_pushlstring<ul><li>需要注意的是，LuaAPI 中封装了重载的接口，直接传递  <code>string</code>  类型的话</li><li>会通过转化为 UTF8 编码的 bytes 数组传递</li><li>有大小为  <code>256</code>  的数组缓存，小于该字节的走缓存，否则直接 GetBytes 转成字节数组传递</li></ul></li><li><code>decimal</code>  也是单独通过 LuaAPI.xlua_pushstruct 处理的</li></ul><h1 id="数据交互-lua-调-c"><a class="anchor" href="#数据交互-lua-调-c">#</a> 数据交互 - Lua 调 C#</h1><ol><li>首先通过  <code>getTypeId</code>  注册 C# 对象信息至 Lua 侧，并通过一个索引 (userdata) 保持联系</li><li>Lua 这边调用 C 函数时的参数会被自动的压栈 (若为实例对象，则会将对象索引压栈至第一位)</li><li>然后，通过上述注册的元表信息，例如自动生成的  <code>__Register</code>  延迟注册的代码：</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">__Register</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">ObjectTranslator</span> translator <span class="token operator">=</span> ObjectTranslatorPool<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">System<span class="token punctuation">.</span>Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">BeginObjectRegister</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> L<span class="token punctuation">,</span> translator<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    </pre></td></tr><tr><td data-num="7"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">RegisterFunc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> Utils<span class="token punctuation">.</span>METHOD_IDX<span class="token punctuation">,</span> <span class="token string">"Test1"</span><span class="token punctuation">,</span> _m_Test1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">RegisterFunc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> Utils<span class="token punctuation">.</span>GETTER_IDX<span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">,</span> _g_get_Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">RegisterFunc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> Utils<span class="token punctuation">.</span>SETTER_IDX<span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">,</span> _s_set_Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">EndObjectRegister</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> L<span class="token punctuation">,</span> translator<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">BeginClassRegister</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> L<span class="token punctuation">,</span> __CreateInstance<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">RegisterFunc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> Utils<span class="token punctuation">.</span>CLS_IDX<span class="token punctuation">,</span> <span class="token string">"Test2"</span><span class="token punctuation">,</span> _m_Test2_xlua_st_<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">RegisterFunc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> Utils<span class="token punctuation">.</span>CLS_IDX<span class="token punctuation">,</span> <span class="token string">"Test4"</span><span class="token punctuation">,</span> _m_Test4_xlua_st_<span class="token punctuation">)</span><span class="token punctuation">;</span>     </pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    Utils<span class="token punctuation">.</span><span class="token function">EndClassRegister</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> L<span class="token punctuation">,</span> translator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>C# 这边的字段、方法都会被生成为 wrap 过的静态方法 (字段为两个 get、set 静态方法)<ul><li>Wrap 方法主要将 Lua 的访问或赋值操作转换成函数调用形式</li><li>生成的 wrap 方法是一个接收有一个参数，即接受 Lua 状态机指针 ( <code>System.IntPtr</code> ) 的静态方法</li></ul></li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 实例字段被编译而成的 getter，可视作普通实例方法的调用</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token function">MonoPInvokeCallbackAttribute</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">_g_get_Name</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">ObjectTranslator</span> translator <span class="token operator">=</span> ObjectTranslatorPool<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Test</span> gen_to_be_invoked <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span>translator<span class="token punctuation">.</span><span class="token function">FastGetCSObj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> gen_to_be_invoked<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Exception</span> gen_e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"c# exception:"</span> <span class="token operator">+</span> gen_e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol start="4"><li>生成的静态 Wrap 方法从 Lua 虚拟栈通过正数索引取参数值，然后调用实际方法，填入方法参数</li><li>实例方法编译出来的 lua 调用的方法，会先取缓存列表中实例对象，然后调用对应方法</li><li>重载函数必须通过同名函数被调用时传递的参数数量 (或类型) 来判断到底应该调用哪个函数</li></ol><ul><li><code>LuaAPI.lua_gettop(L)</code>  获取参数数量（静态与实例均如此，当然若没有重载会省略这一步）</li><li>后续<ul><li>实例对象从  <code>index 1</code>  获取对象类型索引 (userdata)，从  <code>index 2</code>  开始获取实际方法参数值</li><li>静态调用直接从  <code>index 1</code>  开始获取参数值</li></ul></li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这是原本就是静态的方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token function">MonoPInvokeCallbackAttribute</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">_m_Test4_xlua_st_</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token class-name"><span class="token keyword">int</span></span> _a <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_tointeger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token class-name"><span class="token keyword">bool</span></span> _b <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">lua_toboolean</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span></span> _c <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       </pre></td></tr><tr><td data-num="10"></td><td><pre>            Test<span class="token punctuation">.</span><span class="token function">Test4</span><span class="token punctuation">(</span> _a<span class="token punctuation">,</span> _b<span class="token punctuation">,</span> _c <span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span>       </pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Exception</span> gen_e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"c# exception:"</span> <span class="token operator">+</span> gen_e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>函数返回值为 int，代表返回值数量</p><ol start="7"><li>当 Lua 调用时，会调用 C# 这边的 Wrap 静态方法，并通过索引获取到对应对象，再调用指定方法</li></ol><ul><li>函数通过 Lua 中的栈来接受 Lua 传递的参数，参数以正序入栈（第一个参数数量首先入栈）<ul><li>因此，当函数开始的时候， <code>lua_gettop(L)</code>  可以返回函数收到的参数个数</li><li>并根据正数索引从 <code>索引 1</code>  开始取值</li></ul></li></ul><h1 id="数据交互-c-调-xlua"><a class="anchor" href="#数据交互-c-调-xlua">#</a> 数据交互 - C# 调 XLua</h1><ul><li>可以通过数据映射进行</li><li>映射对象继承自  <code>LuaBase</code> ，如果是接口，并标记了  <code>[CSharpCallLua]</code>  特性，则会由  <code>XLua</code>  自动生成继承了  <code>LuaBase</code>  的桥接代码，该代码与  <code>LuaTable</code>  原理一致</li><li>主要通过  <code>luaenv.Global</code>  全局  <code>_G</code>  表获取数据并映射至  <code>C#</code>  这边类型<ul><li>根据  <code>Tutorial.CSCallLua</code>  示例，对于引用类型映射 (即两边修改同步) 主要有 标记特性接口 和 LuaTable、委托 (加入过生成列表，见  <code>LuaFunction.cs</code> )</li><li>否则普通的类型或直接取值，均通过值传递 (获取后就无关联)</li></ul></li><li>映射原理<ul><li>例如  <code>Lua 侧 Table</code>  被映射为  <code>C# LuaTable</code>  类型</li><li><code>LuaTable</code>  继承自  <code>LuaBase</code></li><li><code>LuaBase</code>  中构造函数接受两个参数：<ul><li><code>reference</code> ：Lua 中对象索引</li><li><code>luaenv</code> ：指定的 Lua 运行环境</li></ul></li><li>C# 这边通过调用  <code>LuaAPI.luaL_ref(L)</code>  将指定对象放入一张  <code>LUA_REGISTRYINDEX</code>  的全局表</li></ul></li></ul><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ObjectCasters.cs</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">getLuaTable</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> idx<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">==</span> LuaTypes<span class="token punctuation">.</span>LUA_TUSERDATA<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> translator<span class="token punctuation">.</span><span class="token function">SafeGetCSObj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token keyword">is</span> <span class="token class-name">LuaTable</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> obj <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_istable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushvalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LuaTable</span><span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_ref</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">,</span> translator<span class="token punctuation">.</span>luaEnv<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>因为  <code>LuaBase</code>  保存了对象在  <code>LUA_REGISTRYINDEX</code>  表的索引，因此可以再其中通过索引获取  <code>Lua</code>  侧对象，然后再通过虚拟栈进行交互</p><ul><li>也就是说  <code>reference</code>  指的不是栈上索引，而是这个全局表 ( <code>LUA_REGISTRYINDEX</code> ) 中的索引</li><li>根据相关信息解释，对于该全局表，C 代码可以自由使用，但 Lua 代码不能访问</li></ul><p>当获取值时，通过  <code>LuaAPI.lua_getref(L, luaReference)</code>  传入存储的  <code>reference</code>  获取</p><ul><li>见源码  <code>public partial class LuaTable</code>  中的  <code>Get</code>  方法</li><li>也就是说对于映射的引用类型，并非是直接通过虚拟栈 (Lua 为每次函数调用都新分配了一个栈，因此在离开作用域之后，栈索引就失效了)</li><li>而是通过保存对象在  <code>LUA_REGISTRYINDEX</code>  中的索引实现映射，在实际调用相关方法或字段时，通过存储的索引获取对应 Lua 表，再通过虚拟栈进行交互</li></ul><p>当对象在  <code>C#</code>  这边被回收时，通过  <code>LuaBase</code>  析构函数的  <code>Dispose</code>  方法，调用  <code>luaenv</code>  的  <code>ObjectTranslator.ReleaseLuaBase</code>  将对象从  <code>LUA_REGISTRYINDEX</code>  表中删除 (随后该对象就能受  <code>Lua</code>  侧的垃圾回收了)</p><h1 id="垃圾回收相关"><a class="anchor" href="#垃圾回收相关">#</a> 垃圾回收相关</h1><p>C# 和 Lua 都有各自的垃圾回收机制，为了避免冲突，当使用了对方代理对象时，代理对象会被缓存，并在 <code>真实对象</code> 被回收后，移除缓存，使 <code>代理对象</code> 也能被回收</p><h2 id="lua-传递至-c-的对象"><a class="anchor" href="#lua-传递至-c-的对象">#</a> Lua 传递至 C# 的对象</h2><p><code>Lua</code>  传递至  <code>C#</code>  的对象，会通过  <code>LuaAPI.luaL_ref</code>  保持引用 (取值也是通过这个) 而不被回收</p><ul><li><code>C#</code>  这边对象被回收后，将其从  <code>LUA_REGISTRYINDEX</code>  表中移除使其可以被  <code>Lua</code>  垃圾管理器回收</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReleaseLuaBase</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> reference<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> is_delegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_delegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_rawgeti</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LuaIndexes<span class="token punctuation">.</span>LUA_REGISTRYINDEX<span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_isnil</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushvalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawget</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LuaIndexes<span class="token punctuation">.</span>LUA_REGISTRYINDEX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> LuaTypes<span class="token punctuation">.</span>LUA_TNUMBER <span class="token operator">&amp;&amp;</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_tointeger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> reference<span class="token punctuation">)</span> <span class="token comment">//</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token comment">//UnityEngine.Debug.LogWarning("release delegate ref = " + luaReference);</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// pop LUA_REGISTRYINDEX[func]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushnil</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LuaIndexes<span class="token punctuation">.</span>LUA_REGISTRYINDEX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LUA_REGISTRYINDEX[func] = nil</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">else</span> <span class="token comment">//another Delegate ref the function before the GC tick</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop LUA_REGISTRYINDEX[func] &amp; func</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">lua_unref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        delegate_bridges<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">lua_unref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="c-传递至-lua-的对象"><a class="anchor" href="#c-传递至-lua-的对象">#</a> C# 传递至 Lua 的对象</h2><p>至于  <code>C#</code>  传递至  <code>Lua</code>  的对象，我们知道 C# 这边对象在 Lua 侧会被注册为元表</p><ul><li>在我们生成的元表数据，即 C# 对象的 Wrap 代码 (或反射生成) 的时候，就会将相关对象被 Lua 回收的回调注册到 Lua 中</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_pushasciistring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"__gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushstdcallcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> translator<span class="token punctuation">.</span>metaFunctions<span class="token punctuation">.</span>GcMeta<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>其中的  <code>translator.metaFunctions.GcMeta(StaticLuaCallbacks)</code>  就是当对象在  <code>Lua</code>  那边回收后，会将回收对象压栈，然后回调到  <code>C#</code>  这边注册的静态函数</p><p>随后， <code>C#</code>  这边通过回调传过来的  <code>Lua</code>  状态机指针，通过正向索引从  <code>Lua</code>  虚拟栈中获取到对应对象索引，从缓存列表移除，后续该对象就会受  <code>C#</code>  垃圾回收器回收</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MonoPInvokeCallback</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">LuaGC</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">try</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> udata <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_tocsobj_safe</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>udata <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token class-name">ObjectTranslator</span> translator <span class="token operator">=</span> ObjectTranslatorPool<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span> translator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                translator<span class="token punctuation">.</span><span class="token function">collectObject</span><span class="token punctuation">(</span>udata<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"c# exception in LuaGC:"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="问题关于调用初始化"><a class="anchor" href="#问题关于调用初始化">#</a> 问题：关于调用初始化</h1><p>目前有点搞不清楚的问题就是：  <code>CS.UnityEngine.GameObject()</code>  这种代码，实际上是什么时候被初始化的？</p><p>在 C# 这边源码中可以明显看到，自动生成的  <code>wrap</code>  代码是在  <code>XLua_Gen_Initer_Register__</code>  通过  <code>ObjectTranslator.DelayWrapLoader</code>  注册的 —— 也就是说并不会立即加载</p><ul><li>在调用  <code>ObjectTranslator.GetTypeId</code>  才会判断是否注册过元表数据，判断是否反射或调用生成的 wrap 代码进行注册</li></ul><p>例如上面提到过的官方示例  <code>local newGameObj2 = CS.UnityEngine.GameObject('helloworld')</code>  创建了一个新的  <code>GameObejct</code>  对象，在调用的时候这个元表应该还没被初始化设置到 Lua 侧</p><p>所以应该还有一个东西，让它可以在没有找到的时候，调用 ObjectTranslator.GetTypeId 注册的基本元表数据</p><ul><li>目前怀疑是： <code>LuaEnv</code>  构造函数中的对  <code>__index</code>  设置的  <code>StaticLuaCallbacks.MetaFuncIndex</code>  回调，但是看着又.... 不大确定，因为这里看着是固定加载索引为 2 的 Type，虽然调用了  <code>GetTypeId</code> ，不过难道不是只会初始化这一个吗？调用的指定类型呢？光看 C# 这边代码还是相当有点疑惑。</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//StaticLuaCallbacks.cs 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token function">MonoPInvokeCallback</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LuaCSFunction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MetaFuncIndex</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">try</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">ObjectTranslator</span> translator <span class="token operator">=</span> ObjectTranslatorPool<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Type</span> type <span class="token operator">=</span> translator<span class="token punctuation">.</span><span class="token function">FastGetCSObj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">Type</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"#2 param need a System.Type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//UnityEngine.Debug.Log("============================load type by __index:" + type);</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment">//translator.TryDelayWrapLoader(L, type);</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        translator<span class="token punctuation">.</span><span class="token function">GetTypeId</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">lua_pushvalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        LuaAPI<span class="token punctuation">.</span><span class="token function">lua_rawget</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Exception</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> LuaAPI<span class="token punctuation">.</span><span class="token function">luaL_error</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"c# exception in MetaFuncIndex:"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">//ObjectTranslator.cs 文件</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">FastGetCSObj</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">getCsObj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> index<span class="token punctuation">,</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_tocsobj_fast</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">getCsObj</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> udata<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>udata <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaAPI<span class="token punctuation">.</span><span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">!=</span> LuaTypes<span class="token punctuation">.</span>LUA_TUSERDATA<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token function">GetTypeOf</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">decimal</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token class-name"><span class="token keyword">decimal</span></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token function">Get</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">out</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">return</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token class-name">GetCSObject</span> <span class="token keyword">get</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> custom_get_funcs<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>udata<span class="token punctuation">,</span> <span class="token keyword">out</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> !UNITY_5 &amp;&amp; !XLUA_GENERAL &amp;&amp; !UNITY_2017 &amp;&amp; !UNITY_2017_1_OR_NEWER &amp;&amp; !UNITY_2018</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token keyword">is</span> <span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token comment">//throw new UnityEngine.MissingReferenceException("The object of type '"+ obj.GetType().Name +"' has been destroyed but you are still trying to access it.");</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>也许还有另一个可能？那就是这里其实是指的虚拟栈正数索引？但是感觉又不像.... 上边使用 index 传入 GetTypeOf 获取类型的方法如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ObjectTranslator.cs 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">Type</span> <span class="token function">GetTypeOf</span><span class="token punctuation">(</span><span class="token class-name">RealStatePtr</span> L<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> idx<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> type_id <span class="token operator">=</span> LuaAPI<span class="token punctuation">.</span><span class="token function">xlua_gettypeid</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type_id <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        typeMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>type_id<span class="token punctuation">,</span> <span class="token keyword">out</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里通过  <code>LuaAPI.xlua_gettypeid</code>  获取 type_id，然而 type_id 需求我们先注册了 (也就是) 才会有.... 陷入循环了？</p><p>还是说通过  <code>ObjectTranslator.OpenLib</code>  处理的？</p><p>后面还有诸如  <code>AddBuildin(&quot;CS&quot;, StaticLuaCallbacks.LoadCS)</code>  的代码，看着是将『CS』这个注册为一个 Lua 表当做命名空间？所以 Lua 那边调用，都是通过 CS. 调用的</p><p>疑惑.... 我们项目本身并不是 XLua 的，所以其实也不是很熟，研究了几天倒是一堆揣测。</p><hr /><h2 id="对猜想的测试"><a class="anchor" href="#对猜想的测试">#</a> 对猜想的测试</h2><p>突然想到 XLua C# 这边不是可以直接调试的么，何不直接调调看？硬看代码，不如实际来测试下看看。</p><h3 id="猜测一staticluacallbacksmetafuncindex-初始化"><a class="anchor" href="#猜测一staticluacallbacksmetafuncindex-初始化">#</a> 猜测一：StaticLuaCallbacks.MetaFuncIndex 初始化</h3><p>实际调试了一下， 初始化 Lua 虚拟机就向  <code>__index</code>  注册的  <code>StaticLuaCallbacks.MetaFuncIndex</code>  确实被调用到了</p><p>然后通过在 LuaCallCs 示例的 Lua 脚本前加上 print ，并查看 print 与 StaticLuaCallbacks.MetaFuncIndex 调用顺序：</p><ul><li>注：print 是在 LuaEnv 初始化时，通过  <code>LuaAPI.lua_pushstdcallcfunction(rawL, StaticLuaCallbacks.Print)</code>  注册的功能函数。</li><li>结果 GameObject 创建完了，后续 print 都来了都没执行</li></ul><p>该猜测 Pass</p><h3 id="猜测二objecttranslatoropenlib-中注册的某个处理"><a class="anchor" href="#猜测二objecttranslatoropenlib-中注册的某个处理">#</a> 猜测二：ObjectTranslator.OpenLib 中注册的某个处理</h3><p>直接在  <code>ObjectTranslator.getTypeId</code>  方法里边打断点，所有对象使用先必然先通过这里注册基本元数据，直接查看什么时候来的、怎么来的。<br />然后来到了... 之前猜测的  <code>ObjectTranslator.OpenLib</code>  中注册的  <code>import_type</code> ，即  <code>StaticLuaCallbacks.ImportType</code>  函数中：</p><p><img data-src="/blogimages/2023/2023-04-27/image1.png" alt="" /></p><p>（这好像就符合第二个猜测了）</p><p>然后进入  <code>TryDelayWrapLoader</code>  ，因为之前我生成过代码，所以  <code>delayWrap</code> ，即之前提到过的生成代码注册的列表存在对应类型：</p><p><img data-src="/blogimages/2023/2023-04-27/image2.png" alt="" /></p><p>所以，在 Lua 侧调用不存在对象时，会调到 C# 侧的  <code>import_type</code>  代码，对类型进行实际注册，使其可以被调用。</p><p>然后，若 Lua 代码通过  <code>__call</code>  方式调用，则 C# 调用对象注册的创建对应实例方法，创建对应实例，并两者映射起来。</p><ul><li>后续，不管是调用方法，还是获取变量，均通过正常交互流程进行了！</li></ul><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>最后，再来梳理一下流程：</p><p>Lua 调 C#</p><ul><li>首先，在创建一个  <code>LuaEnv</code>  环境时，会保存该环境返回的指针，并注册一些初始的公共静态函数<ul><li>例如生成的 wrap 代码的延迟注册回调  <code>__Register</code>  从  <code>XLuaGenAutoRegister.cs</code>  添加至  <code>D</code> elayWrapLoader`<ul><li>注：结构体、枚举等自定义值类型会在  <code>WrapPusher.cs</code>  中单独注册类型（前提是加了  <code>[XLua.LuaCallCSharp]</code> 、 <code>[GCOptimize]</code>  这类  <code>XLua</code>  的特性、或者加到  <code>GenConfig</code>  也可以）</li></ul></li><li>当  <code>Lua</code>  调用时，若对应类型还未进行实际数据注册，则会调到  <code>ObjectTranslator.OpenLib</code>  中注册的  <code>import_type</code>  ，在该方法中调用注册的  <code>__Register</code>  回调去实际注册对象<ul><li>实例对象的创建方法  <code>__CreateInstance</code>  也是在此 ( <code>__Register回调</code> ) 通过注册到  <code>Lua</code>  侧  <code>__call</code>  元方法进行</li></ul></li><li>而后，就可以实际工作了，查询  <code>typeIdMap</code>  是否存在对应类型，不存在则调用  <code>TryDelayWrapLoader</code>  进行类型实际初始化<ul><li>注：数组是单独处理的， <code>LuaEnv</code>  构造函数最后调用的注册</li><li>注：若没有生成代码，则反射调用，由  <code>Utils.ReflectionWrap</code>  方法注册，即公共的反射调用回调替代生成代码</li></ul></li><li>调用时还会区分静态和非静态的实例调用 (虽然都是注册的静态 wrap 方法，但实际操作还是有区别的)：</li><li>当  <code>Lua</code>  调过来的时候，会传递  <code>LuaEnv</code>  的指针，</li><li>实例调用：<ul><li>通过字典查询得到实际  <code>LuaEnv</code>  对应的  <code>ObjectTranslator</code></li><li>通过正数索引  <code>1</code>  从  <code>Lua虚拟栈</code> 获取对象索引，然后使用索引从  <code>ObjectTranslator</code>  获取  <code>C#</code>  侧实例对象<ul><li>若有调用方法有重载，则通过  <code>lua_gettop</code>  获取参数数量</li></ul></li><li>通过正数索引  <code>2</code>  开始获取实际参数</li></ul></li><li>静态调用：<ul><li>当  <code>Lua</code>  调过来的时候，直接以正数索引从  <code>1</code>  开始取参数值<ul><li>若有调用方法有重载，则通过  <code>lua_gettop</code>  获取参数数量</li></ul></li></ul></li><li>调用实际方法</li><li>将方法调用结果压栈</li><li>返回调用方法后，方法的返回值数量</li><li>Lua 侧拿到调用结果</li></ul></li><li>所以，静态字段或方法与实例的调用流程是一样的</li><li>两者的主要区别是：是否需要通过额外对象索引参数去查找实际对象</li></ul><p>C# 调用 Lua 则通过映射实现</p><ul><li><code>luaenv.Global</code>  (初始化映射的  <code>Lua _G</code>  表)</li><li>然后后续则通过调用  <code>luaenv.Global.Get</code>  从  <code>_G</code>  表获取数据，并映射至  <code>C#</code>  侧对应对象结构<ul><li>继承  <code>LuaBase</code>  (添加特性会自动生动对应 wrap 代码) 通过引用映射，两边保持对应索引<ul><li>调用对象时，通过去 LUA_REGISTRYINDEX 获取对应对象，并通过虚拟栈传递信息进行实际调用</li></ul></li><li>没有继承  <code>LuaBase</code>  的 会通过值传递，获取一次值后两边就无关系了</li></ul></li></ul><p>C# 侧缓存的 Lua 对象被缓存至  <code>LUA_REGISTRYINDEX</code>  表<br /> Lua 侧创建的 C# 对象被缓存至  <code>ObjectTranslator.ObjectPool</code></p><p>避免相互之前 GC 导致对象回收，当一边的代理对象被回收后，通知对面从缓存表移除缓存，然后执行真实对象的回收。</p><p>最后：</p><ul><li>对于静态方法，只需要根据虚拟机的  <code>RealStatePtr</code>  指针直接调用 C API 去  <code>Lua虚拟栈</code> 取值，然后调用实际方法即可。</li><li>然而对于实例对象， 除了根据  <code>RealStatePtr</code>  去字典查询一次虚拟机  <code>ObjectTranslator</code>  外，还得在  <code>ObjectTranslator.objects</code>  中通过对象索引查找实际对象（当然因为  <code>ObjectPool</code>  是数组结构，其实还是挺快的），然后通过正向索引从  <code>Lua虚拟栈</code> 获取参数并调用</li><li>因此实例对象的调用，会比静态方法、字典慢些 —— 另外要是只有一个虚拟机环境的需求，是否可以直接把通过字典查  <code>Lua虚拟机</code> 这一步给省掉？毕竟这一步主要是为支持多虚拟机环境，如果没用多虚拟机环境感觉好像可以？</li></ul><p>可能写得稍微有点重复啰嗦，毕竟是一边看一边猜测，又一边修改的，不过也算加深映象了。虽然我自己项目还是纯 C# 在搞，不过毕竟公司在推 XLua，研究这个主要是避免别人问起来，都说不出什么深点的原理。</p><h1 id="参考文档"><a class="anchor" href="#参考文档">#</a> 参考文档</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxODI2MzY0NDEwL2FydGljbGUvZGV0YWlscy84ODYyNDgyNA==">【最详细易懂】C++ 和 Lua 交互总结 鹅厂程序小哥的博客 - CSDN 博客</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA3ODI2NDQvYXJ0aWNsZS9kZXRhaWxzLzc5NjQxMjg0">lua_pcall 详解_lua lua_pcall_俊哥兜里有糖的博客 - CSDN 博客</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82ZTgzZjFjZjkwYmY=">为什么调用 lua_pcall</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVyYXJob3cvYXJ0aWNsZS9kZXRhaWxzLzIwNDU1NDkx">在 C 语言中调用 lua 实现的回调函数_luaapi.lua_getref 是干什么的_superarhow 的博客 - CSDN 博客</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzk4NzExNg==">lua gc 对象复活</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20venNiNTE3L3AvNjQxODkyOS5odG1s">Lua 与 C 交互之 LUA_REGISTRYINDEX（3） - RubbyZhang - 博客园</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXdpbml3aW4vcC8xNTMwNzM2OC5odG1s">深入 xLua 实现原理之 Lua 如何调用 C# - iwiniwin - 博客园</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXdpbml3aW4vcC8xNTMyMzk3MC5odG1s">深入 xLua 实现原理之 C# 如何调用 Lua - iwiniwin - 博客园</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYm9va3N0YWNrLmNuL3JlYWQvbHVhLTUuMy9zcGlsdC40MC5zcGlsdC4xLjUubWQ=">5.1 函数和类型 - luaL_newstate - 《Lua 5.3 参考手册》 - 书栈网・BookStack</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk1MzQzMDMzOTc3Nzk4Njcw">Lua 与 C 语言的互相调用 - 掘金</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTUyNzc4Mjg=">lua 源码编译及与 C/C++ 交互调用细节剖析</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnlmZWkvcC82Mzg5Nzg1Lmh0bWw=">lua_touserdata - byfei - 博客园</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;很久以前也有拿着 XLua C# 这边的源码看过，网上也找过资料... 就是搞不大清楚。&lt;/p&gt;
&lt;p&gt;可惜没人提醒，后来才想明白，直接硬看 C# 这边的源码是不行</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="笔记" scheme="https://wangjiaying.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="XLua" scheme="https://wangjiaying.top/tags/XLua/"/>
    
  </entry>
  
  <entry>
    <title>对列表容器中值类型引用传参的一点测试</title>
    <link href="https://wangjiaying.top/2023/04/14/%E5%AF%B9%E5%88%97%E8%A1%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%BC%95%E7%94%A8%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%80%E7%82%B9%E6%B5%8B%E8%AF%95/"/>
    <id>https://wangjiaying.top/2023/04/14/%E5%AF%B9%E5%88%97%E8%A1%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%BC%95%E7%94%A8%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%80%E7%82%B9%E6%B5%8B%E8%AF%95/</id>
    <published>2023-04-14T08:13:21.000Z</published>
    <updated>2023-04-16T08:02:40.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>最近做项目优化，在整理主界面的按钮问题的时候，用到了只读结构体，这个结构体会保存于一个列表中，并采用  <code>in</code>  对列表中的值进行引用传递。</p><p>然后突后面然想到，保存于列表中的值类型，真的能直接被引用吗？</p><p>毕竟  <code>List</code>  数据结构本身由于存在扩容问题，因此是不允许直接返回其中数据引用的。</p><p>那么我们就有理由怀疑：实际类型为  <code>List</code>  容器中，采用下标取出的对象作为引用传递时，它可能依然会在栈上新建一个临时变量，然后再将其作为引用传递过去。那么这里就还是存在一个额外拷贝开销了。</p><p>于是考虑了一下，并且也比较好奇，于是就想着用  <code>ILSpy</code>  进行反编译查看生成的  <code>IL</code>  代码，以确定是否真的如猜测所示。</p><h1 id="列表类型"><a class="anchor" href="#列表类型">#</a> 列表类型</h1><p>首先，源代码如下所示：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">MainRightButtonItem</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 省略......</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RefreshButton</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token class-name">MainRightButtonItem</span> buttonData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 省略......</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/// 刷新按钮状态数据</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RefreshButtons</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _buttonDataList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">RefreshButton</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> _buttonDataList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这是一个最简单的  <code>for循环</code> ，循环中通过下标取  <code>List</code>  并直接传递至  <code>RefreshButton</code>  方法中， <code>RefreshButton</code>  本身接收的则是一个  <code>MainRightButtonItem</code>  的引用地址。</p><p>编译为  <code>IL</code>  代码后如下所示：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0001<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0002<span class="token punctuation">:</span> br<span class="token punctuation">.</span>s IL_001e</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// loop start (head: IL_001e)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    IL_0004<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    IL_0005<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    IL_0006<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    IL_0007<span class="token punctuation">:</span> ldfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span> BottonListHolder<span class="token punctuation">::</span><span class="token class-name">_buttonDataList</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    IL_000c<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    IL_000d<span class="token punctuation">:</span> callvirt instance <span class="token operator">!</span><span class="token number">0</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span><span class="token punctuation">::</span><span class="token function">get_Item</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    IL_0012<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    IL_0013<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    IL_0015<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> BottonListHolder<span class="token punctuation">::</span><span class="token function">RefreshButton</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">&amp;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    IL_001a<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    IL_001b<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    IL_001c<span class="token punctuation">:</span> <span class="token keyword">add</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    IL_001d<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    IL_001e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    IL_001f<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    IL_0020<span class="token punctuation">:</span> ldfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span> BottonListHolder<span class="token punctuation">::</span><span class="token class-name">_buttonDataList</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    IL_0025<span class="token punctuation">:</span> callvirt instance int32 <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span><span class="token punctuation">::</span><span class="token function">get_Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    IL_002a<span class="token punctuation">:</span> blt<span class="token punctuation">.</span>s IL_0004</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// end loop</span></pre></td></tr></table></figure><h2 id="分析"><a class="anchor" href="#分析">#</a> 分析</h2><p><code>loop start</code>  之后就是循环体，在  <code>IL_0015</code>  处的指令可以看出来，确实是传递的一个  <code>MainRightButtonItem</code>  的引用，这个跟想象的一样，没什么问题。</p><p>接着就需要确认它之前有没有将值拷贝到栈上的操作：</p><p>从  <code>IL_0007</code>  开始，首先将列表加载至栈上<br />接着  <code>IL_000d</code>  调用列表的  <code>get_Item</code>  方法 (索引器) 并传入下标<br />关键就在于  <code>Stloc_1</code>  和  <code>Ldloca_S </code>  指令：</p><blockquote><p>Stloc_1：从计算堆栈顶部弹出当前值，并将其存储在索引 1 处的局部变量列表中。<br />Ldloca_S：将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。</p></blockquote><p>看这指令解释... 貌似还是执行了复制操作？</p><h2 id="对比非引用传参"><a class="anchor" href="#对比非引用传参">#</a> 对比非引用传参</h2><p>与上述唯一不同的是，调用的  <code>RefreshButtonCopy</code>  方法没有标记为引用传参，关键  <code>IL</code>  代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0007<span class="token punctuation">:</span> ldfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span> BottonListHolder<span class="token punctuation">::</span><span class="token class-name">_buttonDataList</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000c<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000d<span class="token punctuation">:</span> callvirt instance <span class="token operator">!</span><span class="token number">0</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>List`<span class="token number">1</span><span class="token operator">&lt;</span>valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">></span><span class="token punctuation">::</span><span class="token function">get_Item</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_0012<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> BottonListHolder<span class="token punctuation">::</span><span class="token function">RefreshButtonCopy</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token punctuation">)</span></pre></td></tr></table></figure><p>看起来竟然还比引用传递少了两条指令！</p><h1 id="数组类型"><a class="anchor" href="#数组类型">#</a> 数组类型</h1><p>首先，数组结构的模式。</p><p>原代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">MainRightButtonItem<span class="token punctuation">[</span><span class="token punctuation">]</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MainRightButtonItem</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">RefreshButton</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译为  <code>IL</code>  代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">10</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0002<span class="token punctuation">:</span> newarr BottonListHolder<span class="token operator">/</span><span class="token class-name">MainRightButtonItem</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0007<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0009<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_000a<span class="token punctuation">:</span> br<span class="token punctuation">.</span>s IL_001e</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// loop start (head: IL_001e)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    IL_000c<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    IL_000d<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    IL_000f<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    IL_0010<span class="token punctuation">:</span> ldelema BottonListHolder<span class="token operator">/</span><span class="token class-name">MainRightButtonItem</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    IL_0015<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> BottonListHolder<span class="token punctuation">::</span><span class="token function">RefreshButton</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> valuetype BottonListHolder<span class="token operator">/</span>MainRightButtonItem<span class="token operator">&amp;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    IL_001a<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    IL_001b<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    IL_001c<span class="token punctuation">:</span> <span class="token keyword">add</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    IL_001d<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    IL_001e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    IL_001f<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    IL_0020<span class="token punctuation">:</span> <span class="token class-name">ldlen</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    IL_0021<span class="token punctuation">:</span> <span class="token class-name">conv<span class="token punctuation">.</span>i4</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    IL_0022<span class="token punctuation">:</span> blt<span class="token punctuation">.</span>s IL_000c</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// end loop</span></pre></td></tr></table></figure><p>对于  <code>ldelema</code>  指令文档解释为：</p><blockquote><p>ldelema：将位于指定数组索引的数组元素的地址作为 &amp; 类型（托管指针）加载到计算堆栈的顶部。</p></blockquote><ol><li>对象引用 array 被推送到堆栈上。</li><li>索引值 index 被推送到堆栈上。</li><li>index 并从 array 堆栈中弹出；将查找存储在位置 index array 的地址。</li><li>地址被推送到堆栈上。</li></ol><p>可知这是一个对数组特异化的引用取值指令，表明此处确定是引用传递，与预想一致。</p><h1 id="性能测试"><a class="anchor" href="#性能测试">#</a> 性能测试</h1><p>对于  <code>List</code>  的结构体容器引用传参及非引用传参的性能，目前就有点拿不准了，于是还是走测试流程，实际比较一下吧。</p><p>这里直接使用  <code>Unity3D</code>  的  <code>TestRunner</code> ，代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefStruckTest</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Data<span class="token punctuation">></span></span> testList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Data<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Data<span class="token punctuation">[</span><span class="token punctuation">]</span></span> testArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Data</span><span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestListRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token function">InvokeRef</span><span class="token punctuation">(</span>testList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestListCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token function">InvokeCopy</span><span class="token punctuation">(</span>testList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestArrayRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token function">InvokeRef</span><span class="token punctuation">(</span>testArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestArrayCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token function">InvokeCopy</span><span class="token punctuation">(</span>testArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeRef</span><span class="token punctuation">(</span><span class="token keyword">in</span> <span class="token class-name">Data</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeCopy</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Data</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">long</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> w<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>TestArrayCopy <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>073s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>TestArrayRef <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>061s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>TestListCopy <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>000s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>TestListRef <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>000s<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>在  <code>IL</code>  代码分析中，对于  <code>List</code>  容器来说，可以看出直接传递的方式反而比引用传递少两条指令，但实际性能测试结果显示，引用传递的的方式性能还是更好。</p><p>另外，数组的性能更好 —— 至少在仅取值和传递方面不是一个级别的，这估计跟  <code>CLR</code>  对数组本身的优化支持、以及  <code>List</code>  索引实际还走了一道属性取值也有关系。</p><p>后续估计还得再研究一下  <code>Stloc_1</code>  和  <code>Ldloca_S</code>  两条指令深一点的功用。</p><p>例如，我们是否有理由怀疑：</p><ol><li>引用传递只执行了一次复制，调用者的方法栈上，然后传递引用</li><li>复制传递方式则至少执行两次复制，即调用者的方法栈上，然后再复制一份传递至调用方法</li></ol><p>因此虽然上述两条指令执行了赋值，依然造成了上述实际的性能差异，也就是说，引用传递怎么都还是比直接复制传参省一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;最近做项目优化，在整理主界面的按钮问题的时候，用到了只读结构体，这个结构体会保存于一个列表中，并采用  &lt;code&gt;in&lt;/code&gt;  对列表中的值进行引用传递。</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CLR VIR C# 笔记(下)-多线程</title>
    <link href="https://wangjiaying.top/2023/04/06/ClrVirCS%E7%AC%94%E8%AE%B0-%E4%B8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://wangjiaying.top/2023/04/06/ClrVirCS%E7%AC%94%E8%AE%B0-%E4%B8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-04-06T05:33:15.000Z</published>
    <updated>2023-04-28T09:12:21.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>《CLR VIR C#》 这本书太厚，笔记也记得太多，因此还是分成两篇上传</p><p>这是第二篇，主要记录多线程相关章节笔记</p><h1 id="第二十六章-线程基础"><a class="anchor" href="#第二十六章-线程基础">#</a> 第二十六章 线程基础</h1><ul><li>进程：进程是应用程序要使用的资源集合<ul><li>每个进程都有一个虚拟地址空间，确保在一个进程中使用的代码和数据无法由另一个进程访问</li><li>以此确保应用程序实例的健壮性以及安全性</li></ul></li><li>线程：对 CPU 进行虚拟化<ul><li>每个进程都有自己专用线程</li><li>确保应用程序代码陷入死循环时仅 冻结 与代码关联的进程</li></ul></li><li>Windows 永远不会调度进程，而只是调度线程</li><li>线程开销<ul><li>线程内核对象</li><li>线程环境块（TEB）</li><li>用户模式栈<ul><li>存储传给方法的局部变量和实参</li><li>还包含一个地址：指出方法返回时，继续运行的地址</li><li>默认 1M 内存</li></ul></li><li>内核模式栈<ul><li>32 位 12KB</li><li>64 位 24KB</li></ul></li><li>DLL 线程连接和线程分离通知<ul><li>windows 下任何时候在进程中创建线程，都会调用进程中加载的所有非托管 DLL 的 DllMain 方法</li></ul></li></ul></li><li>上下文切换<ul><li>系统在所有线程（逻辑 CPU）之间共享物理 CPU</li><li>任何时刻只将一个线程分配给一个 CPU，该线程能运行一个 时间片 (量程) 的长度</li><li>时间片到期就会将上下文切换到另一个线程</li><li>切换操作<ul><li>将 cpu 寄存器值保存到当前正在运行的线程内核对象内部的一个上下文结构中</li><li>从现有线程集合选出一个线程调度，若该线程由另一个进程拥有，在执行任何代码前还必须切换 cpu 『看见』虚拟地址空间</li><li>将所选上下文结构中的值加载到 cpu 寄存器中</li></ul></li><li>Windows 大约每 30 毫秒执行一次上下文切换，上下文切换是净开销，主要是为了给用户提供一个健壮的、响应灵敏的操作系统</li><li>新线程还可能执行不在高速缓存中的代码，而导致重新缓存，下一次切换又会导致这种问题</li><li>注：一个时间片结束，若系统决定调度同一个线程，那么就不会发生上下文切换（尽量避免上下文切换）</li></ul></li><li>垃圾回收 GC 线程<ul><li>clr 暂停所有线程，遍历它们的栈以查找根以便对堆中对象进行标记</li><li>然后再次遍历它们的栈 (有的对象可能在压缩期间发生移动) 更新它们的根</li><li>因此减少线程数量可以提升垃圾器回收性能</li></ul></li><li>调试器也会挂起所有线程，并在单步执行后恢复所有线程，因此线程越多，调试体验越差</li><li>停止浪费<ul><li>如果只关心性能，那么任何机器最优线程数就是 cpu 数目</li><li>一个线程至少都是 1M 的内存开销，什么都不做的情况下也会白白占用</li></ul></li><li>使用线程的理由<ul><li>可响应性（gui）</li><li>性能（多 cpu）</li></ul></li><li>线程调度和优先级<ul><li>可使用 Microsoft Spy++ 查看每个线程被上下文切换到的次数</li><li>抢占式调度，使用算法判断在什么时候调度哪些线程多长时间</li><li>每个线程都分配了 0 (最低)~31 (最高) 的优先级</li><li>较高优先级线程总是抢占较低优先级线程（总是调度更高优先级线程）</li><li>较高优先级线程开启时，会立即挂起低优先级线程</li><li>0 页线程：系统启动创建，唯一一个，用于将 ram 空闲页清零</li><li>应用程序开发人员不直接处理这些优先级，而是通过优先级类进行</li><li>Idle、Below Normal、normal、above normal、high、realme（仅管理员和 power 权限）</li><li>高优先级线程在其生存周期的大多数时间都应处于等待状态，这样才不至于影响系统总体响应能力</li><li>clr 为自己保留了 idle 和 time-critical 优先级，clr 的终结器线程以 time-critical 优先级运行</li></ul></li><li>前台线程和后台线程<ul><li>应该进程停止时，clr 强制终止仍在运行的任何后台线程</li></ul></li><li>线程是比较宝贵的资源，最好使用线程池</li></ul><h1 id="第二十七章-计算限制的异步操作"><a class="anchor" href="#第二十七章-计算限制的异步操作">#</a> 第二十七章 计算限制的异步操作</h1><ul><li>线程池<ul><li>每 clr 一个线程池</li><li>由 clr 控制的所有 appdomain 共享</li><li>clr 初始化时池中没有线程，内部维护一个操作请求队列（记录项）</li><li>应用程序执行一个异步操作时，追加一个记录项到队列，线程池内部从该队列提取记录项</li><li>池中没有线程时，创建新线程，并在执行完毕后返回池内</li><li>如果应用程序发出许多请求，线程池会尝试用该线程重复处理，不过发出请求速度远超处理速度，则会导致生成新的线程</li><li>当池内线程空闲一段时间后，线程会醒来终止自己以释放资源</li></ul></li><li>执行上下文<ul><li>每个线程都关联了一个执行上下文数据结构</li><li>上下文流动会有一点性能消耗，可用 ExecutionContext.SupressFlow 类阻止</li></ul></li><li>协作取消和超时<ul><li>协作式：要取消的操作必须显式支持取消</li><li>CancellationTokenSource</li><li>要执行一个不允许被取消操作，也可以传递 CancellationToken.None 静态实例<ul><li>CanBeCancelled 返回 false</li><li>一般 CancellationTokenSource 获取的的 token 会返回 true</li></ul></li><li>向 CancellationTokenSource 登记回调方法，将由调用 register 的线程调用回调<ul><li>若 useSynchonizationContext 设置为 true，则可能通过调用线程的 SynchonizationContext 执行</li></ul></li><li>多个 CancellationTokenSource 可以链接起来</li><li>可支持延迟取消</li></ul></li><li>Task<ul><li>Task.Run 接受的取消令牌，只能处理在调度前的取消（没什么用），想取消运行中任务必须任务内显式取消</li><li>子线程异常，可以注册 TaskScheduler.UnobservedTaskException 以进行处理</li></ul></li><li>任务完成时自动启动新任务<ul><li>伸缩性良好的软件不应使线程阻塞，调用 wait、或在任务未完成时调用 result 属性</li><li>task.result 属性内部会调用 wait</li><li>使用 continuewith<ul><li>可以指定新任务只有在第一个任务被取消时才执行，等（TaskContiniationOptions）</li></ul></li></ul></li><li>任务启动子任务<ul><li>TaskCreationOptions.AttachToParent：将一个 task 与其创建者关联，除非子任务都完成，否则父线程不认为已结束</li><li>延续任务也可以使用：TaskContiniationOptions.AttachToParent 将延续任务指定成子任务</li></ul></li><li>任务内部揭秘<ul><li>一系列构成任务状态字段，如代表 task 的唯一 id（从 1 开始，以 1 递增，首次查询对象该属性时分配）</li><li>补充状态<ul><li>cancellationtoken</li><li>continuewithtask 集合</li><li>为抛出未处理异常的子任务准备的 task 对象集合</li></ul></li><li>若不需要任务的附加功能，threadpool.queueuserworkitem 资源利用率更好</li></ul></li><li>任务工厂<ul><li>可以用于创建一组共享相同配置的 task 对象</li><li>TaskFactory</li><li>TaskFactory<TResult></li><li>continuewhenall、continuewhenany 无论如何都会执行延续任务，不受 taskcontinuatuonoption 标志中会导致取消的枚举控制</li></ul></li><li>任务调度器<ul><li>taskschedule 负责执行调度任务</li><li>fcl 提供两个调度器类型<ul><li>线程池任务调度器<ul><li>taskschedule.default</li></ul></li><li>同步上下文任务调度器</li></ul></li><li>默认情况下，所有任务均使用线程池任务调度器</li><li>同步上下文调度器适合提供了 gui 的应用程序，用于将所有任务都调度给 gui 线程<ul><li>该调度器不使用线程池</li><li>可使用 taskschedule.fromcurrentsynchrolizationcontext 方法获得其引用</li><li>任务调度器将任务放到 gui 线程的队列中</li></ul></li></ul></li><li>Parallel<ul><li>for、foreach</li><li>for 更快</li><li>invoke</li><li>调用方法都有接受 ParallelOptions 参数的重载<ul><li>默认并发操作最大数目为 -1（可用 cpu 数）</li></ul></li><li>委托重载版本：<ul><li>localinit：处理一个工作项前调用<ul><li>经测试为线程池每个 Task 调用一次</li></ul></li><li>body：处理的每一项都调用一次<ul><li>经测试为循环中每个对象都会调用一次</li></ul></li><li>localFinally：处理好每个任务工作项后调用 (即使主体委托异常也会调用)<ul><li>经测试为线程池每个 Task 调用一次</li></ul></li></ul></li><li>parallel 所有方法都让调用线程一块参与处理</li><li>参数 parallelloopstate<ul><li>stop：告诉循环停止处理更多工作<ul><li>其它处于运行中的任务也 应该 停止，IsStopped 属性返回 true</li></ul></li><li>break：告诉循环不再处理当前项之后的项<ul><li>循环确保当前项之前项处理好后返回</li></ul></li><li>上述两个选项都会导致后续循环不再 执行</li><li>Break 和 Stop 都不能停止已经开始的项，只能防止新任务的开始</li><li>lowestbreackiteration：调用过 break 方法最低的项，若无则为 null</li></ul></li></ul></li><li>PLINQ<ul><li>AsParallel：并行执行</li><li>AsSequential：切换回顺序执行</li><li>ForAll</li><li>AsOrdered：保持数据项顺序，会降低性能</li><li>WithDegreeOfParallelism：允许指定最多允许多少个线程处理，默认每个内核一个线程查询</li></ul></li><li>timer 类 定时器<ul><li>使用 threadpool.queueuserworkitem，参数 period timeoutinfinity + 回调完成手动 change 方法避免（回调耗时太长而在未结束时就）重复调用</li><li>垃圾回收时会终止 timer，因此需要存在一个引用</li></ul></li><li>asnyc 异步方法中：使用 taskdelay+await，避免线程上下文切换（异步 delay 方法使其回归池中直接执行其它任务）</li><li>不建议设置线程池线程限制</li><li>线程调度<ul><li>threadpool.queueuserworkitem 和 timer 总是将自己放入全局队列，工作线程采用先进先出 (FIFO) 方式从队列取出（因此会有线程同步锁）</li><li>默认 taskscheduler 调度</li><li>每个 task 默认进入全局队列</li><li>每个工作线程有自己的本地队列，调度一个 task 时，该 task 被添加到调用线程本地队列</li><li>工作线程先检查本地队列，通过后入先出 (LIFO) 从本地队列取出任务（本地队列无需同步锁）</li><li>工作线程若发现本地队列空了，会尝试从另一个工作线程『偷取』一个 task（会有同步锁）</li><li>线程池默认工作者线程等于 cpu 数，然后监视任务完成速度，若完成事件过长 (事件未公布)，则会创建更多线程</li></ul></li></ul><h1 id="第二十八章-io-限制的异步操作"><a class="anchor" href="#第二十八章-io-限制的异步操作">#</a> 第二十八章 I/O 限制的异步操作</h1><ul><li>若线程不发生阻塞，在调用异步方法后，线程回到线程池较好的情况是根本不发生线程切换，并立即处理下一个任务</li><li>在线程池线程调用 thread.sleep (或等待线程同步锁) 可能会让线程池觉得 cpu 不饱和，而创建额外线程</li><li>而阻塞线程可能醒来，发生上下文切换（该项线程池有优化，不会立即让其处理任务，以减少上下文切换的可能）</li><li>线程越少，垃圾回收速度越快（挂起所有线程、扫描所有线程根，对线程池空闲线程来说处于它们栈顶，扫描根花费更少）</li><li>线程池判断线程数超过需要数量，会允许多余线程终止自身回收资源</li><li>异步操作：少量线程执行大量操作</li><li>异步函数<ul><li>一旦将方法标记为 async，编译器就会将方法转换为一个实现了状态机的一个类型</li><li>因此运行线程执行状态机中一些代码并返回，而不必一次性执行结束</li><li>await 操作符实际会在 Task 对象上调用 continuewith 传递用于恢复状态机的方法，然后线程返回（所以说异步方法本身不开启新线程，await 操作符等待的是另外开启了新线程的 task）</li><li>将来该 task 执行完毕后，线程池某个线程激活 continueeith 回调方法，造成一个线程恢复状态机</li><li>若 await 等待有返回值，编译器会生成代码查询 task 对象 result 属性并将结果赋值给接收返回值的变量</li><li>注 1：方法标记为 async 后，编译器会生成相关代码，在状态机开始前创建对应的一个 task 对象，并在状态机执行完毕时自动完成<ul><li>有返回值的 task 对象，执行完毕后将 result 属性设置为方法返回值</li></ul></li><li>注 2：await 之前代码由一个线程执行，之后代码可能由另一个线程执行</li></ul></li><li>异步函数转换为状态机<ul><li>实参和局部变量被编译为状态机的字段</li><li>任何时候使用 await 操作符都会获取操作数，并尝试在它上面调用 getwaiter 方法 (可能是实例或扩展方法)</li><li>调用 getwaiter 返回称为 awaiter (等待者) 对象，它将被等待对象与状态机沾合起来</li><li>状态机获得 awaiter 后，查询其 iscompleted 属性<ul><li>若操作已以同步方式完成属性将返回 true，作为优化状态机将继续执行并调用 awaiter 的 getresult 方法</li></ul></li><li>若操作以异步方式完成，则返回 false，状态机 awaiter 的 oncompleted 方法并传递委托 (引用状态机的 movenext 方法)</li><li>将来 awaiter 在任务完成时调用委托以执行 movenext，状态机根据相关字段到达代码正确位置 (上次离开位置)</li><li>回到离开位置后，调用 awaiter 的 getresult 方法获取结果并继续执行</li></ul></li><li>异步函数扩展性<ul><li>编译器可以在 await 任何操作数上调用 getawaiter（所以操作数不一定是 task 对象，可以是提供了 getawaiter 的任意类型）</li></ul></li><li>异步函数在返回 void 时，编译器会生成状态机，但是不再创建 task 对象</li><li>beginxxx、endxxx 方法已过时，可通过 task.factory.fromasync 将其转变为基于 task 的模型</li><li>异步函数的异常<ul><li>若状态机出现未处理异常，代表异步函数的 task 对象会因未处理异常而完成，等待该 task 的代码会看见异常</li><li>返回 void 的异步函数由于没有 task，出现的异常由编译器生成的代码捕获，并于调用者同步上下文重新抛出（若调用者为 gui 线程则会造成进程终止）</li></ul></li><li>若异步操作执行很快，await 操作符生成的代码会做检测，如果异步操作在线程返回前完成，则阻止线程返回，直接执行下一行代码</li><li>task.run 可以接受标记为 async 的异步 lambda 表达式</li><li>应用程序及线程处理模型<ul><li>gui 应用程序引入的线程处理模型中 ui 元素只能由创建它的线程更新<ul><li>当异步操作完成时，由一个线程池线程完成 task 对象并恢复状态机</li><li>对于某些应用程序模型没问题，但对另一些如 gui 应用程序就会有问题</li><li>因此线程池必须以某种方式告诉 gui 线程更新 ui 元素</li></ul></li><li>synchronizationcontext 派生对象将应用程序模型连接到它的线程处理模型<ul><li>等待一个 task 时会获取调用线程的 synchronizationcontext 对象</li><li>线程池线程完成 task 后，会使用该 synchronizationcontext 对象，确保为应用程序模型使用正确的线程处理模型</li><li>所以当 gui 线程等待一个 task 时，await 操作符后面的代码保证在 gui 线程上执行，使代码能更新 ui 元素</li></ul></li></ul></li></ul><h1 id="第二十九章-基元线程同步构造"><a class="anchor" href="#第二十九章-基元线程同步构造">#</a> 第二十九章 基元线程同步构造</h1><ul><li>一个线程池线程阻塞时，线程池会创建额外线程，创建、销毁和调度线程所需时间比较昂贵 —— 不要阻塞拥有的线程，使它们能重用于执行其它任务<ul><li>假定一个线程池线程试图获取一个它暂时无法获取的锁（导致阻塞），线程池就可能创建一个新的线程</li><li>当阻塞线程再次运行时，会与创建的新线程一块运行，导致 cpu 需要调度比核心数更多的线程，增加上下文切换的几率</li></ul></li><li>多个线程同时访问共享数据时，线程同步能防止数据损坏</li><li>多线程测试应该在 cpu 核心尽量多的机器上测试，因为 cpu 核心数量越多，多个线程同时访问资源的概率越大</li><li>应尽可能避免线程同步<ul><li>只读访问是没问题的</li></ul></li><li>基元用户模式和内核模式构造<ul><li>应尽量使用基元用户模式构造：它们使用特殊 cpu 指令协调线程（意味着协调是在硬件发生，所以更快）<ul><li>但是用户模式构造在等待构造过程中，线程会一直浪费 cpu 时间</li></ul></li><li>基元内核模式构造<ul><li>由操作系统系统自身提供</li><li>要求在应用程序的线程中调用由操作系统内核实现的函数</li><li>将线程从用户模式切换为内核模式（或相反）会导致巨大的性能损失（因此要避免使用）</li><li>优点：线程通过内核模式构造获取其它线程拥有资源时，Windows 会阻塞线程以避免它浪费 cpu 时间</li></ul></li><li>对于一个构造上等待的线程，若拥有构造线程不释放<ul><li>用户模式构造：线程将一直在一个 cpu 上运行，形成 活锁</li><li>内核模式构造：线程将一直阻塞，形成 死锁</li><li>于是有了 混合构造</li></ul></li></ul></li><li>用户模式构造<ul><li>易变构造（volatile construct）<ul><li>在特定时间，它在包含一个简单数据类型的变量上执行原子性的读 『或』 写操作</li></ul></li><li>互锁构造（interlocked construct）<ul><li>在特定时间，它在包含一个简单数据类型的变量上执行原子性的读 『和』 写操作</li></ul></li><li>所有易变和互锁构造都要求传递对包含简单数据类型的一个变量的引用（内存地址）</li><li>易变构造详情<ul><li>Volatile.Write：方法强迫变量的值在调用时写入。此外，按照编码顺序，之前的加载和存储操作必须在调用 volatile 方法『之前』发生（调用之前其它变量的写入修改必须先完成，但不保证其它变量的写入执行顺序）</li><li>Volatile.Read：方法强迫变量的值在调用时读取。此外，按照编码顺序，之后的加载和存储操作必须在调用 volatile 『之后』发生（调用方法之后的其它变量的读取都必须在这方法之后执行，但不保证后续其它变量的读取执行顺序）</li><li>注 1：简单来说，当线程通过共享内存相互通信时，调用 volatile.write 来写入最后一个值，调用 volatile.read 来读取第一个值</li><li>注 2：每个方法执行的都是一个 原子读取 或 原子写入</li><li>为简化操作，c# 编译器提供了 volatile 关键字：jit 编译器确保对易变字段的所有访问都是以易变读取或写入方式执行，该关键字还告诉 c# 和 jit 编译器不将字段缓存到 cpu 的寄存器中，确保所有读写操作都在 ram 中进行</li><li>volatile 关键字可能会比 volatile 方法更慢（因为线程可能并不要求在所有地方访问都是易变的），不支持以传引用方式传递 volatile 变量</li></ul></li><li>互锁构造详情<ul><li>每个方法都执行一次 原子读取 及 写入操作</li><li>每个 interlocked 方法都建立了完整的内存栅栏（memory fence）<ul><li>即调用某个 interlocked 方法之前的任何变量写入都在这个方法之前执行，而这个调用之后的任何变量读取都在这个调用之后读取</li></ul></li></ul></li><li>简单的自旋锁：通过在 while 循环中通过 interlocked 修改值一直判断直到成功</li><li>interlocked anything 模式：在 interlocked 基础操作上，例如 interlocked.CompareExchange 执行更丰富的操作</li><li>结构体的 spanwait、spanlock 不要标记为 readonly，因为内部会有状态修改</li><li>spanwait<ul><li>内部调用 thread 的 sleep、yield、spanwait 方法</li><li>sleep 休眠时间并不一定精确</li><li>sleep (0)：告诉系统表示放弃线程当前时间片的剩余部分，强迫系统调度另一个线程</li><li>yield：要求 Windows 在当前 cpu 上调度另一个线程（若没有则返回 false，调用 yield 的线程继续运行）</li><li>调用 yield 介于 sleep (0) 和 sleep (1) 之间：sleep (0) 不允许较低优先级线程运行、sleep (1) 则总是强迫进行上下文切换（由于内部系统计时器解析度原因，sleep 至少 1ms）</li><li>thread.spanwait：强迫当前线程暂停，使 cpu 有机会切换到另一个线程运行（实际执行一个特殊 cpu 指令，非超线程 cpu 会被忽略？）</li></ul></li></ul></li><li>乐观并发模式<ul><li>假设多线程操作互不干涉</li><li>在提交数据更新前，检查数据是否被修改</li><li>若被修改，则回滚重新执行</li><li>适用于数据争用不大，冲突较少环境，偶尔回滚事物成本低于读取数据时锁定数据的成本</li><li>do～while 循环中执行操作，并使用 interlocked.compareexchsnge 判断是否修改成功，修改失败则重新执行代码块</li></ul></li><li>内核模式构造<ul><li>为什么慢：要求操作系统配合、在内核对象上调用的每个方法都造成调用线程从托管代码转换为本机用户模式代码，再转换为本机内核模式代码，然后，还要朝相反方向一路返回（这些转换耗费更多 cpu 时间）</li><li>优点：发生竞争时，没有竞争赢的线程会阻塞，能更有效节省资源</li><li>WaitHandle<ul><li>EventWaitHandle（事件）<ul><li>AutoResetEvent</li><li>ManualResetEvent</li></ul></li><li>Semaphore（信号量）</li><li>Mutex（基于事件和信号量）</li></ul></li><li>在一个内核模式构造上调用的每个方法都代表一个完整的内存栅栏</li><li>所有这些类的构造器都在内部调用 win32 的 createevent、createsemaphore 或 openmutex 并传递一个 string 实参</li><li>内核模式构造的一个常见用途是创建在任何时刻只允许它的一个实例运行的应用程序</li><li>事件（event）<ul><li>其实只是由内核维护的 boolean 变量，事件为 false ，在事件上等待的线程就阻塞；事件为 true ，就解除阻塞</li><li>自动重置事件 (AutoResetEvent)：为 true 时只唤醒一个阻塞的线程 (因为在解除第一个阻塞线程时，内核将事件自动重置回 false，造成其余线程继续阻塞)</li><li>手动重置事件 (ManualResetEvent)：解除正在等待它的所有线程的阻塞，因为内核不会将事件自动重置回 false</li></ul></li><li>信号量 (semaphore)<ul><li>其实就是由内核维护的 int32 变量</li><li>信号量为 0 时，等待的线程会阻塞</li><li>信号量大于 0 时，解除阻塞</li><li>在信号量上等待的线程解除阻塞时，内核自动从信号量计数减 1</li><li>同时信号量还关联一个最大计数</li><li>自动重置事件在行为上和最大计数为 1 的信号量相似，区别在于：自动重置事件连续多次调用 set 无妨，信号量上连续多次调用 release 会使内部计数一直递增（超过最大计数会抛出异常）</li></ul></li><li>互斥体 (mutex)<ul><li>与 autoresetevent 及 计数为 1 的 semaphore 类似</li><li>三者都是一次只释放一个正在等待的线程</li><li>互斥体有一些额外逻辑，造成比其它构造更复杂<ul><li>查询并记录调用线程 id，确保调用 releasemutex 的是获取 mutex 的线程（如果不是就会抛出异常）</li><li>拥有 mutex 的线程因为任何原因终止，在 mutex 上等待的线程会被唤醒并抛出异常</li><li>mutex 还维护一个递归计数，指出拥有该 mutex 线程拥有了它多少次：拥有线程再次在 mutex 上等待会递增计数，releasemutex 递减计数，只有计数变成 0，另一个线程才能成为 mutex 的拥有者 zc</li><li>即 mutex 对象支持递归</li><li>因此 mutex 会更慢</li></ul></li></ul></li></ul></li><li>套间（apartment）<ul><li>定义了一组对象的逻辑组合，这些对象共享同一组并发性和重入限制</li><li>应该线程想要使用 com，必须先进入一个套间</li><li>com 规定，只有运行在对象套间中的线程才能访问该对象</li><li>STA（单线程套间）、MTA（多线程套间）</li></ul></li></ul><h1 id="第三十章-混合线程同步构造"><a class="anchor" href="#第三十章-混合线程同步构造">#</a> 第三十章 混合线程同步构造</h1><ul><li>为了提升应用程序总体性能，可以让一个现在在用户模式 自旋 一小段时间，再让线程转换为内核模式</li><li>在 clr 中，对任何锁方法的调用都构成了一个完整的内存栅栏<ul><li>在栅栏之前写入的任何变量都必须在栅栏之前完成</li><li>在栅栏之后的任何变量读取都必须在栅栏之后开始</li></ul></li><li>monitor 与同步块<ul><li>monitor 提供了支持自旋、线程所有权、和递归的互斥锁</li><li>堆中每个对象都可以关联一个名为 同步块 的数据结构</li><li>同步块包含字段，为内核对象、拥有线程的 id、递归计数及等待线程计数提供相应字段</li><li>monitor 接受任何堆对象引用，其方法对指定对象的同步块中字段进行操作</li><li>为堆中每个对象都关联一个同步块数据结构很浪费，为节省内存 clr 团队采用一种更经济的方式提供上述功能<ul><li>clr 在初始化时在堆中分配一个同步块数组</li><li>每当一个对象在堆中创建时，都有两个额外字段与其关联：类型指针 (包含类型的类型对象的内存地址)、同步块索引 (包含同步块数组中的一个整数索引)</li><li>一个对象在构造时，其同步块索引初始化为 -1，表明不引用任何同步块</li><li>调用 monitor.enter 时，clr 在数组种找到一个空白同步块，并设置对象的同步块索引，使其引用同步块</li><li>调用 monitor.exit 时，会检查是否有其它任何线程正在等待使用对象的同步块</li><li>若没有线程在等待它，同步块就自由了，exit 将对象同步块索引设回 -1</li><li>自由同步块将来可以被另一个对象关联复用</li><li>注：因此每个对象的同步块索引都隐式为公共的，因此推荐使用私有锁</li></ul></li><li>问题<ul><li>变量能引用一个代理对象 (派生自 marshalbyrefobject)，但锁定的是代理对象而不是代理引用的实际对象</li><li>传递类型对象引用，类型对象以 appdomain 中立方式加载的话，线程就会跨越进程中所有 appdomain 在那个类型上获取锁，破坏了 appdomain 提供的隔离能力</li><li>字符串可以留用，跨越 appdomain 传递字符串时传递的是引用，字符串关联的同步块索引可变（所以不要用字符串做锁）</li><li>传递值类型会导致装箱，每次都相当于是不同对象</li><li>MethodImpl (MethodImplOptions.Synchronized) 特性会导致方法被 monitor 包围，若为实例方法，实例类型会被传递、若为静态方法，类型的类型对象会被传递，造成锁定 appdomain 中立类型（不要使用该特性）</li><li>调用类型构造器（静态构造器）时 clr 为了确保只有一个线程初始化类型对象及其静态字段，也会加锁，也可能会有问题 —— 因此尽量避免使用类型构造器，或使其尽量简短</li></ul></li><li>不建议使用 lock 语句<ul><li>其中使用 try catch 捕获异常，可能会导致线程访问损坏数据</li><li>这也会导致性能降低</li></ul></li><li>lockTaken 变量：假设一个线程进入 try 块，且在调用 monitor.enter 前退出，就不应该调用 finally 种的 exit 释放锁，该变量初始化为 false ，enter 将其设为 true，以解决这个问题（spinlock 也支持这个模式）</li></ul></li><li>ReaderWriterLockSlim<ul><li>一个线程向数据写入时，阻塞请求访问的其它所有线程</li><li>一个线程从数据读取时，其它请求读取线程运行进入，请求写入线程被阻塞</li><li>请求写入线程执行完毕后，要么解除一个写入线程阻塞，要么解除所有读取线程阻塞</li><li>请求读取的所有线程结束后，解除一个请求写入线程阻塞</li><li>该类支持线程所有权和递归功能，不过这个功能代价较高且很少需要，可以在构造函数传入 lockrecursionpolicy.norecursion<ul><li>注：为了以线程安全维护这些信息，内部甚至要使用一个 互斥的自旋锁</li></ul></li><li>提供方法将 reader 线程升级为 writer 线程（降低性能，一般也没什么用）</li><li>自己实现一个读写锁会更快：要么允许一个 writer 线程访问，要么允许多个 reader 线程访问</li></ul></li><li>Countdownevent<ul><li>使用一个 manualeventresetdlim</li><li>阻塞一个线程，直到内部计数器变成 0（行为与 semaphore 相反）</li><li>一旦其 currentcount 变成 0 后，就不能再更改了（再更改会抛出异常，tryaddcount 会返回 false）</li></ul></li><li>Barrier<ul><li>这个类型用于处理比较稀有问题，一般用不上</li><li>控制的一系列线程需要并行工作，以在一个算法不同阶段推进</li><li>当 clr 使用垃圾回收器服务器版本时，gc 算法为每个内核都创建一个线程</li></ul></li><li>线程同步构造小结<ul><li>代码尽量不阻塞任何线程</li><li>避免多个线程同时操作数据</li><li>尽量使用 volatile 和 interlocked 方法（或 视情况使用 interlocked anything 模式）</li><li>不要刻意把线程 打上标签：即不要创建用于特定任务的线程，而应该从线程池出租短暂时间</li><li>要在一些列操作中原子性地操作状态，可以使用 monitor，也可使用 readerwriter 锁代替 monitor，不过需要清楚场景。另外还有 spinlock 比 monitor 快，不过更可能浪费 cpu 时间</li></ul></li><li>双检锁技术（double-check locking）<ul><li>经常用于 将单例推迟到首次请求该对象时进行</li><li>单例延迟初始化前提是：可能根本不需要创建单例，否则在类构造器中创建单实例对象更经济和简单</li><li>在锁操作中，创建的变量对象可能被更换顺序<ul><li>想法是：生成对象 (分配内存)- 调用构造器初始化 - 赋值</li><li>实际有可能：生成对象 (分配内存)- 赋值 - 调用构造器</li><li>正常情况没事，但要是在给变量赋值后，调用构造器之前另一个线程访问了就有问题了</li><li>为解决这种极端问题，可以使用 volatile 方法为变量赋值（将变量直接标记为 volatile 也可以，但是会使所有读取操作具有易变性，导致性能无谓损害）</li></ul></li></ul></li><li>可能根本不需要创建单例可以使用双检锁，否则可以使用 贪婪模式，利用 clr 保证对调用类构造器的线程安全性特点：首次访问类的任何成员都会调用类构造器<ul><li>缺点：若类定义了其它任何静态成员，就会在访问其它任何静态成员时创建 单例 对象</li></ul></li><li>懒加载模式<ul><li>Lazy 泛型：也可以传递线程安全枚举支持<ul><li>executionandpublication 使用双检锁技术</li><li>publicationonly 使用 interlocked.compareexchange 技术</li></ul></li><li>LazyInotializer 静态方法</li></ul></li><li>条件变量模式<ul><li>自旋：让线程连续 自旋，反复测试条件</li><li>但是自旋会浪费 cpu 时间，而且不能对构成复合条件的多个变量进行原子性的测试</li><li>monitor 支持根据一个复合条件来同步操作，而且不会浪费 cpu 资源：wait、pulse (解除等待最久线程)、pulseall</li></ul></li><li>异步的同步构造<ul><li>避免阻塞线程，否则 cpu 会创建更多线程处理任务，使用异步函数等待互斥资源</li><li>semaphoreslim<ul><li>waitasync</li><li>一般创建最大计算为 1 可实现保护资源的互斥访问</li><li>与 monitor 类似，只是不支持线程所有权和递归（正好）</li></ul></li><li>reader-writer 语义：concurrentexclusiveschedulerpair</li></ul></li><li>并发集合类<ul><li>尽量不要调用阻塞接口</li><li>concurrentstack、concurrentqueue<ul><li>内部使用 interlocked 方法操纵集合</li></ul></li><li>concurrentbag<ul><li>每个线程一个迷你集合，使用 interlocked 添加数据至迷你集合</li><li>试图取出数据时，先检查调用线程的迷你集合，若没有，再使用 monitor 检查其它线程的迷你集合（『窃取』数据项）</li></ul></li><li>concurrentdictionary<ul><li>内部使用 monitor，不过对数据项进行操作时，锁只被占用极短时间</li></ul></li><li>concurrentstack、concurrentqueue 和 concurrentbag 都实现了 iproducerconsumercollection 接口，可通过 blockingcollection 转变为一个阻塞集合（生产者 - 消费者 模式）<ul><li>尽量不要使用，它们生命意义就在于阻塞线程</li><li>内部使用 semaphoreslim 进行控制</li><li>completeadding 方法通知消费者不再生产，造成 getconsumingenumerable 的一个 foreach 循环终止</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;《CLR VIR C#》 这本书太厚，笔记也记得太多，因此还是分成两篇上传&lt;/p&gt;
&lt;p&gt;这是第二篇，主要记录多线程相关章节笔记&lt;/p&gt;
&lt;h1 id=&quot;第二十六章</summary>
      
    
    
    
    <category term="阅读笔记" scheme="https://wangjiaying.top/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
    <category term="笔记" scheme="https://wangjiaying.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CLR VIR C# 笔记(上)</title>
    <link href="https://wangjiaying.top/2023/04/06/ClrVirCS%E7%AC%94%E8%AE%B0-%E4%B8%8A/"/>
    <id>https://wangjiaying.top/2023/04/06/ClrVirCS%E7%AC%94%E8%AE%B0-%E4%B8%8A/</id>
    <published>2023-04-06T05:27:19.000Z</published>
    <updated>2023-04-28T09:12:24.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>本来计划的是 3 月份就看完，结果 4 月 2 号了还剩两章，虽然这跟到后面看得更仔细有关，但是公司上个月突然要求加起班来也有关系，导致每周上班时间只有两天可以提前回家看书。</p><p>不过，在昨天 清明节 总算把这本书看完了！</p><p>看了下语雀的笔记创建记录：</p><p><img data-src="/blogimages/2023/2023-04-06/Snipaste_2023-04-06_13-30-02.jpg" alt="" /></p><p>已经记不起什么时候开始看的，笔记是 2 月 27 日创建的，以这个时间点开始也一个月出头了，基本上回家就是看这本书</p><p>刚拿到手感觉是真厚，最开始做笔记只按照分类记录了重点：后面觉得这样不大行，越记就越庞大</p><p>而且书的章节本身其实可以看做就是有根据功能分门别类的，于是从第九章开始，以章节划分开始记录</p><ul><li><p>因为是用手机记录的，所以有的英文字母用的小写</p></li><li><p>《CLR VIR C#》 太厚了，由于记录太多，分成了成两篇上传</p></li></ul><p>总的来说，值得一看，获益良多。</p><h1 id="基本名称"><a class="anchor" href="#基本名称">#</a> 基本名称</h1><ul><li>FCL：framework class library</li><li>CTS：common type system</li><li>CLI：cts 和其它组件提交给 ECMA 形成（公共语言基础结构）</li><li>CLS：公共语言规范，common language specification，语言互操作的标准规范，为支持不同语言互操作，详细定义了一个最小功能集，是 clr/cts 的子集。规定类型成员要么是字段（数据），要么是方法（行为）<ul><li>CLSCompliantAttribute 可以标记类中公共成员必须符合 cls 规范（但是反射可以强行访问非公共、不合 cls 的自字段）</li></ul></li><li>CIL：Common Intermediate Language 通用中间语言，是介于源代码和本机机器指令中间的代码</li><li>蓝色体 代表关键字，浅蓝色体 代表类型，比如大写 string 表示基元类型</li><li>值类型 equals 最好重写，内置反射调用</li><li>友元程序集</li><li>dynamic 基元类型<ul><li>实际上就是 Object</li><li>字段、参数或返回类型若使用 dynamic，编译器会附加 dynamicattribute 特性（局部变量使用不会附加特性，因为限制在方法内部使用）</li><li>所有表达式都能隐式转为 dynamic：因为所有表达式最终都生成从 Object 派生的类型</li><li>虽然 Object 不允许隐式转换为其它类型，但是 dynamic 可以，不过运行时会额外验证转型保证类型安全性</li></ul></li><li>分部类（partial）</li><li>分部方法<ul><li>若没有对分部方法 实现，调用分部方法的代码会直接被编译器优化掉，也不会生成分部方法的元数据：包括调用方法传递参数造成的计算也会被优化掉，可以提高性能</li><li>只能在分部类或结构中声明</li><li>分部方法只能返回 void，参数不能用 out 标记：因为方法在运行时可能不存在</li><li>如果附加了特性，编译器会合并两个方法的特性（参数特性也一样）</li><li>分部方法被视为 private（不过编译器简直添加访问修饰符？）</li></ul></li><li>csp（component software programming） 是 oop 发展极致结果</li><li>system.appdomain</li><li>显式接口方法实现 (EIMI)：将定义方法的接口名称作为方法名前缀（explicit interface method implementation）</li><li>基类还是接口？<ul><li>『属于』 和 『能做』 的关系</li></ul></li></ul><h1 id="其它"><a class="anchor" href="#其它">#</a> 其它</h1><ul><li>clr 基于栈</li><li>操作符重载：public static （type） operator（操作符）</li><li>转换操作符重载：一种类型转换为另一种类型</li><li>要求参数类型和返回类型二者其一必有定义转换方法类型相同</li><li>隐式：public static implicit operator （return type）（in type）</li><li>显式：public static explicit operator （return type）（in type）</li><li>c# 编译器检测到代码正在使用的某个类型对象实际期望的是另一种类型对象，则查找能隐式转换操作符方法，若找到则生成调用方法代码（显式也一样）</li><li>使用强制类型转换表达式时，c# 生成代码调用显式操作符重载方法，使用 c# as is 时则不会调用</li><li>扩展方法：<ul><li>实际上是对一个静态方法的调用（所以不会对调用实例做 null 检查，扩展方法可能接受 null 实例）</li><li>可以为接口定义扩展方法</li><li>可以为委托类型定义扩展方法</li><li>可以为枚举添加扩展方法</li><li>扩展方法是静态方法，若作为委托，编译器是耍了小花招的，生成特殊代码来处理引用的静态方法传递第一个 this (调用实例) 参数</li><li>编译器会先搜索类型自身或基类是否存在对应参数实例方法，没有找到就会搜索所有静态文件找到对应扩展方法，并生成 il 代码调用静态方法</li><li>在 c# 中，一旦用 this 关键字标记了某个静态方法的第一个参数，编译器就会在内部向该方法应用 extensionattribute 特性，并持久化存储在元数据中，任何静态类只要包含了至少一个扩展方法，其元数据也会应用该特性，同理任何程序集只要包含了一个符合上述特点的静态类，元数据也会应用该特性 —— 以加快编译器搜索速度：可以只扫描指定程序集 - 指定静态类 - 指定扩展方法</li><li>扩展一个类型时，其派生类也会被扩展</li><li>扩展方法不能引用它们正在扩展的类的私有成员或受保护成员，因此不能完全替代更传统的类继承</li></ul></li><li>decimal 是个类</li><li>内联代码？</li><li>委托实际只是提供了 4 个方法的一个类定义<ul><li>构造器、invoke 方法、begininvoke 方法、endinvoke 方法</li></ul></li><li>协变指定返回类型的兼容性</li><li>逆变指定参数的兼容性</li><li>convert.changetype</li></ul><h1 id="il"><a class="anchor" href="#il">#</a> IL</h1><ul><li>call：可调用静态方法，实例方法和虚方法<ul><li>调用实例方法和虚方法必须指定引用了对象的变量，该指令假定该变量不为 null</li></ul></li><li>callvirt：可调用实例方法和虚方法，不能调用静态方法（需要对变量做 null 检查，因此比 call 慢）<ul><li>并且调用虚实例方法时，还需要检查发出调用对象的实际类型，然后以多态方式调用</li></ul></li><li>编译器会在程序集方法定义表中用标志 (flag) 指明方法是实例方法、虚方法、静态方法<ul><li>调用这些方法时，编译器会判断对应方法定义的标志 (flag) 生成对应调用指令</li></ul></li><li>c# 用 callvirt 指令调用所有实例方法</li><li>编译器调用值类型定义的方法时，倾向于使用 call 指令<ul><li>因为值类型实例的本质保证永不为 null</li><li>并且要是以虚方式调用值类型中虚方法，会导致值类型装箱</li></ul></li><li>无论 call 还是 callvirt 都接受隐藏的 this 实参作为方法第一个参数（操作的对象）</li><li>设计类型应该尽量减少虚方法数量：<ul><li>~ 调用虚方法比非虚方法更慢：clr 必须在运行时查找对象类型，以判断要调用的方法由哪个类型定义（密封类可由 jit 优化调用，因为不需要判断是否还有派生类重载）</li><li>密封类型的虚方法调用，会被优化，性能更好</li><li>一旦将某个方法、属性或事件设置为 virtual，基类就会丧失对其行为和状态的部分控制权</li><li>~jit 不能内嵌（inline）虚方法</li><li>new virtual 可以重写虚方法</li></ul></li><li>内联函数：<ul><li>MethodImpl(MethodImplOptions.AggressiveInlining)</li></ul></li></ul><h1 id="类"><a class="anchor" href="#类">#</a> 类</h1><ul><li><p>字段定义时<strong>直接赋值</strong>，称为 内联初始化</p></li><li><p>内联初始化：指在代码中直接赋值来初始化，而不是将对构造器的调用写出来</p></li><li><p>实际上 c# 是在构造器中初始化的，这只是提供的一种简化语法</p></li><li><p>使用内联语法而非构造器中赋值，会有一些性能问题需要考虑</p></li><li><p>有多个构造器时，每个构造器都会被插入内联变量初始化代码，然后调用基类构造方法，最后插入构造方法自身的代码（因此存在 代码膨胀效应）—— 若是在构造函数中自己初始化，可以复用同样的初始化构造函数，以减少这种情况</p></li><li><p>对引用类型标记 readonly，只是单纯这个地址引用不可变，其内部数据依然可变</p></li><li><p>反序列化使用 getuninitializedobject 为对象分配内存，避免调用构造器（另外，memberclone 也不会导致调用）</p></li><li><p>避免在构造函数中调用虚方法：因为父类构造函数初始化更早，子类若重写了虚方法的行为不可预测</p></li><li><p>声明为密封类可提高性能，JIT 就不再需要考虑其他的可能性而放开手脚进行优化：</p><ul><li>密封类型的虚方法调用，会被优化，性能更好</li><li>数组是支持协变的：JIT 在将一个项目分配到数组之前必须检查对象的类型。当使用密封类型时，JIT 可以取消检查</li><li>数组转换成 Span：与数组同理</li><li>当对象类型转换时：当转换到一个非密封的类型时，运行时必须检查层次结构中的所有类型</li></ul></li><li><p>编译器自动生成的代码都是 sealed 密封类</p></li></ul><h1 id="值类型"><a class="anchor" href="#值类型">#</a> 值类型</h1><ul><li>值类型没有默认无参构造函数（所以也不支持内联初始化语法）</li><li>并且不允许定义无参构造函数（但是 clr 允许）</li><li>值类型的构造函数只有显式调用才会执行</li><li>结构体构造函数中，可以允许直接：this=new xxx () 初始化所有字段，然后再覆盖</li></ul><h1 id="静态构造方法类型构造器"><a class="anchor" href="#静态构造方法类型构造器">#</a> 静态构造方法（类型构造器）</h1><ul><li>只能定义一个无参的静态构造方法，由 clr 在类型第一次被访问时调用</li><li>只能访问静态字段（用来初始化它们）</li><li>结构体（值类型）静态字段也可以使用内联初始化语法</li><li>类型构造器调用比较麻烦：jit 在编译一个方法时，会查看代码中引用了哪些类型，任何一个类型定义了静态构造器，编译器会检查当前 appdomain 是否已经执行过，若没有执行，则添加执行代码调用<ul><li>初始化调用时，clr 会使用互斥线程同步锁保证同一个 appdomain 只会初始化一次</li><li>所以是线程安全的，因此单例可以这样整？饿汉模式？</li></ul></li><li>！值类型的构造方法可能不会被调用</li></ul><h1 id="工具"><a class="anchor" href="#工具">#</a> 工具</h1><ul><li>*.rsp：响应文件，包含了一组编译器命令行开关的文本文件，使用 csc.exe @my.rsp 代码.cs</li></ul><p>全局 csc.rsp</p><ul><li>AL.exe：程序集链接器</li><li>assemblyversion：非常重要，存储于 assemblydef 清单元数据表，唯一性标识程序集</li></ul><h1 id="第九章-参数"><a class="anchor" href="#第九章-参数">#</a> 第九章 参数</h1><p>可选参数和命名参数</p><ul><li>一旦为参数分配了默认值，编译器会对参数应用 optionalattribute 特性及 defaultparametervalueattribute 特性。<strong>并</strong>生成对应元数据</li><li>后续编译器发现某个方法调用缺失部分实参，就可以确定是否是可选实参，并从元数据提取默认值自动嵌入调用中</li></ul><p>隐式类型局部变量</p><ul><li>var：只能声明局部变量，由编译器推断</li></ul><p>传引用方式向方法传递参数</p><ul><li>out</li><li>ref</li><li>两者生成 il 代码一样，只有元数据有一个 bit 差异：用于记录是 out 还是 ref</li><li>从 il 和 clr 来看：都是导致传递指向实例的一个指针（主要差别在于编译器的验证准则）</li><li>大的值类型可避免复制开销</li></ul><p>可变参数：</p><ul><li>params：必须位于参数最后一位</li><li>编译器会应用 paramarrayattribute 特性</li><li>调用时，若没有找到对应的普通方法，则生成代码构造一个数组来调用它</li><li>会有额外性能开销，例如造成数组分配：数组必须在堆上分配、数组元素必须初始化、数组内存最终会被垃圾回收（传递 null 不会分配）</li></ul><p>参数和返回类型设计规范</p><ul><li>参数尽量指定最弱类型：例如接口比基类更好</li><li>返回类型：最好声明为最强类型 (防止受限特定类型)</li></ul><h1 id="第十章-属性"><a class="anchor" href="#第十章-属性">#</a> 第十章 属性</h1><p>属性看起来和字段类似，但本质是方法<br />取决于属性定义，编译器在程序集生成以下两项或三项：</p><ul><li>代表 get 访问器的方法</li><li>代表 set 访问器的方法<ul><li>set 编译出来的方法会有定义类型的 value 默认参数</li></ul></li><li>程序集元数据会有属性定义 (必然生成)<ul><li>包含一些标志 (flag) 及属性类型等信息</li><li>用于在 属性 这个抽象概念与其访问器方法之间建立一个联系</li><li>clr 不使用这种元数据信息，主要是给编译器或其它工具通过 <strong>PropertyInfo</strong> 来获得信息</li></ul></li></ul><p>自动属性（Automatically Implemented Property）简称 AIP</p><ul><li>其私有字段名由编译器自动生成，因此序列化数据可能出问题</li></ul><p>与字段对比：</p><ul><li>属性不能作为 out 或 ref 传引用</li><li>属性方法可能抛出异常，字段访问永远不会</li><li>属性方法可能花较长时间运行，字段访问总是立即完成</li><li>连续多次调用，属性方法每次可能返回不同值</li><li>属性方法可能需要额外内存，或返回对象并非指向对象状态一部分，造成对返回对象的修改作用不到原始对象上（使用会返回一个拷贝的属性很容易引起混淆）</li></ul><p>如果属性实现了 IEnumerable，属性就被认为是集合</p><p>可以这样初始化：</p>Prop={"1","2","3"}dic={{"1",1},{"2",22},{"3",33}}<hr /><p>匿名类型</p><ul><li>与匿名函数一样，会生成一个新的类</li><li>编译器定义匿名类型时，若发现源代码中定义了多个具有相同结构的匿名类型，会只生成一份类型定义，虽然还是会创建多个实例<ul><li>相同结构：相同名称和类型，指定顺序相同</li></ul></li></ul><p>Tuple</p><ul><li>Tuple.Create 简化代码，自动推断类型</li></ul><p>System.dynamic.ExpandObject<br /> 有参属性</p><ul><li>C# 称为 索引器</li><li>可以将 索引器 看作对 [] 符号的重载</li><li>一个类型可定义多个索引器</li><li>默认索引器名称为 set_Item，使用 IndexerName 特性 可以让编译器为索引器 (属性) 自动生成的名字进行自定义重命名<ul><li>特性本身不进入元数据</li><li>例如 string 的索引器名称是 Chars</li></ul></li></ul><p>性能</p><ul><li>对于简单的 get、set 访问器方法，JIT 会将代码内联（调试版本不会优化）</li></ul><h1 id="第十一章-事件"><a class="anchor" href="#第十一章-事件">#</a> 第十一章 事件</h1><ul><li>委托是不可变的</li><li>事件参数传递：EventArgs</li><li>事件成员：EventHandler</li><li>事件编译出的添加、移除方法利用原子操作，以线程安全的一种模式更新值</li><li>试图删除从未添加的方法，Delegate 内部不会做任何事情（不会抛出异常或警告）</li><li>除了自动生成的三个构造代码，编译器还会在元数据附加记录项，用于建立 &quot;事件&quot; 抽象概念 与 add remove 访问器方法的联系（flag、基础委托类型、访问器方法）<ul><li>不过 clr 本身是不会用这些元数据信息的，只编译器等工具会利用这些元数据信息， EventInfo</li></ul></li><li>通过 +=、-= 移除添加事件，会被编译器编译为调用自动生成的 add、remove 方法</li><li>移除事件时，需要扫描委托列表寻找一个恰当匹配：包装方法和传递方法相同</li><li>可以显式实现事件，避免编译器自动生成代码：事件访问器</li></ul><h1 id="第十二章-泛型"><a class="anchor" href="#第十二章-泛型">#</a> 第十二章 泛型</h1><ul><li>面向对象 代码重用，泛型 算法重用</li><li>泛型引用类型、泛型值类型、泛型接口、泛型委托、泛型方法（不允许泛型枚举类型）</li><li>优势<ul><li>源代码保护</li><li>类型安全</li><li>更清晰代码：编译器强制类型安全性，减少强制类型转换次数</li><li>更好的性能：省略强制类型转换消耗；避免值类型装箱消耗</li></ul></li><li>泛型同样会创建类型对象（type object）内部数据结构：开放类型，开放类型不允许创建实例</li><li>代码引用泛型类型时，指定泛型参数后成为 封闭类型；可仅指定部分泛型参数，会导致创建新的开放类型对象</li><li>泛型的静态构造方法和静态字段，针对每个封闭类型都有一份，不共享</li><li>使用泛型类型并指定类型实参时，实际是在 clr 中定义了一个新的类型对象，新类型派生自泛型父类</li><li>缺点<ul><li>代码爆炸：clr 优化方式是对引用类型进行共享 (都属于指针操作)，但是值类型实参不行，因为可能要用不同的本机 cpu 指令操纵这些值</li></ul></li><li>委托实际只是提供了 4 个方法的一个类定义<ul><li>构造器、invoke 方法、begininvoke 方法、endinvoke 方法</li></ul></li><li>协变量：泛型类型参数可以从一个类更改为它的某个基类</li><li>逆变量：泛型类型参数可以从一个类更改为它的某个派生类</li><li>不变量：泛型参数不能更改</li><li>泛型方法<ul><li>作为 out/ref 实参传递的变量必须具有与方法参数相同类型</li><li>编译器支持在调用泛型方法时进行 类型推断</li><li>有重载时，编译器 (类型推断) 先考虑明确匹配，再考虑泛型匹配 (也可指定泛型实参明确调用泛型方法)</li></ul></li><li>泛型约束<ul><li>限制能指定成泛型实参的类型</li><li>可用于泛型类型的类型参数、泛型方法类型参数</li><li>派生类不能修改重写的虚方法在父类指定过的约束</li><li>主要约束：非密封类的一个引用类型<ul><li>指定类型要么是约束类型相同类型，要么是约束类型的子类</li><li>特殊主要约束：class (引用类型)、struct (值类型)</li></ul></li><li>次要约束：可指定零个或多个次要约束，代表接口类型</li><li>类型参数约束 (裸类型约束)：指定类型实参要么是约束类型，要么是约束类型子类<ul><li>Exp&lt;T,TBase&gt; where T:TBase</li></ul></li><li>构造器约束：new ()，约束类型实参是实现了公共无参构造方法的非抽象类型</li></ul></li><li>default (T)：引用类型设为 null，值类型将所有位设为 0</li><li>泛型类型转型</li><li>与 null 比较（值类型未约束为 struct 情况才能用但始终非 null）</li><li>不允许将类型参数约束为具体值类型<ul><li>因为不可能存在从值类型派生的类型，如果允许约束成具体值类型，还不如不要泛型</li></ul></li><li>泛型类型变量作为操作数使用 (操作符运算)<ul><li>值类型不允许</li></ul></li></ul><h1 id="第十三章-接口"><a class="anchor" href="#第十三章-接口">#</a> 第十三章 接口</h1><ul><li>终极基类 System.Object 定义 4 个公共实例方法：tostring、gethashcode、equals、gettype<ul><li>因此接口也允许调用 Object 方法</li></ul></li><li>Object 派生类继承：<ul><li>方法签名：使代码认为自己是在操作 Object 类实例，但实际操作的可能是其它类实例</li><li>方法实现：使开发人员定义 Object 派生类时不必手动实现 Object 的方法</li></ul></li><li>接口：对一组方法签名进行统一命名<ul><li>因此还可定义事件、无参属性和有参属性 (索引器)，因为它们本质是方法</li></ul></li><li>在 clr 看来，接口定义就是类型定义：clr 会为接口类型对象定义内部数据结构，并能通过反射机制查询接口类型功能</li><li>实现接口的方法若没有显式标记为 virtual，编译器会自动标记为 virtual+sealed<ul><li>派生类不能重写 sealed 方法，但可以重新继承同一接口并提供自己的实现</li></ul></li><li>值类型也可实现零个或多个接口，但值类型的实例转换为接口时会导致装箱<ul><li>因为接口变量是引用，必须指向堆上对象，使 clr 能检查对象的类型对象指针，从而判断对象的确切类型</li><li>调用已装箱值类型方法时，clr 会跟随对象的类型对象指针找到类型对象的方法表，从而调用正确方法</li></ul></li><li>类型加载到 clr 时，会为对象创建并初始化一个方法表<ul><li>类型引入的每个新方法都有对应记录项</li><li>继承的所有虚方法也会添加记录项 (有继承层次基类定义的，也有接口类型定义的)</li></ul></li><li>显式接口方法实现 (EIMI)：将定义方法的接口名称作为方法名前缀<ul><li>不允许指定访问性，编译器生成元数据时，会自动设置为 private</li><li><ol><li>没有文档解释具体实现，没有智能感知支持、2. 值类型实例转换为接口时发生装箱、3. EIMI 不能由派生类调用</li></ol></li></ul></li><li>接口方法理想情况下应该是强类型的</li><li>C# 编译器为接口约束生成特殊 il 指令 (constrained)，导致在值类型上调用接口方法而不装箱（不用接口约束便无法生成，调用接口方法就会导致装箱）<ul><li>指：约束了泛型参数一定得实现某个接口时，实现了接口的值类型可以不装箱放进去？（待测试，搞不清楚）</li><li>例外：值类型实例上调用</li></ul></li></ul><h1 id="第十四章-字符-字符串和文本处理"><a class="anchor" href="#第十四章-字符-字符串和文本处理">#</a> 第十四章 字符、字符串和文本处理</h1><ul><li>字符 (Char)：总是表示成 16 位 Unicode 代码值</li><li>Char getunicodecategory 方法返回一个枚举，标志该字符是由 Unicode 定义的控制字符、货币符号、小写字母、大写字母、标点符号、数学符号或者其它字符<ul><li>同时也提供了一些静态方法用于判断</li></ul></li><li>ToLowerInvariant、ToUpperInvariant：以忽略语言文化方式将字符串转换为小写或大写形式<ul><li>微软对执行大写比较的代码做了优化</li></ul></li><li>Covert 类型转换内部使用了 checked 检查</li><li>字符串<ul><li>直接使用字面值 (literal) 会被编译至元数据，并在运行时加载和引用</li><li>C# 不允许使用 new 操作符从字面值字符串构造 String 对象</li><li>il 中使用 ldstr 从元数据获得字面值字符串构造 String 对象</li><li>字面值字符串连接会被编译时直接连接并放入元数据，非字面值连接则在运行时进行</li></ul></li><li>字符串比较<ul><li>equals</li><li>compare</li><li>startswith</li><li>endswith</li><li>currentculture.compareinfo.compare</li><li>StringComparer：大量不同字符串反复执行同一种比较</li></ul></li><li>字符串留用<ul><li>clr 初始化会创建一个内部哈希表，key 为字符串，value 则为托管堆中的 string 对象引用</li><li>intern、isinterned</li><li>加载时默认留用所有字面值字符串 (可设置，并取决于 clr)</li><li>除非显式调用 intern，否则不要以 字符串已留用 前提写代码</li></ul></li><li>Char 代表一个 16 位 Unicode 码值，但是不一定等同于一个抽象的 Unicode 字符<ul><li>可能需要多个字符表示一个 Unicode 字符</li><li>有的 Unicode 字符需要两个 16 位值表示，称为 高位代理项 和 低位代理项，使其能表示 100 万个以上的字符</li></ul></li><li>stringbuilder<ul><li>字符数组，超过分配大小后，会分配新的字符数组，前一个字符数组会被回收</li><li>只有超出容量或 tostring 会导致分配新的对象</li></ul></li><li>string.format：替换参数花括号中可以使用『:』指定格式化信息</li><li>定制格式化器<ul><li>IFormatProvider</li></ul></li><li>安全字符串：System.Security.SecureString<ul><li>会在内部分配非托管内存，包含一个字符数组，字符经过加密</li><li>调用操作接口时，会先 解密 - 操作 - 加密，因此性能一般</li></ul></li></ul><h1 id="第十五章-枚举类型和位标志"><a class="anchor" href="#第十五章-枚举类型和位标志">#</a> 第十五章 枚举类型和位标志</h1><ul><li>结构：简单来说只是一个结构，其中定义了一组常量和一个实例字段</li><li>枚举类型定义的符号是常量值，编译时会用数值替换符号</li><li>getunderlyingtype：获取容纳枚举类型值的基础类型</li><li>Type.getenumunderlyingtype：同上</li><li>操作符实际作用于内部的 value 实例字段</li><li>IsDefined：通过反射查找，很慢</li><li>Flag 标志：ToString 会自动拼接（不定义该标志，ToString (&quot;F&quot;) 也可以）</li></ul><h1 id="第十六章-数组"><a class="anchor" href="#第十六章-数组">#</a> 第十六章 数组</h1><ul><li>一维 0 基数组 (向量) 性能最好<ul><li>有专用 il 指令处理</li><li>访问元素时不需要从指定索引减去偏移量</li><li>索引检查会在循环外判断</li></ul></li><li>[][]：交错数组 (性能其次)</li><li>[,]：多维数组 (性能不好，最好以交错数组代替)</li><li>Array.Copy：不仅仅是将元素从一个数组复制到另一个<ul><li>方法还能正确处理内存重叠区域</li><li>方法还能在复制每个数组元素时进行必要的类型转换 (如自动装箱拆箱、转型、加宽基元类型)</li><li>BlockCopy：比之更快，不过仅支持基元类型且不提供转型能力</li></ul></li><li>结构体中可使用 fixed 嵌入 (内联) 值类型一维 0 基数组，可在栈上分配（unsafe 代码）</li></ul><h1 id="第十七章-委托"><a class="anchor" href="#第十七章-委托">#</a> 第十七章 委托</h1><ul><li>自定义委托会导致编辑器定义一个完整的类，该类继承 MulticastDelegate<ul><li>包含 4 个方法：构造器、invoke 方法、begininvoke 方法、endinvoke 方法</li><li>MulticastDelegate<ul><li>_target (Object)：当委托包装静态方法时该字段为 null，实例方法为回调方法要操作的实例对象</li><li>_methodPtr (IntPtr)：clr 用来标识要回调的方法</li><li>_invocationList (Object)：通常为 null，构造委托链时引用一个委托数组</li></ul></li></ul></li><li>所有委托都有一个接受两个参数的构造器：一个是对象引用，另一个是引用了回调方法的整数</li><li>方法地址 IntPtr 值：从 MethodDef 或 MemberRef 元数据 token 获得</li><li>健壮性：一个系统对于参数变化的不敏感性</li><li>可靠性：一个系统的正确性，固定一个参数可以产生稳定、可预测的输出</li><li>委托 target 能取到？</li><li>除非内置 Action、Func 满足不了需求，如：需要利用委托传引用、可变参数，否则不要自定义委托</li><li>不引用成员变量、局部变量的匿名方法被编译为静态匿名函数并在第一次调用时缓存委托，性能更好，因为还不需要额外 this 参数</li></ul><h1 id="第十八章-定制特性"><a class="anchor" href="#第十八章-定制特性">#</a> 第十八章 定制特性</h1><ul><li>定制特性其实是一个类型的实例<ul><li>将特性应用于目标元素时，语法类似于调用类的某个实例构造器</li></ul></li><li>特性类型本质上还是类，而类是可以应用特性的（attributeusage）<ul><li>不将 allowmultiple 明确设置为 true，特性就只能向选定目标元素应用一次</li><li>inherited：指出特性在应用于基类时，是否同时应用于派生类和重写的方法</li><li>若未设置 attributeusage，则编译器和 clr 会假定该特性能应用于所有目标元素，每个目标元素最多一次，且可继承</li></ul></li><li>可想象为：它是类的实例，被序列化成驻留在元数据中的字节流，运行时可对元数据中字节进行反序列化，从而构造出类的实例</li><li>如果只想判断目标是否应用特性，使用 isdefined 更高效：它不会构造特性对象，不会调用构造器，也不会设置字段和属性<ul><li>getcustomattribute：会构造特性对象，每次调用都会构造指定特性类型的新实例</li><li>不管调用哪个，内部都必须扫描托管模块元数据，执行字符串比较来定位指定的定制特性类，可考虑缓存结果</li></ul></li><li>两个特性实例的相互匹配：可在自己的定制特性类中重写 equals 来移除反射的使用，以提高性能（默认的 equals 会在类型一致时，再反射字段比较）</li><li>customattributedata：在查找特性的同时禁止执行特性类中的代码</li><li>conditionalattribute：条件特性类<ul><li>编译器如果发现向目标应用了该特性，仅具有指定预定义时才会在元数据中生成特性信息</li><li>应用于方法时，若无预定义，则调用方法处会代码会直接去掉</li></ul></li></ul><h1 id="第十九章-可空值类型"><a class="anchor" href="#第十九章-可空值类型">#</a> 第十九章 可空值类型</h1><ul><li>操作可空值类型的速度慢于非可空值类型</li><li>&amp;：按位与 (相同为 1，不同为 0)</li><li>|：按位或 (有 1 则 1，无 1 则 0)</li><li>对于自己的值类型重载的操作符，编译器能自动调用其可空实例的</li><li>??：如果左边为空，则返回右边操作数的值</li><li>可空值类型装箱<ul><li>当 clr 对可空值类型实例进行装箱时，若其为空，则不装箱任何东西</li><li>若不为空，则取出其中的值进行装箱</li></ul></li><li>通过可空值类型调用 gettype，会返回内部实际值类型</li></ul><h1 id="第二十一章-托管堆和垃圾回收"><a class="anchor" href="#第二十一章-托管堆和垃圾回收">#</a> 第二十一章 托管堆和垃圾回收</h1><ul><li>托管堆：clr 维护 NextObjPtr 指针</li><li>类型对象指针、同步块索引<ul><li>32 位：各自 32 位</li><li>64 位：各自 64 位，因此每个对象额外 16 字节开销</li></ul></li><li>NextObjPtr：在此放入新对象，初始化对象后，指针加上对象占用字节数得到新值</li><li>GC<ul><li>暂停所有线程，进入标记阶段</li><li>遍历堆中所有对象，将同步块索引字段中的一位设为 0</li><li>检查所有活动根，查看其引用对象</li><li>任何根若引用了堆上对象，则标记该对象：同步块索引中的位设为 1，被标记后，继续检查该对象中的根，若其中对象被标记则不重新检测</li><li>标记完成后，进入压缩阶段，压缩存活对象使其占用连续空间（大对象堆默认不压缩）<ul><li>提升将来访问性能</li><li>解决堆内存空间碎片化问题</li></ul></li><li>修改指针指向新地址 (所以使用指针需要 fixed)</li></ul></li><li>分为三代：0、1、2 代，每代容量会自动计算，运行时也会进行调节，根据应用程序要求的内存负载自动优化</li><li>GC 触发条件<ul><li>手动调用 GC（不推荐）</li><li>系统报告内存过低</li><li>CLR 卸载 AppDomain</li><li>CLR 正在关闭</li></ul></li><li>大对象：超过 85000 字节，处于第二代，默认不压缩（可能会导致内存碎片）</li><li>分为 工作站 服务器 两种 GC 模式</li><li>子模式<ul><li>并发（默认）：内存足够的情况下，可能不压缩内存，消耗内存通常比非并发更多</li><li>非并发</li></ul></li><li>手动调用回收（不推荐），会导致代的预算发生调整，最好让程序根据应用程序行为调整各代预算。</li><li>Finalize：终结器，实现其的对象成为垃圾后，在垃圾回收完毕后才调用<ul><li>可终结对象在垃圾回收时必须存活，导致被提升到下一代，临时复活后会活得比正常时间长，所以一定程度会增加内存消耗</li><li>执行时间、顺序控制不了（不要访问另外实现了终结器的对象）</li><li>clr 用一个专用的、高优先级线程执行终结器方法避免死锁（因此若有终结器方法阻塞、等待信号量会导致线程无法再调用其它终结器 -&gt; 内存泄露）</li></ul></li><li>终结器内部原理<ul><li>创建对象实例时，若发现对象定义了终结器方法，则加入终结器列表</li><li>垃圾回收时，扫描到回收对象处于终结器列表，则移除列表并添加至 f-reachable 队列</li><li>一个特殊的高优先级线程专门调用 F-reachable (可达的) 队列中的终结器方法（因此不要对执行代码的线程做出任何假设）</li><li>reachable (可达的) 使其指向对象保持可达（复活）—— 标记时，将同时递归标记对象引用的对象，所有引用对象也将保持复活</li><li>标记完成后，复活对象也会被提升到老的一代（并不理想）</li><li>最后，特殊的终结器线程清空 freachable 队列，执行每个终结器方法</li><li>下一次对老一代进行垃圾回收时，才能发现终结器对象成为真正的垃圾</li><li>所以，回收一个终结器对象需要不止一次垃圾回收，甚至也不止两次</li></ul></li><li>创建封装了本机资源的托管类型时，应该先从 SafeHandle 派生出一个类</li><li>C# 内置的托管资源操作类，如果不调用 dispose，就得等到它被垃圾回收通过终结器释放资源了</li><li>StreamWriter：会将数据缓存在自己的内存缓冲区，缓冲区满时才会将对象数据写入 Stream<ul><li>该类没有实现终结器，不显式调用 dispose 会导致数据丢失</li></ul></li><li>如果一个类要包装可能很大的本机资源，可使用对应方法提示垃圾回收器实际情况以便处理：<ul><li>GC.AddMemoryPressure</li><li>GC.RemoveMemoryPressure</li></ul></li><li>包装数量有限的本机资源：HandleCollector，计数太大就强制回收</li><li>clr 为每个 appdomain 都提供了一个 GC 句柄表<ul><li>对托管堆对象一个引用</li><li>指出如何控制或监视对象的标记</li></ul></li><li>GCHandle（结构体）用于 添加或删除 GC 句柄表记录项<ul><li>weak：可检测垃圾回收器在什么时候判定该对象在应用程序代码中不可达</li><li>weaktrackresurrection：同上，不过对象终结器 (若有的话) 已执行，内存已回收</li><li>normal：即使应用程序没有根引用该对象，该对象也必须留在内存</li><li>Pinned：即使应用程序没有根引用该对象，该对象也必须留在内存，且发生垃圾回收时，该对象内存不能压缩（需要将内存地址交给本机代码时，这个功能比较好用）</li><li>注 1：使用 clr 的 P/Invoke 机制调用方法时，clr 会自动帮忙固定实参，并在本机方法返回时解除固定。</li><li>注 2：只有将托管对象指针传递给本机代码，且本机代码方法返回后仍需使用该对象时，才需要显式使用 GCHandle 类型</li></ul></li><li>fixed<ul><li>比分配一个固定 GC 句柄高效很多</li><li>编译器在局部变量上生成一个特殊 已固定 标志，垃圾回收期间检测根内容，若根不为空则知道在压缩阶段不要移动变量引用对象</li></ul></li><li>WeakReference<ul><li>其实是包装了一个 GCHandle 实例的面向对象包装器</li><li>实例必须在堆上分配，比 GCHandle 实例更重</li></ul></li><li>ConditionalWeakTable<ul><li>内部存储了对作为 key 传递对象的弱引用（一个 WeakReference 对象），保证不会因为表的存在而使对象 被迫 存活</li><li>保证只要 key 所标识的对象在内存，值就肯定在内存中</li><li>可以实现类似 xaml 依赖属性 机制</li></ul></li></ul><h1 id="第二十二章-clr-寄宿和-appdomain"><a class="anchor" href="#第二十二章-clr-寄宿和-appdomain">#</a> 第二十二章 CLR 寄宿和 AppDomain</h1><ul><li>AppDomain<ul><li>clr 初始化时会创建第一个默认 appdomain，只有进程结束才会被销毁</li><li>相互之间不能直接访问<ul><li>相互有清晰的分隔和边界，容易单独卸载而不影响其它 appdomain</li><li>想要相互访问对象，必须 按引用封送 (marshal-by-reference)，或 按值封送 (marshal-by-value)</li></ul></li><li>可以被卸载：不支持卸载程序集，但是能卸载包含程序集的 appdomain</li><li>可以单独保护：可以设置运行权限</li><li>可以单独配置：appdomain 创建后会关联一组配置设置（涉及搜索路径、版本绑定重定向、卷影复制及加载器优化）</li></ul></li><li>windows 每个应用程序都在自己的进程地址 (虚拟地址) 空间运行，即进程隔离<ul><li>创建进程开销很大，如需要大量内存虚拟化进程地址空间</li><li>appdomain 同样提供了清晰隔离（保护、配置和终止每一个应用所需的隔离），使得可以提供一个进程运行多个托管程序</li></ul></li><li>Loader 堆<ul><li>每个 appdomain 都有自己的 loader 堆，每个 loader 堆都记录了自 appdomain 创建以来已访问过的哪些类型</li><li>loader 堆中每个类型都有一个方法表</li><li>方法表中的每个记录项都指向 jit 编译的本机代码 (前提是方法执行过)</li></ul></li><li>进程<ul><li>appdomain 1<ul><li>loader 堆</li><li>程序集</li></ul></li><li>appdomain 2<ul><li>loader 堆</li><li>程序集</li></ul></li><li>appdomain 中立 的程序集<ul><li>loader 堆</li><li>程序集：MSCorLib.dll</li></ul></li></ul></li><li>jit 编译的代码不共享，每个 appdomain 都有一份</li><li>多个 appdomain 使用的类型在每个 appdomain 都有一组静态字段</li><li>appdomain 中立的程序集：以 中立 方式加载的程序集会共享，不过以 中立 方式加载的程序集，永远不能卸载，回收其资源的唯一方法是终止进程</li><li>跨越 appdomain 边界访问对象（跨域？）<ul><li>同步执行的：一个 appdomain 方法执行完毕，才能执行另一个的方法，不能多个 appdomain 方法并发执行</li><li>按引用封送（继承 marshalbyrefobject）<ul><li>生成代理类型，并创建代理类型实例</li><li>调用方法时，切换至另一个 appdomain 执行</li><li>实例字段通过反射设置或获取</li><li>使用 租约管理器 保持原始对象存活</li><li>性能较差</li><li>应该避免静态成员（总是在调用 appdomain 的上下文访问）</li></ul></li><li>按值封送（继承普通 object）<ul><li>标记 Serializable 特性</li><li>clr 将对象的实例字段序列化成一个字节数组</li><li>从源 appdomain 复制到目标 appdomain</li><li>反序列化字节数组，这会强制 clr 将定义了 被反序列化类型 的程序集加载到目标 appdomain (若未加载)</li><li>创建对象实例，并利用字节数组中的值初始化对象字段</li><li>调用方法时，由于是真实对象，因此不会发生 appdomain 线程切换（卸载源 appdomain 也不再影响该对象）</li></ul></li></ul></li><li>卸载 appdomain：步骤</li><li>监视 appdomain<ul><li>appdomain 静态 MonitoringEnabled：设置为 true 后便不能关闭</li><li>开启后，可查询（只保证在上一次垃圾回收时是准确的）：</li><li>MonitoringSurvivedProcessMemorySize：当前 clr 所有 appdomain 使用的字节数</li><li>MonitoringTotalAllocatedMemorySize：特定 appdomain 已分配字节数</li><li>MonitoringSurvivedMemorySize：特定 appdomain 当前正在使用的字节数</li><li>MonitoringTotalProcessorTime：特定 appdomain 的 cpu 占用率</li></ul></li><li>appdomain firstchance 异常通知<ul><li>每个 appdomain 都可关联一组回调方法，clr 开始查找 appdomain 中的 catch 块时被调用</li><li>可利用此做日志记录操作</li></ul></li><li>代码运行时会访问其它类型，引用另一个程序集中类型时，clr 会定位所需程序集，并将其加载到同一个 appdomain 中</li><li>关闭进程：Environment.Exit</li></ul><h1 id="第二十三章-程序集加载和反射"><a class="anchor" href="#第二十三章-程序集加载和反射">#</a> 第二十三章 程序集加载和反射</h1><ul><li>clr 不提供卸载单独程序集的能力</li><li>程序集加载<ul><li>引用另一个程序集中类型时，clr 会定位所需程序集，并将其加载到同一个 appdomain 中</li><li>clr 内部也是调用 assembly 静态 load 方法</li><li>appdomain 也提供了 load 方法<ul><li>不过是实例方法</li><li>clr 通过发出调用的 appdomain 设置定位和加载（可能找不到）</li><li>存在问题，应该避免</li></ul></li><li>loadfrom<ul><li>首先调用 assemblyname 的 静态 getassemblyname 方法打开指定文件</li><li>找到 assemblyref 元数据表的记录项，提取程序集标识信息</li><li>以 assemblyname 形式返回（并关闭文件）</li><li>随后 loadfrom 方法内部调用 assembly 静态 load 方法，将 assemblyname 传入</li><li>clr 应用版本绑定重定向策略，并在各个位置查找匹配程序集</li><li>若找到匹配程序集则加载，并返回代表程序集的 assembly 对象</li><li>若没有找到，则 loadfrom 会加载传递路径中的程序集</li><li>若已加载具有相同标识程序集，则会直接返回代表程序集的 assembly 对象</li><li>注 1：loadfrom 允许传入 url</li><li>注 2：由于一台机器可能存在相同标识的多个程序集，且 loadfrom 会在内部调用 load，因此 clr 可能加载的不是指定文件</li></ul></li><li>loadfile<ul><li>从任意路径加载程序集，而且可以将相同标识程序集多次加载到同一 appdomain</li><li>clr 不会自动解析任何依赖性问题</li><li>代码必须向 appdomain 的 assemblyresolve 事件登记，并让事件回调显式加载依赖程序集</li></ul></li></ul></li><li>若代码只想反射分析程序集元数据<ul><li>使用 assembly reflectiononlyfrom 或 reflectiononlyload（少见）</li><li>使用上述方法加载程序集时，clr 禁止程序集中任何代码运行</li><li>依赖：reflectiononlyassemblyresolve 事件</li></ul></li><li>在 appdomain 的 assemblyresolve 事件登记后，可以手动处理依赖程序集加载</li><li>反射<ul><li>严重依赖字符串</li><li>编译时无法保证类型安全性</li><li>速度较慢<ul><li>字符串名称标识类型及成员</li><li>使用 reflection 命名空间中类型扫描程序集元数据时，反射机制会不停地执行字符串搜索</li><li>通常字符串搜索不区分大小写，因此进一步影响速度</li><li>反射调用成员（方法）时，首先必须将实参打包成数组，然后在内部将实参解包到线程栈上</li><li>在调用方法前，还必须检查实参是否有正确的数据类型</li></ul></li></ul></li><li>因此，晚期绑定不推荐用反射调用，可以：<ul><li>让类型从已知基类型派生，运行时构造派生类型实例，调用虚方法</li><li>让类型实现已知接口，在运行时构造实例，再调用接口方法 (推荐)</li><li>这样访问对象成员可以获得更好的性能，并确保编译时的安全性</li></ul></li><li>在一个 appdomain 中，每个类型只会有一个 type 对象</li><li>反射方法字符串为这些名称定义了 巴克斯 - 诺尔范式（Backus-Naurform，BMF） 语法</li><li>typeof（早期绑定） 获取类型比 gettype（晚期绑定） 更快</li><li>Type 对象是轻量级引用，更多信息必须通过 gettypeinfo (不过性能更低) 获取 typeinfo（其也可以转型为 type）</li><li>反射构造类型实例<ul><li>Activator.CreateInstance<ul><li>运行在不调用值类型构造器的情况下创建值类型的实例</li></ul></li><li>Activator.CreateInstanceFrom</li><li>AppDomain.CreateInstance</li><li>AppDomain.CreateInstanceAndUnwrap</li><li>AppDomain.CreateInstanceFrom</li><li>AppDomain.CreateInstanceFromAndUnwrap</li><li>Reflection.ConstructorInfo：Type 对象引用可获取构造方法信息，调用后构造类型实例并调用构造器</li><li>创建数组类型：Array.CreateInstance</li><li>创建委托：MethodInfo.CreateDelegate</li><li>构造泛型类型实例首先要获取开放类型的引用，然后调用 MakeGenericType 传递生成封闭类型参数</li></ul></li><li>反射类型成员：MemberInfo (抽象基类)<ul><li>TypeInfo</li><li>FieldInfo</li><li>MethodBase<ul><li>ConstructorInfo</li><li>MethodInfo</li></ul></li><li>PropertyInfo</li><li>EventInfo</li></ul></li><li>反射时传引用<ul><li>类型 &amp;（巴克斯 - 诺尔范式）</li><li>type.makebyreftype</li></ul></li><li>若为了提高性能，缓存 Type 和 MemberInfo 派生对象会消耗更多内存<ul><li>clr 内部用更精简的方式表示这种信息，clr 不需要这些大对象就，能运行，之所以创建这些对象是为了方便开发人员</li><li>精简方式：<ul><li>可以使用运行时句柄代替对象以减小内存</li><li>RuntimeTypeHandle</li><li>RuntimeFieleHandle</li><li>RuntimeMethodHandle</li><li>上述都是值类型，只包含一个 IntPtr 字段，引用 appdomain 的 loader 堆中一个类型、字段或方法</li></ul></li><li>使用方法：<ul><li>type.gettypehandle（gettypefromhandle 转回去）</li><li>fieldinfo.fieldhandle（转换同上）</li><li>methodinfo.methodhandle（转换同上）</li><li>获得 handle 后原对象可被释放（猜测？存疑）</li></ul></li></ul></li></ul><h1 id="第二十四章-运行时序列化"><a class="anchor" href="#第二十四章-运行时序列化">#</a> 第二十四章 运行时序列化</h1><ul><li>类型默认是不可序列化的，必须应用定制特性：Serializable<ul><li>特性可以应用于 引用类型、值类型、枚举和委托类型</li><li>枚举和委托默认总是可序列化（所以不必显式调用）</li><li>该特性不会被派生类继承</li><li>注：自动属性序列化会有问题，因为其字段值由编译器自动生成，名称每次编译可能不同，因此在允许序列化的类型中不要用</li></ul></li><li>序列化会读取对象所有实例字段，包括私有<ul><li>NonSerializable 特性可以标记指定字段不被序列化</li></ul></li><li>序列化、反序列化可允许自动调用方法<ul><li>OnSerializing 特性：序列化前首先调用</li><li>OnSerialized 特性：序列化完毕调用</li><li>OnDeserializing 特性：反序列化前首先调用</li><li>OnDeserialized 特性：反序列化完毕调用</li><li>定义的方法必须获取一个 StreamingContext 参数</li></ul></li><li>反序列化类型存在新增字段会报错<ul><li>可以为新增字段应用 OptionalField 特性</li></ul></li><li>System.Runtime.Serialization.Formatters.Binary：二进制序列化<ul><li>其实现 System.Runtime.Serialization.IFormatter 接口</li><li>默认输出程序集完整标识：文件名、版本号、语言文化、公钥信息<ul><li>反序列化时，通过 assembly load 确保程序集已加载</li><li>查找匹配类型（找不到则抛出异常）</li><li>找到则创建实例，并通过反射用流数据初始化字段（若不完全匹配则抛出异常，可选 OptionalField 忽略）</li></ul></li></ul></li><li>格式化器如何序列化<ul><li>调用 FormatterServices 提供的静态方法</li><li>GetSerializableMembers：反射获取未标记 NonSerualized 的实例字段</li><li>反射获取值</li><li>写入程序集标识和类型完整名称</li><li>遍历反射获取的数组，写入每个成员名称和值</li></ul></li><li>格式化器如何反序列化<ul><li>从流中读取程序集和完整类型名称</li><li>确保程序集加载</li><li>gettypefromassembly 获取反序列化对象类型</li><li>调用 FormatterServices 提供的方法</li><li>GetUnInitializedObject：构造对象，但不调用构造方法，对象所有字段初始化为 0 或 null</li><li>GetSerializableMembers：反射获取字段信息</li><li>根据流中信息初始化值的数组</li><li>调用 PoulateObjectMembers 方法反射初始化值</li></ul></li><li>为提高更多操作，并避免反射开销<ul><li>可以实现 ISerializable 接口，该接口会由格式化器使用</li><li>若一个类型实现了该接口，格式化器将忽略前面说的定制特性</li><li>实现接口的类型需要定义带两个参数的特殊构造器：name (SerializationInfo info,StreamingContext context)，这个构造器在反序列化时被调用</li></ul></li><li>类型序列化为不同类型以及对象反序列化为不同对象<ul><li>序列化单例（贪婪模式），并保证反序列化后也只有一个：实现的 ISerializable 接口方法 序列化实现 IObjectReference 的类型，该类型的方法直接返回单例对象</li><li>在反序列化时，会调用其静态构造方法构成其单例对象</li><li>反序列化时，若发现类型实现了 IObjectReference 接口，会调用其 GetRealObject 方法</li></ul></li><li>序列化代理<ul><li>必须实现 ISerializationSrurogate 接口</li><li>允许开发人员序列化最初没有设计成要序列化的类型</li><li>运行开发人员提供一种方式将类型一个版本映射到另一个版本</li><li>通过 SurrogateSelector 在 IFormatter (格式化器) 注册</li></ul></li><li>反序列化和序列化时不同类型<ul><li>SerializationBinder</li><li>可以重写 类型<ul><li>BindToType</li><li>BindToName</li></ul></li><li>继承 SerializationBinder 实现自己的类，然后在格式化器注册</li></ul></li><li>Xml 序列化<ul><li>XmlSerializer</li><li>DataContractSerializer</li></ul></li><li>可以通过二进制序列化简单实现对象的 深拷贝</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本来计划的是 3 月份就看完，结果 4 月 2 号了还剩两章，虽然这跟到后面看得更仔细有关，但是公司上个月突然要求加起班来也有关系，导致每周上班时间只有两天可以提前</summary>
      
    
    
    
    <category term="阅读笔记" scheme="https://wangjiaying.top/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
    <category term="笔记" scheme="https://wangjiaying.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#类型方法调用测试</title>
    <link href="https://wangjiaying.top/2023/03/28/C-%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95/"/>
    <id>https://wangjiaying.top/2023/03/28/C-%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2023-03-28T12:54:56.000Z</published>
    <updated>2023-04-16T08:02:40.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>在 《CLR vir C#》一书中，有说明  <code>call</code>  与  <code>callvirt</code>  的差别：</p><ul><li>call：可调用静态方法，实例方法和虚方法<ul><li>调用实例方法和虚方法必须指定引用了对象的变量，该指令假定该变量不为 null</li></ul></li><li>callvirt：可调用实例方法和虚方法，不能调用静态方法（需要对变量做 null 检查，因此比 call 慢）<ul><li>并且调用虚实例方法时，还需要检查发出调用对象的实际类型，然后以多态方式调用</li></ul></li></ul><p>同时，对于声明为  <code>sealed</code>  的类型，会有优化，采用  <code>call</code>  调用，例如：始终对结构体采用 call 调用。</p><p>这里我想进行各种调用测试，并从  <code>IL</code>  代码上确认下。</p><h1 id="工具"><a class="anchor" href="#工具">#</a> 工具</h1><ul><li>ILSpy 版本 8.0.0.7246-preview3</li></ul><h1 id="测试类型普通方法"><a class="anchor" href="#测试类型普通方法">#</a> 测试类型 (普通方法)</h1><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassNormal</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ClassSealed</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">StructNormal</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="调用方式一"><a class="anchor" href="#调用方式一">#</a> 调用方式一</h2><p>直接  <code>new</code>  并立即调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InvokeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StructNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InvokeStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassNormal<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000d<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassNormal<span class="token punctuation">::</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0012<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_0013<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0018<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassSealed<span class="token punctuation">::</span><span class="token function">InvokeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_001d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_001e<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0020<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0021<span class="token punctuation">:</span> initobj TestCallMethod<span class="token operator">/</span><span class="token class-name">StructNormal</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0027<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>StructNormal<span class="token punctuation">::</span><span class="token function">InvokeStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>直接  <code>new</code>  并立即调用普通方法，三者并无却别，均编译为  <code>call</code>  指令 —— 因为编译器知道调用对象必然不为空，无需进行额外检查。</p><h2 id="调用方式二"><a class="anchor" href="#调用方式二">#</a> 调用方式二</h2><p>缓存调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ClassNormal</span> normal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>normal<span class="token punctuation">.</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">ClassSealed</span> sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>sl<span class="token punctuation">.</span><span class="token function">InvokeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">StructNormal</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StructNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">InvokeStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassNormal<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000d<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000f<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassNormal<span class="token punctuation">::</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0014<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0015<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_001a<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_001b<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_001c<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassSealed<span class="token punctuation">::</span><span class="token function">InvokeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0021<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0022<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_0024<span class="token punctuation">:</span> initobj TestCallMethod<span class="token operator">/</span><span class="token class-name">StructNormal</span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_002a<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">2</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_002c<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>StructNormal<span class="token punctuation">::</span><span class="token function">InvokeStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>结构体调用依然为  <code>call</code>  指令，类型调用已经换成了  <code>callvirt</code>  指令 —— 调用普通类型需要额外检查了。</p><h1 id="测试类型虚方法"><a class="anchor" href="#测试类型虚方法">#</a> 测试类型 (虚方法)</h1><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtual</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtualChild</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassVirtual</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtualChildSealed</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassVirtual</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="调用方式一-2"><a class="anchor" href="#调用方式一-2">#</a> 调用方式一</h2><p>直接  <code>new</code>  调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChildSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000d<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0012<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_0013<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChildSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0018<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>... 貌似  <code>sealed</code>  没起到作用，对于类型虚方法调用还是采用的  <code>callvirt</code>  指令调用的基类方法名</p><h2 id="调用方式二-2"><a class="anchor" href="#调用方式二-2">#</a> 调用方式二</h2><p>缓存调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ClassVirtualChild</span> normal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>normal<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">ClassVirtualChildSealed</span> sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChildSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>sl<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000d<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000f<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0014<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0015<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChildSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_001a<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_001b<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_001c<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>与第一种方式一样， <code>sealed</code>  标识之后，也还是始终采用  <code>callvirt</code>  调用基类方法名</p><h1 id="测试类型-静态调用"><a class="anchor" href="#测试类型-静态调用">#</a> 测试类型 - 静态调用</h1><p>根据各种信息表明，静态函数必然是  <code>call</code>  指令调用，不过最后还是测试一下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtualChild</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassVirtual</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>ClassVirtualChild<span class="token punctuation">.</span><span class="token function">InvokeStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> call <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token function">InvokeStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>确实如此。</p><h1 id="methodimploptionsaggressiveinlining-内联特性测试"><a class="anchor" href="#methodimploptionsaggressiveinlining-内联特性测试">#</a> MethodImplOptions.AggressiveInlining 内联特性测试</h1><p>据说将方法使用  <code>[MethodImpl(MethodImplOptions.AggressiveInlining)]</code>  特性标记， <code>CLR</code>  如可能会将方法内联。</p><p>—— 虽然好像说是  <code>JIT</code>  生效的，不过这里也还是做一下测试，看看讷会不会体现在  <code>IL</code>  中：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtual</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"InvokeDirect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtualChild</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassVirtual</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"ClassVirtualChild"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"InvokeNormal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ClassVirtualChildSealed</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassVirtual</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"ClassVirtualChildSealed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InvokeDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChildSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token class-name">ClassVirtualChild</span> normal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>normal<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>normal<span class="token punctuation">.</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token class-name">ClassVirtualChildSealed</span> sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassVirtualChildSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>sl<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>IL 代码 (优化版)：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0006<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000b<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">InvokeDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0010<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_0015<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_001a<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_001f<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0024<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChildSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0029<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_002e<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0033<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0034<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_0039<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChild<span class="token punctuation">::</span><span class="token function">InvokeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_003e<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtualChildSealed<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_0043<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> TestCallMethod<span class="token operator">/</span>ClassVirtual<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>所以貌似没有体现在  <code>IL</code>  代码中，估计该特性真得  <code>JIT</code>  的时候才可能生效，也就是说还是得看  <code>CLR</code>  的判断了，毕竟本身该特性也并未注明一定会对方法产生内联。</p><blockquote><p>注：另外根据 <span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9tZXRob2RpbXBsLW1ldGhvZGltcGxvcHRpb25zLWFnZ3Jlc3NpdmVpbmxpbmluZy41Njg4MTMv">methodimpl-methodimploptions-aggressiveinlining</span> 文章的相关信息所说， <code>IL2CPP</code>  和  <code>Mono standalone</code>  支持的，不过编辑器内不会体现出来。</p></blockquote><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><ul><li>结构体为值类型，且不支持继承，因此调用其实例方法时直接采用  <code>call</code>  指令，不必进行额外空判断。</li><li>引用类型调用，普通实例方法在直接  <code>new X.Method()</code>  采用  <code>call</code>  指令，其它方式则  <code>callvirt</code>  方式。</li><li>引用类型虚方法调用，仅  <code>callvirt</code>  方式调用基类方法<ul><li>即：调用派生类重载的虚方法，都是通过  <code>callvirt</code>  调用基类方法</li></ul></li></ul><p>所以经过测试，可以得出调用方式结论：</p><ul><li>静态函数始终为  <code>call</code>  调用</li><li>结构体方法使用为  <code>call</code>  调用</li><li>普通方法仅  <code>new X.Method()</code>  方式采用  <code>call</code>  调用</li><li>虚方法通过  <code>callvirt</code>  基类方法进行调用<ul><li>可能还是在传递实例后，由基类方法那边再进行额外多态判断？(书里确实也是这样说的)</li><li>sealed 就算有优化也是处于  <code>JIT</code>  时，毕竟并未改变  <code>il</code>  编译出来的调用指令 (当然理论上应该有，因为不用判断调用实例类型的子类了)</li></ul></li></ul><p>还有信息表示： <code>call</code>  调用申明类型方法， <code>callvirt</code>  调用变量指向对象的实际类型方法<br />更多可参考文章：<a href="https://zhuanlan.zhihu.com/p/21485914">用 MSIL 写程序：从 “call vs callvirt” 看方法调用<br /></a></p><p>这里只是了解了  <code>C#</code>  编译为  <code>IL</code>  时各方法的调用方式，按照相关信息， <code>JIT</code>  时还会有额外优化，例如说上面提到的  <code>sealed</code> <br /> 我们本身并不能控制什么时候必须用  <code>call</code>  指令，除非自己写  <code>IL</code>  代码，不过了解了各种情况编译结果，至少能更明白这些调用的差异。</p><p>其它：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9hcGkvc3lzdGVtLnJlZmxlY3Rpb24uZW1pdC5vcGNvZGVzLmNhbGw/dmlldz1uZXQtNi4w">官方文档 - call</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9hcGkvc3lzdGVtLnJlZmxlY3Rpb24uZW1pdC5vcGNvZGVzLmNhbGx2aXJ0P3ZpZXc9bmV0LTYuMA==">官方文档 - callvirt</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;在 《CLR vir C#》一书中，有说明  &lt;code&gt;call&lt;/code&gt;  与  &lt;code&gt;callvirt&lt;/code&gt;  的差别：&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#结构体初始化测试</title>
    <link href="https://wangjiaying.top/2023/03/28/C-%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://wangjiaying.top/2023/03/28/C-%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%8B%E8%AF%95/</id>
    <published>2023-03-28T12:52:23.000Z</published>
    <updated>2023-04-16T08:02:40.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型"><a class="anchor" href="#原型">#</a> 原型</h1><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">ssss</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">aaaa</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">aaaa</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        x <span class="token operator">=</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">bbbb</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">bbbb</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">bbbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>对应 IL 代码：</p><h2 id="ssss-类"><a class="anchor" href="#ssss-类">#</a> ssss 类</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">private</span></span> sequential ansi <span class="token keyword">sealed</span> beforefieldinit ssss</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>ValueType</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 y</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class ssss</span></pre></td></tr></table></figure><h2 id="aaaa-类"><a class="anchor" href="#aaaa-类">#</a> aaaa 类</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">private</span></span> sequential ansi <span class="token keyword">sealed</span> beforefieldinit aaaa</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>ValueType</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 y</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">int32</span> a</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Method begins at RVA 0x211c</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// Code size: 17 (0x11)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0002<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_0003<span class="token punctuation">:</span> stfld <span class="token class-name">int32</span> aaaa<span class="token punctuation">::</span><span class="token class-name">x</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_000b<span class="token punctuation">:</span> stfld <span class="token class-name">int32</span> aaaa<span class="token punctuation">::</span><span class="token class-name">y</span></pre></td></tr><tr><td data-num="26"></td><td><pre>IL_0010<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method aaaa::.ctor</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class aaaa</span></pre></td></tr></table></figure><h2 id="bbbb-类"><a class="anchor" href="#bbbb-类">#</a> bbbb 类</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">private</span></span> sequential ansi <span class="token keyword">sealed</span> beforefieldinit bbbb</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>ValueType</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 y</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">int32</span> a</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Method begins at RVA 0x211c</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// Code size: 16 (0x10)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0002<span class="token punctuation">:</span> initobj <span class="token class-name">bbbb</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_000a<span class="token punctuation">:</span> stfld <span class="token class-name">int32</span> bbbb<span class="token punctuation">::</span><span class="token class-name">y</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_000f<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method bbbb::.ctor</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class bbbb</span></pre></td></tr></table></figure><h1 id="调用"><a class="anchor" href="#调用">#</a> 调用</h1><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ssss</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ssss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">bbbb</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">bbbb</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">aaaa</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">aaaa</span><span class="token punctuation">(</span><span class="token number">321</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0010<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0012<span class="token punctuation">:</span> initobj <span class="token class-name">ssss</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_0018<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_001a<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">123</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_001c<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> bbbb<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0021<span class="token punctuation">:</span> ldloca<span class="token punctuation">.</span>s <span class="token number">2</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0023<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4 <span class="token number">321</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0028<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> aaaa<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><ul><li>无自定义带参数构造函数，结构体直接外部调用  <code>initobj</code>  初始化</li><li>带自定义带参数构造函数，结构体自定义构造函数中可调用 new 操作符执行  <code>initobj</code>  初始化</li><li>带自定义带参数构造函数，初始化赋值走正常赋值</li></ul><blockquote><p>initobj：将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0</p></blockquote><p>注：C# 10.0 才支持无参构造函数，因此之前的语法不支持内联初始化：<br /><img data-src="/blogimages/2023/2023-03-28/m_7f3cc3068f64c1bb758817b59357c6cb_r.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原型&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#原型&quot;&gt;#&lt;/a&gt; 原型&lt;/h1&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;figcaption data-lang=&quot;C#&quot;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td d</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>再探TexturePacker命令行设置</title>
    <link href="https://wangjiaying.top/2023/02/24/%E5%86%8D%E6%8E%A2TexturePacker%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE/"/>
    <id>https://wangjiaying.top/2023/02/24/%E5%86%8D%E6%8E%A2TexturePacker%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE/</id>
    <published>2023-02-24T07:42:08.000Z</published>
    <updated>2023-02-25T10:00:12.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>在上一篇  <code>关于 AssetBundleManifest 使用</code>  文章我就写了，我们项目最近搞   <code>微信小游戏</code>  版本</p><p>那么这个版本肯定是主要面向  <code>国内</code> ，那么就可以考虑  <code>ASTC</code>  格式了，于是索性全部切为  <code>ASTC</code> ，安卓、IOS 统一</p><p>然后就发现，之前通过  <code>TexturePacker</code>  生成的  <code>UI图集</code>  ，基本上都是选择了  <code>Force Squared(强制方形分辨率)</code>  选项的 —— 应该是为了兼容  <code>IOS</code>  平台的  <code>PVRTC</code>  格式。</p><p>不过现在统一换成  <code>ASTC</code>  就没这样的必要了，免得浪费内存。</p><p>于是就想着批量处理一波</p><p>虽然其实很简单，不过还是记录一下，以后没准什么时候就又用到了。</p><h1 id="经过"><a class="anchor" href="#经过">#</a> 经过</h1><p>一开始本来想直接调用  <code>TexturePacker</code>  提供的命令行指令，直接重打包去掉  <code>强制立方体分辨率</code>  选项的，结果发现不行：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWFuZHdlYi5jb20vdGV4dHVyZXBhY2tlci9kb2N1bWVudGF0aW9uL3RleHR1cmUtc2V0dGluZ3M=">文档 - Texture-settings</span></p><blockquote><p><strong>Force squared --force-squared</strong><br />Forces the texture to have a squared size.</p></blockquote><p>强制立方体分辨率选项的命令行就上边这么一行，没有额外参数 —— 也就是说：只能强制设置为立方体，若  <code>TPS</code>  本来就勾了，靠命令行就没法设置为  <code>False</code>  了：</p><p><img data-src="/blogimages/2023/2023-02-24/m_e1d1608e0a53db0ab51e4c1d3264f1b1_r.png" alt="" /></p><p>我尝试了在后面跟上各种额外参数，例如：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>TexturePacker.exe Atlas_ChatView_New1.tps --force-squared <span class="token boolean">false</span></pre></td></tr></table></figure><p>确实也没什么效果。</p><p>然后偶然点开  <code>*.tps</code>  文件，发现这东西其实是  <code>Xml</code>  格式的  <code>纯文本</code> ！</p><p><img data-src="/blogimages/2023/2023-02-24/m_15da8ea6fc2ca3b339839a6d6895f86a_r.png" alt="" /></p><p>那这不就简单了，直接按照修改文本的方式改一波，再根据 tps 设置打一次图集就好了。</p><p>（虽然此时同事建议我找个初级的手改，不过感觉写代码也花不了多少时间，于是还是用代码处理了）</p><h1 id="重设代码"><a class="anchor" href="#重设代码">#</a> 重设代码</h1><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Tools/=>重设项目所有图集&lt;="</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayDialog</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"该操作将会重设项目所有图集，确定？"</span><span class="token punctuation">,</span> <span class="token string">"确定"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resDir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"Resources/Ui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">ReSetting</span><span class="token punctuation">(</span><span class="token string">"第1个图集目录"</span><span class="token punctuation">,</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>resDir<span class="token punctuation">,</span> <span class="token string">"*.tps"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        resDir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"Resources/Ui_New"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">ReSetting</span><span class="token punctuation">(</span><span class="token string">"第2个图集目录"</span><span class="token punctuation">,</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>resDir<span class="token punctuation">,</span> <span class="token string">"*.tps"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        resDir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"Resources/UIPrefab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">ReSetting</span><span class="token punctuation">(</span><span class="token string">"第3个图集目录"</span><span class="token punctuation">,</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>resDir<span class="token punctuation">,</span> <span class="token string">"*.tps"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReSetting</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> tipsName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> atlasTpsList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lines<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> line<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> atlasTpsList<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"处理："</span> <span class="token operator">+</span> tipsName<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"当前处理进度：&#123;0&#125;/&#123;1&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atlasTpsList<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>atlasTpsList<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        path <span class="token operator">=</span> atlasTpsList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        lines <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> lineindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> lineindex <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> lineindex<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            line <span class="token operator">=</span> lines<span class="token punctuation">[</span>lineindex<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;key>maxTextureSize&lt;/key>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token function">ReSetSize</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> <span class="token keyword">ref</span> lineindex<span class="token punctuation">,</span> <span class="token string">"2048"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;key>fixedTextureSize&lt;/key>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token function">ReSetSize</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> <span class="token keyword">ref</span> lineindex<span class="token punctuation">,</span> <span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;key>forceSquared&lt;/key>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                lines<span class="token punctuation">[</span><span class="token operator">++</span>lineindex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"            &lt;false/>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> lines<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReSetSize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lines<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    index<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"        &lt;QSize>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"            &lt;key>width&lt;/key>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token string">"            &lt;int>"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token string">"&lt;/int>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"            &lt;key>height&lt;/key>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token string">"            &lt;int>"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token string">"&lt;/int>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"        &lt;/QSize>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>就是这样，TexturePacker 提供的命令行参数感觉比较散，更适合纯命令行调用，比如一开始就写打图集的脚本，规定好各项参数。</p><p>要是加上  <code>TPS</code>   设置的话，有些参数就没法去修改了。</p><p>不过还好  <code>TPS</code>  文本本身是纯文本，要是二进制，那要是不深入研究官方的存储格式，可能就真只能手改了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;在上一篇  &lt;code&gt;关于 AssetBundleManifest 使用&lt;/code&gt;  文章我就写了，我们项目最近搞   &lt;code&gt;微信小游戏&lt;/code&gt; </summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="Editor" scheme="https://wangjiaying.top/categories/Unity3D/Editor/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="工具" scheme="https://wangjiaying.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于AssetBundleManifest使用疑问</title>
    <link href="https://wangjiaying.top/2023/02/17/%E5%85%B3%E4%BA%8EAssetBundleManifest%E4%BD%BF%E7%94%A8/"/>
    <id>https://wangjiaying.top/2023/02/17/%E5%85%B3%E4%BA%8EAssetBundleManifest%E4%BD%BF%E7%94%A8/</id>
    <published>2023-02-17T08:06:22.000Z</published>
    <updated>2023-02-25T10:00:12.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>最近项目在做  <code>微信小游戏</code>  版本，因此所有的  <code>AssetBundle</code>  都得加上  <code>AppendHashToAssetBundleName</code> ，据说主要是用于解决缓存问题。</p><p>例如<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vd2VjaGF0LW1pbmlnYW1lL21pbmlnYW1lLXVuaXR5LXdlYmdsLXRyYW5zZm9ybS9ibG9iL21haW4vRGVzaWduL1VzaW5nQXNzZXRCdW5kbGUubWQ=">文档</span>：</p><blockquote><ul><li>【重要】BuildAssetBundleOptions.AppendHashToAssetBundleName：bundle 带上 hash。在小游戏底层对 bundle 做缓存及缓存淘汰时，hash 是重要依据。</li></ul></blockquote><p>—— 这也导致了我们打包的一个问题，所有的  <code>AssetBundle</code>  打完之后，实际的名字都被改变了 (而且可以预期的是每次资源发生变化都会变)：</p><p><img data-src="/uploads/e0538/images/m_f13018ba3404b4ee16174dae9e636ade_r.png" alt="" /></p><p>如果依照正常的名字去  <code>AssetBundle.LoadFromFile(&quot;XXXX&quot;)</code>  那肯定就是不行的了。</p><p>而且我们项目走的是自己的一套依赖管理，维护了一张自己的依赖表：</p><ul><li>首先计算出依赖关系，生成依赖表</li><li>然后再根据计算的依赖表设置  <code>AssetBundleName</code></li><li>最后调用  <code>BuildPipeline.BuildAssetBundles</code>  打包。</li></ul><p>也即是  <code>先有依赖表，再有 AssetBundleName 资源</code>  这种模式。</p><p>而非直接从 Unity 的  <code>manifest</code>  生成，所以存在当最终  <code>AssetBundleName</code>  文件名发生改变后，与自己依赖表中的对应名字对不上的情况。</p><p>比如像上面那样资源打包参数要是加上  <code>AppendHashToAssetBundleName</code>  ，最终生成的  <code>AssetBundle</code>  文件名就会存在这样的问题 —— 因此就需要在资源打包完成后，读取  <code>AssetBundleManifest</code>  将自己先前的名称替换为最终带  <code>Hash</code>  的名字。</p><h1 id="工具"><a class="anchor" href="#工具">#</a> 工具</h1><p>Unity2021.2.5f1</p><h1 id="经过"><a class="anchor" href="#经过">#</a> 经过</h1><h2 id="更改依赖表"><a class="anchor" href="#更改依赖表">#</a> 更改依赖表</h2><p>最初以为是个很简单的处理，毕竟也两步而已：</p><ol><li>读取生成后  <code>.AssetBundleManifest</code></li><li>替换掉之前依赖表的常规名字</li><li>保存依赖表，并单打依赖表  <code>AssetBundle</code>  包</li></ol><p>结果实际操作的时候，在第一步就为难了：有编辑器工具可以直接读取  <code>AssetBundleManifest</code>  文件吗？</p><p>找不到啊...</p><p>使用  <code>AssetDatabase.LoadMainAssetAtPath</code>  加载返回的竟然是  <code>UnityEngine.DefaultAsset</code>  类型的对象：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>AssetDatabase.LoadMainAssetAtPath<span class="token punctuation">(</span><span class="token string">"Assets/StreamingAssets/StreamingResources/StreamingResources.manifest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"StreamingResources (UnityEngine.DefaultAsset)"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    base: <span class="token string">"StreamingResources (UnityEngine.DefaultAsset)"</span></pre></td></tr></table></figure><p>自己研究了下，编辑器提供的  <code>Editor</code>  接口基本没有好用的，查了下几乎都说得先加载  <code>AssetBundle</code>  本身，然后再通过  <code>LoadAsset&lt;AssetBundleManifest&gt;</code>  使用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">AssetBundle</span> assetBundle <span class="token operator">=</span> AssetBundle<span class="token punctuation">.</span><span class="token function">LoadFromFile</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>streamingAssetsPath<span class="token punctuation">,</span> <span class="token string">"StreamingResources/StreamingResources"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">AssetBundleManifest</span> manifest <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAsset</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AssetBundleManifest<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"AssetBundleManifest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>而打包完资源，唯一没被附加  <code>Hash</code>  值导致改名的，唯有与目标目录同名的  <code>主清单文件</code> <br />这就没办法了，直接加载  <code>AssetBundleManifest</code>  的想法最终放弃，采用加载主清单文件，生成一个字典，然后对比自己的依赖表给改过去。<br /><font color=red>注：主清单 AssetBundleManifest 信息在调用打包时也会直接返回</font></p><p>主要代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">BeginReadPackmanifestNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">AssetBundle</span> bundle <span class="token operator">=</span> AssetBundle<span class="token punctuation">.</span><span class="token function">LoadFromFile</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"/../"</span><span class="token punctuation">,</span> EditorPackDef<span class="token punctuation">.</span>AssetBundleCacheDir<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> EditorPackDef<span class="token punctuation">.</span>AssetBundleCacheDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayDialog</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"未找到依赖总表！"</span><span class="token punctuation">,</span> <span class="token string">"错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    _packHashNamesDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">14000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name">AssetBundleManifest</span> manifest <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAsset</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AssetBundleManifest<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"AssetBundleManifest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> allAssets <span class="token operator">=</span> manifest<span class="token punctuation">.</span><span class="token function">GetAllAssetBundles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//string name;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token class-name"><span class="token keyword">bool</span></span> haveTail<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> tail <span class="token operator">=</span> <span class="token string">".assetbundle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> allAssets<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        haveTail <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        num <span class="token operator">=</span> item<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token punctuation">(</span>haveTail <span class="token punctuation">?</span> <span class="token number">45</span> <span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        _packHashNamesDic<span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token punctuation">(</span>haveTail <span class="token punctuation">?</span> tail<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> num<span class="token punctuation">,</span> haveTail<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=></span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            v<span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>haveTail<span class="token punctuation">)</span> v<span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>也可以有其它方式：比如直接解析文本，但是那种感觉更不大好。</p><h2 id="二次打包报-warning"><a class="anchor" href="#二次打包报-warning">#</a> 二次打包报 Warning</h2><p>提示如下：</p><p><code>Assets in StreamingAssets cannot be included in AssetBundles: &quot;XXXXXX&quot;</code></p><p>不清楚是不是我们升级了 Unity 版本的问题？</p><p>毕竟是我直接将其从 Unity2018 升级到 Unity2021.2.5 的..... 公司其它项目说没碰到过，而之前 Unity2018 也没碰到过，已经没法确认是不是版本升级导致的了。</p><p>经过反复测试，发现只要  <code>StreamingAssets</code>  存在  <code>.assetbundle</code>  文件，就会直接报上述 Warning（虽然最终文件看着没什么问题，该重打的看着还是被重新更新了）</p><p>后面同事建议将所有  <code>AssetBundle</code>  打包至 Unity 工程目录外，然后再复制进  <code>StreamingAssets</code></p><h1 id="问题"><a class="anchor" href="#问题">#</a> 问题</h1><p>所以，除了先加载 AssetBundle，然后通过  <code>assetBundle.LoadAsset&lt;AssetBundleManifest&gt;</code>  以及直接纯文本读取方式外，Unity 还有其它方式加载  <code>AssetBundleManifest</code>  吗？</p><hr /><ul><li>参考文档：<ul><li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9ob3ctdG8tZ2V0LWFzc2V0YnVuZGxlbWFuaWZlc3QuNDk1NDk0Lw==">How to get AssetBundleManifest</span></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;最近项目在做  &lt;code&gt;微信小游戏&lt;/code&gt;  版本，因此所有的  &lt;code&gt;AssetBundle&lt;/code&gt;  都得加上  &lt;code&gt;Append</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="AssetBundle" scheme="https://wangjiaying.top/categories/Unity3D/AssetBundle/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="AssetBundle" scheme="https://wangjiaying.top/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>从IL代码分析C#匿名函数的原理</title>
    <link href="https://wangjiaying.top/2023/02/08/%E4%BB%8EIL%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90C-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://wangjiaying.top/2023/02/08/%E4%BB%8EIL%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90C-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-08T09:37:23.000Z</published>
    <updated>2023-02-19T12:52:49.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>匿名函数平时用得太常见了，平时都知道说用多了不好。</p><p>为什么不好？原因呢？</p><p>特别是涉及到造成  <code>闭包</code>  的匿名函数，其原理是什么？闭包  <code>抓住</code>  的的局部变量怎么处理的？</p><p>众所周知  <code>匿名函数</code>  其实是  <code>C#</code>  提供的一种  <code>语法糖</code> ，最终还是会由编译器生成具体的函数。</p><p>不过之前一直没有深入去研究，这次带着这个疑问，我决定利用反编译的  <code>IL</code>  代码详细研究下，对比各种匿名函数写法，看看最后究竟生成了什么。</p><h1 id="分类"><a class="anchor" href="#分类">#</a> 分类</h1><p>C# 匿名函数中，个人觉得从使用方式上主要可以分为以下几类：</p><ul><li>基本匿名函数：指没有抓住任何局部变量或成员变量，单纯执行自己的逻辑</li><li>调用成员变量的匿名函数：引用了类中的成员变量</li><li>带闭包的匿名函数：引用了调用方法的局部变量<ul><li>仅一个匿名函数所使用</li><li>多个匿名函数共同使用同一个局部变量</li><li>多个匿名函数使用不同的局部变量</li><li>缓存 for 循环 index 的闭包</li></ul></li></ul><p>我也就大概就以这几类为例，观察其编译为  <code>IL</code>  代码后变成了什么样子</p><h1 id="测试"><a class="anchor" href="#测试">#</a> 测试</h1><p>首先，为了对比，定义的一个最基本的测试类如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后查看什么都没有的情况下，这个空类有什么东西：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit MyClass</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// Code size: 9 (0x9)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_0008<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class MyClass</span></pre></td></tr></table></figure><h2 id="普通成员方法回调"><a class="anchor" href="#普通成员方法回调">#</a> 普通成员方法回调</h2><p>为了对比，先测试一下普通的回调：指自己在类中手动定义成员函数作为回调传入。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span>Action<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token class-name">Action</span> callback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"DO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>生成  <code>IL</code>  代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit MyClass</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// Code size: 28 (0x1c)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_000a<span class="token punctuation">:</span> ldftn instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0010<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0015<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_001a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_001b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="27"></td><td><pre>instance <span class="token return-type class-name"><span class="token keyword">void</span></span> DoAction <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token class-name">System<span class="token punctuation">.</span>Action</span> callback</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// Method begins at RVA 0x206d</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// Code size: 9 (0x9)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="37"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="38"></td><td><pre>IL_0002<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="40"></td><td><pre>IL_0008<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::DoAction</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="44"></td><td><pre>instance <span class="token return-type class-name"><span class="token keyword">void</span></span> Action <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// Method begins at RVA 0x2077</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// Code size: 13 (0xd)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="52"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldstr <span class="token string">"DO"</span></pre></td></tr><tr><td data-num="53"></td><td><pre>IL_0006<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>IL_000b<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="55"></td><td><pre>IL_000c<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::Action</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class MyClass</span></pre></td></tr></table></figure><p>可以看出，生成的  <code>IL</code>  代码中也是单纯的由  <code>构造函数</code>  + <code>DoAction</code> + <code>Action</code>  三个成员函数过程，没有什么特别的问题。</p><h2 id="基本匿名函数"><a class="anchor" href="#基本匿名函数">#</a> 基本匿名函数</h2><p>接着，就轮到普通匿名函数了。</p><p>将上面传参修改为匿名函数方式：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log: DoAction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>编译后  <code>IL</code>  代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit MyClass</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Nested Types</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">nested</span> <span class="token keyword">private</span> auto ansi <span class="token keyword">sealed</span> serializable beforefieldinit '<span class="token operator">&lt;</span><span class="token operator">></span>c'</pre></td></tr><tr><td data-num="6"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> initonly <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c<span class="token char">' '</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action '<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig specialname rtspecialname <span class="token keyword">static</span> </pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">void</span> <span class="token punctuation">.</span>cctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Method begins at RVA 0x2139</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// Code size: 11 (0xb)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_0000<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_0005<span class="token punctuation">:</span> stsfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c' MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="26"></td><td><pre>IL_000a<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c'::.cctor</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// Method begins at RVA 0x2145</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// Code size: 8 (0x8)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="38"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="40"></td><td><pre>IL_0007<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c'::.ctor</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">.</span>method assembly hidebysig </pre></td></tr><tr><td data-num="44"></td><td><pre>instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0' <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// Method begins at RVA 0x214e</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// Code size: 12 (0xc)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log: DoAction"</span></pre></td></tr><tr><td data-num="52"></td><td><pre>IL_0005<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>IL_000a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="54"></td><td><pre>IL_000b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c'::'&lt;.ctor>b__0_0'</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class &lt;>c</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// Code size: 47 (0x2f)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="70"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="72"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="73"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="74"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="75"></td><td><pre>IL_000e<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="76"></td><td><pre>IL_000f<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s <span class="token class-name">IL_0028</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>IL_0011<span class="token punctuation">:</span> <span class="token class-name">pop</span></pre></td></tr><tr><td data-num="79"></td><td><pre>IL_0012<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c' MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="80"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>IL_001d<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="82"></td><td><pre>IL_0022<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="83"></td><td><pre>IL_0023<span class="token punctuation">:</span> stsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>IL_0028<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>IL_002d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="87"></td><td><pre>IL_002e<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="91"></td><td><pre>instance <span class="token return-type class-name"><span class="token keyword">void</span></span> DoAction <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token class-name">System<span class="token punctuation">.</span>Action</span> callback</pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed</pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token comment">// Method begins at RVA 0x2080</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token comment">// Code size: 9 (0x9)</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="101"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="102"></td><td><pre>IL_0002<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="103"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="104"></td><td><pre>IL_0008<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::DoAction</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class MyClass</span></pre></td></tr></table></figure><h3 id="分析"><a class="anchor" href="#分析">#</a> 分析</h3><p>这时候，在原有的类中已经多了一个名为  <code>&lt;&gt;c</code>  的 Nested Types 的新类。</p><p>一步一步来看。</p><p>首先是包括的两个公共的静态字段：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 这个该是自己类的实例</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> initonly <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c<span class="token char">' '</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 绑定的委托实例</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action '<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr></table></figure><p>在构造方法中有对这个名为  <code>&lt;&gt;c</code>  的内嵌类做初始化：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0000<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0005<span class="token punctuation">:</span> stsfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c' MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr></table></figure><p>也就是说，一定程度上可以认为这是一个单例（虽然似乎并不标准？）。</p><p>而原本我们的匿名函数则被编译为新类中名为  <code>b__0_0</code>  的方法：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>method assembly hidebysig</pre></td></tr><tr><td data-num="2"></td><td><pre>instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0' <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Method begins at RVA 0x214e</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Code size: 12 (0xc)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log: DoAction"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0005<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span> UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    IL_000a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    IL_000b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c'::'&lt;.ctor>b__0_0'</span></pre></td></tr></table></figure><p>根据代码逻辑来看，字段  <code>&lt;&gt;9__0_0(委托)</code>  用于存放  <code>b__0_0(原本匿名方法)</code>  方法的绑定，其类型就是我们常用的内置  <code>Action</code>  委托。</p><p>若下次调用时这一项判断有值，就会直接调用  <code>&lt;&gt;9__0_0(委托)</code>  ，否则创建委托并将  <code>b__0_0(原本匿名方法)</code>  与  <code>&lt;&gt;9__0_0(委托)</code>  进行初始化绑定。</p><p>如下代码所示：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000e<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000f<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s <span class="token class-name">IL_0028</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0011<span class="token punctuation">:</span> <span class="token class-name">pop</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0012<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c' MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_001d<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0022<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0023<span class="token punctuation">:</span> stsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0028<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr></table></figure><p>使用静态字段配合类似单例的模式，应该是为了优化性能，这样如果实例化了多个  <code>MyClass</code>  的话，就只会存在有一份委托实例。</p><p>但是这样的话，为什么不直接编译为成员函数？</p><p>之前个人其实一直猜测：普通的匿名函数可能是直接编译为本类的成员函数的。</p><p>而在这里的事实  <code>推翻了</code>  猜测。</p><h3 id="其它"><a class="anchor" href="#其它">#</a> 其它</h3><p>使用单独方法调用的匿名函数，也是一样的情况，委托会在调用之处进行判断及绑定<br />如下单独成员函数中编译成的  <code>IL</code>  代码与上面一致：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log: DoAction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>多个这种类型的匿名函数也是一样，只是对应增加了  <code>Action</code>  类型的委托字段，比如再加一个同类匿名函数：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> initonly <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c<span class="token char">' '</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action '<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action '<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__1_0</span>'</pre></td></tr></table></figure><h2 id="调用成员变量的匿名函数"><a class="anchor" href="#调用成员变量的匿名函数">#</a> 调用成员变量的匿名函数</h2><p>测试的 C# 代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _myValue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Value:"</span> <span class="token operator">+</span> _myValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token class-name">Action</span> callback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译后 IL 代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit MyClass</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 _myValue</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// Code size: 28 (0x1c)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0009<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_000a<span class="token punctuation">:</span> ldftn instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__1_0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0010<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_0015<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_001a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="26"></td><td><pre>IL_001b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="30"></td><td><pre>instance <span class="token return-type class-name"><span class="token keyword">void</span></span> DoAction <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token class-name">System<span class="token punctuation">.</span>Action</span> callback</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// Method begins at RVA 0x206d</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// Code size: 9 (0x9)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="40"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="41"></td><td><pre>IL_0002<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="43"></td><td><pre>IL_0008<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::DoAction</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="47"></td><td><pre>instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__1_0' <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// Method begins at RVA 0x2077</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// Code size: 28 (0x1c)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log Value:"</span></pre></td></tr><tr><td data-num="58"></td><td><pre>IL_0005<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="59"></td><td><pre>IL_0006<span class="token punctuation">:</span> ldflda <span class="token class-name">int32</span> MyClass<span class="token punctuation">::</span><span class="token class-name">_myValue</span></pre></td></tr><tr><td data-num="60"></td><td><pre>IL_000b<span class="token punctuation">:</span> call instance <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Int32<span class="token punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>IL_0010<span class="token punctuation">:</span> call <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>String<span class="token punctuation">::</span>Concat<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="62"></td><td><pre>IL_0015<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>IL_001a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="64"></td><td><pre>IL_001b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::'&lt;.ctor>b__1_0'</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class MyClass</span></pre></td></tr></table></figure><p>！！！！！！</p><p>看来我关于  <code>普通的匿名函数可能是直接编译为本类的成员函数</code>  的猜测也不全是错误的，原来得对本类的  <code>成员变量</code>  发生了访问，才会直接编译为  <code>成员函数</code> 。</p><p>从上面代码可以看出，之前普通匿名函数会额外生成的内嵌类已经不在了，只多了一个名为  <code>b__1_0</code>  的成员函数。</p><h2 id="闭包仅一个匿名函数所使用"><a class="anchor" href="#闭包仅一个匿名函数所使用">#</a> (闭包) 仅一个匿名函数所使用</h2><p>测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token class-name">Action</span> callback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译后的  <code>IL</code>  代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit MyClass</pre></td></tr><tr><td data-num="2"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Nested Types</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">nested</span> <span class="token keyword">private</span> auto ansi <span class="token keyword">sealed</span> beforefieldinit '<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'</pre></td></tr><tr><td data-num="6"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> int32 val</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// Method begins at RVA 0x213d</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// Code size: 8 (0x8)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="26"></td><td><pre>IL_0007<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c__DisplayClass0_0'::.ctor</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">.</span>method assembly hidebysig </pre></td></tr><tr><td data-num="30"></td><td><pre>instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0' <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// Method begins at RVA 0x2146</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// Code size: 28 (0x1c)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log Val:"</span></pre></td></tr><tr><td data-num="38"></td><td><pre>IL_0005<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="39"></td><td><pre>IL_0006<span class="token punctuation">:</span> ldflda int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="40"></td><td><pre>IL_000b<span class="token punctuation">:</span> call instance <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Int32<span class="token punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>IL_0010<span class="token punctuation">:</span> call <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>String<span class="token punctuation">::</span>Concat<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="42"></td><td><pre>IL_0015<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>IL_001a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="44"></td><td><pre>IL_001b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c__DisplayClass0_0'::'&lt;.ctor>b__0'</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class &lt;>c__DisplayClass0_0</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// Header size: 12</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// Code size: 42 (0x2a)</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">3</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0<span class="token char">' '</span>CS$<span class="token operator">&lt;</span><span class="token operator">></span>8__locals0'</pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="63"></td><td><pre>IL_0001<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>IL_0006<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="65"></td><td><pre>IL_0007<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>IL_000c<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="67"></td><td><pre>IL_000d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="68"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="69"></td><td><pre>IL_000f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="70"></td><td><pre>IL_0011<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="71"></td><td><pre>IL_0016<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="72"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="73"></td><td><pre>IL_0018<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>IL_001e<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="75"></td><td><pre>IL_0023<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>IL_0028<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="77"></td><td><pre>IL_0029<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">private</span> hidebysig </pre></td></tr><tr><td data-num="81"></td><td><pre>instance <span class="token return-type class-name"><span class="token keyword">void</span></span> DoAction <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token class-name">System<span class="token punctuation">.</span>Action</span> callback</pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token comment">// Method begins at RVA 0x2086</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment">// Code size: 9 (0x9)</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre>IL_0000<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="91"></td><td><pre>IL_0001<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="92"></td><td><pre>IL_0002<span class="token punctuation">:</span> callvirt instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="93"></td><td><pre>IL_0007<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="94"></td><td><pre>IL_0008<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::DoAction</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class MyClass</span></pre></td></tr></table></figure><p>可以发现，与  <code>普通匿名函数</code>  一样，这里生成了一个名为  <code>&lt;&gt;c__DisplayClass0_0</code>  新的内嵌类，且我们的匿名方法被编译为内嵌类的成员函数。局部变量则作为新类的  <code>成员变量</code> 。</p><p>但与之不同的是：该类字段并非静态的。</p><p>再仔细看看调用的地方：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0007<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000c<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_000f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0011<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0016<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0018<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_001e<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0023<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr></table></figure><p>可以明显看出不同：这里直接暴力创建了新类，然后将  <code>局部变量</code>  赋值后调用 —— 不存在缓存，也没什么特殊的优化！</p><p>相当于存在闭包的匿名函数：每次走到匿名函数创建的地方，都会创建新的类型。</p><h2 id="闭包多个匿名函数共同使用同一个局部变量"><a class="anchor" href="#闭包多个匿名函数共同使用同一个局部变量">#</a> (闭包) 多个匿名函数共同使用同一个局部变量</h2><p>与前一项类似，只多增加几个调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log2 Val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log3 Val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>具体的  <code>IL</code>  代码就不贴了，生成的  <code>IL</code>  是差不多的，三个匿名函数被编译为同一个类的成员函数，共享  <code>val</code>  变量。</p><p>看一下调用时：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0007<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000c<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_000f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0011<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0016<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0018<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_001e<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0023<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_0028<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0029<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_002a<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_002b<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__1'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_0031<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_0036<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_003b<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_003c<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_003d<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_003e<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__2'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_0044<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0049<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="闭包多个匿名函数使用不同的局部变量"><a class="anchor" href="#闭包多个匿名函数使用不同的局部变量">#</a> (闭包) 多个匿名函数使用不同的局部变量</h2><p>处理方式与前者一致。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> val2 <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log2 Val:"</span> <span class="token operator">+</span> val2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>调用时：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0007<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000c<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_000f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0011<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0016<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0017<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4 <span class="token number">12345</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_001c<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">val2</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0021<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_0022<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_0023<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0029<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_002e<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_0033<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_0034<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_0035<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_0036<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__1'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_003c<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0041<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="闭包同时引用局部变量和成员变量"><a class="anchor" href="#闭包同时引用局部变量和成员变量">#</a> (闭包) 同时引用局部变量和成员变量</h2><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> localVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log"</span> <span class="token operator">+</span> val <span class="token operator">+</span> localVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>与闭包一样都是新的实例，区别在于会多定义一个  <code>本类字段</code>  将本类传入以便引用成员变量：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Nested Types</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">nested</span> <span class="token keyword">private</span> auto ansi <span class="token keyword">sealed</span> beforefieldinit '<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'</pre></td></tr><tr><td data-num="3"></td><td><pre>    extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 局部变量字段</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">.</span>field <span class="token keyword">public</span> int32 localVal</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 引用类的字段，用于获取成员变量</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> '<span class="token operator">&lt;</span><span class="token operator">></span>4__this'</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//=========== 省略 =================================</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c__DisplayClass1_0'::.ctor</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">.</span>method assembly hidebysig</pre></td></tr><tr><td data-num="22"></td><td><pre>        instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0' <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed</pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">// Method begins at RVA 0x215a</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// Code size: 44 (0x2c)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log"</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        IL_0005<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        IL_0006<span class="token punctuation">:</span> ldfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span>4__this'</pre></td></tr><tr><td data-num="32"></td><td><pre>        IL_000b<span class="token punctuation">:</span> ldflda <span class="token class-name">int32</span> MyClass<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        IL_0010<span class="token punctuation">:</span> call instance <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Int32<span class="token punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        IL_0015<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        IL_0016<span class="token punctuation">:</span> ldflda int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span><span class="token class-name">localVal</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        IL_001b<span class="token punctuation">:</span> call instance <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Int32<span class="token punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        IL_0020<span class="token punctuation">:</span> call <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>String<span class="token punctuation">::</span>Concat<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="38"></td><td><pre>        IL_0025<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        IL_002a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        IL_002b<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c__DisplayClass1_0'::'&lt;.ctor>b__0'</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of class &lt;>c__DisplayClass1_0</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 val</pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig specialname rtspecialname </pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token return-type class-name">instance</span> <span class="token keyword">void</span> <span class="token punctuation">.</span>ctor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token comment">// Method begins at RVA 0x2050</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">// Header size: 12</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">// Code size: 56 (0x38)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">3</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0<span class="token char">' '</span>CS$<span class="token operator">&lt;</span><span class="token operator">></span>8__locals0'</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    IL_0001<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    IL_0003<span class="token punctuation">:</span> stfld <span class="token class-name">int32</span> MyClass<span class="token punctuation">::</span><span class="token class-name">val</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    IL_0008<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    IL_0009<span class="token punctuation">:</span> call instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    IL_000e<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    IL_000f<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    IL_0014<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    IL_0015<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    IL_0016<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">// 将自身引用赋值进去</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    IL_0017<span class="token punctuation">:</span> stfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span>4__this'</pre></td></tr><tr><td data-num="73"></td><td><pre>    IL_001c<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    IL_001d<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    IL_001e<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">// 赋值使用到的局部变量</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    IL_001f<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span><span class="token class-name">localVal</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    IL_0024<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    IL_0025<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    IL_0026<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass1_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    IL_002c<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="82"></td><td><pre>    IL_0031<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    IL_0036<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    IL_0037<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method MyClass::.ctor</span></pre></td></tr></table></figure><h2 id="闭包for循环缓存"><a class="anchor" href="#闭包for循环缓存">#</a> (闭包) for 循环缓存</h2><p><code>C#</code>  代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log index:"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>看了下与闭包匿名函数一样，被编译为新的内嵌类，不同之处在于使用的地方。</p><p>关键 <code>IL</code>  代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_0009<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000a<span class="token punctuation">:</span> br<span class="token punctuation">.</span>s IL_0032</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// loop start (head: IL_0032)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_000c<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0011<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>IL_0012<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0013<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0014<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0015<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">index</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_001a<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_001b<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_001c<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_0022<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span> System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_0027<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span> System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_002c<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_002d<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_002e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_002f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0030<span class="token punctuation">:</span> <span class="token keyword">add</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0031<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0032<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_0033<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">10</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_0035<span class="token punctuation">:</span> <span class="token class-name">clt</span></pre></td></tr><tr><td data-num="26"></td><td><pre>IL_0037<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="27"></td><td><pre>IL_0038<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="28"></td><td><pre>IL_0039<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s IL_000c</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// end loop</span></pre></td></tr></table></figure><p>在  <code>每一次</code>  循环中都创建了一个内嵌类  <code>&lt;&gt;c__DisplayClass0_0</code>  的实例！非常恐怖。</p><p>于是想 <code>对比测试</code> 下，我们通常说 for 循环 index 重复 ( <code>即始终取到最后一个index</code> ) 的情景：</p><p>原  <code>C#</code>  代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">//int index = i;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log index:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><code>IL</code>  代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>IL_0008<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span> '<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>IL_000d<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IL_000e<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>IL_000f<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>IL_0010<span class="token punctuation">:</span> stfld int32 MyClass <span class="token operator">/</span> '<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">i</span></pre></td></tr><tr><td data-num="6"></td><td><pre>IL_0015<span class="token punctuation">:</span> br<span class="token punctuation">.</span>s IL_003c</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// loop start (head: IL_003c)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>IL_0017<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="9"></td><td><pre>IL_0018<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>IL_0019<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>IL_001a<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span> '<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0'<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>IL_0020<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>IL_0025<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span> System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>IL_002a<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="15"></td><td><pre>IL_002b<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="16"></td><td><pre>IL_002c<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>IL_002d<span class="token punctuation">:</span> ldfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">i</span></pre></td></tr><tr><td data-num="18"></td><td><pre>IL_0032<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>IL_0033<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>IL_0034<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>IL_0035<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_0036<span class="token punctuation">:</span> <span class="token keyword">add</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_0037<span class="token punctuation">:</span> stfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">i</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_003c<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre>IL_003d<span class="token punctuation">:</span> ldfld int32 MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c__DisplayClass0_0'<span class="token punctuation">::</span><span class="token class-name">i</span></pre></td></tr><tr><td data-num="27"></td><td><pre>IL_0042<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">10</span></pre></td></tr><tr><td data-num="28"></td><td><pre>IL_0044<span class="token punctuation">:</span> <span class="token class-name">clt</span></pre></td></tr><tr><td data-num="29"></td><td><pre>IL_0046<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="30"></td><td><pre>IL_0047<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="31"></td><td><pre>IL_0048<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s IL_0017</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// end loop</span></pre></td></tr></table></figure><p>这种模式就是在循环外创建的实例了，也就是整个 for 循环只会有一个委托内嵌类实例，因此字段值会被覆盖。</p><h1 id="闭包优化-传参"><a class="anchor" href="#闭包优化-传参">#</a> 闭包优化 -- 传参</h1><p>(2023.2.9 补充)</p><p>对于闭包的情况，有没有优化方式呢？</p><p>答案是有的，虽然有一定局限 —— 比如通过局部变量的  <code>传参</code>  的方式使用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Val:"</span> <span class="token operator">+</span> pr<span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DoAction</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> callback<span class="token punctuation">,</span> <span class="token class-name">T</span> parm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这种方式编译后，生成的  <code>IL</code>  代码与普通匿名函数一样，生成的是一个静态对象，不会造成使用时反复创建新的内嵌类的实例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//======= 内嵌类字段是静态的，匿名方法被编译为对应带参数成员函数 =========</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>method assembly hidebysig</pre></td></tr><tr><td data-num="3"></td><td><pre>    instance <span class="token keyword">void</span> '<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0' <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token class-name">int32</span> pr</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// Method begins at RVA 0x2156</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// Code size: 24 (0x18)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    IL_0000<span class="token punctuation">:</span> ldstr <span class="token string">"Log Val:"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    IL_0005<span class="token punctuation">:</span> ldarga<span class="token punctuation">.</span>s <span class="token class-name">pr</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    IL_0007<span class="token punctuation">:</span> call instance <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Int32<span class="token punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    IL_000c<span class="token punctuation">:</span> call <span class="token keyword">string</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>String<span class="token punctuation">::</span>Concat<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    IL_0011<span class="token punctuation">:</span> call <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    IL_0016<span class="token punctuation">:</span> <span class="token class-name">nop</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    IL_0017<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;>c'::'&lt;.ctor>b__0_0'</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//=== 创建和执行处，判断了是否有实例化绑定过委托 ====</span></pre></td></tr><tr><td data-num="22"></td><td><pre>IL_0008<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>s <span class="token number">100</span></pre></td></tr><tr><td data-num="23"></td><td><pre>IL_000a<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IL_000b<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>IL_000c<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action`<span class="token number">1</span><span class="token operator">&lt;</span>int32<span class="token operator">></span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="26"></td><td><pre>IL_0011<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="27"></td><td><pre>IL_0012<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s <span class="token class-name">IL_002b</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>IL_0014<span class="token punctuation">:</span> <span class="token class-name">pop</span></pre></td></tr><tr><td data-num="30"></td><td><pre>IL_0015<span class="token punctuation">:</span> ldsfld <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c' MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9</span>'</pre></td></tr><tr><td data-num="31"></td><td><pre>IL_001a<span class="token punctuation">:</span> ldftn instance <span class="token keyword">void</span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token punctuation">.</span>ctor<span class="token operator">></span>b__0_0'<span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>IL_0020<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action`<span class="token number">1</span><span class="token operator">&lt;</span>int32<span class="token operator">></span><span class="token punctuation">::</span><span class="token punctuation">.</span>ctor<span class="token class-name"><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">,</span> native <span class="token keyword">int</span><span class="token punctuation">)</span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>IL_0025<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="34"></td><td><pre>IL_0026<span class="token punctuation">:</span> stsfld <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action`<span class="token number">1</span><span class="token operator">&lt;</span>int32<span class="token operator">></span> MyClass<span class="token operator">/</span>'<span class="token operator">&lt;</span><span class="token operator">></span>c'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span><span class="token number">9__0_0</span>'</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>IL_002b<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="37"></td><td><pre>IL_002c<span class="token punctuation">:</span> call instance <span class="token class-name"><span class="token keyword">void</span></span> MyClass<span class="token punctuation">::</span><span class="token generic-method"><span class="token function">DoAction</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>int32<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Action`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p>注：局部变量缓存的匿名委托，一样是会编译为内嵌类。</p></blockquote><blockquote><p>例如如下代码编译后与上述  <code>IL</code>  代码基本一致：</p></blockquote><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> callback <span class="token operator">=</span> <span class="token punctuation">(</span>pr<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Log Val:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>callback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>当然，这种优化方式也有局限性：那就是调用时就必须传参， <code>没法存储</code>  局部变量  <code>以待后续</code>  的使用，要么就是绑定者自己直接就存储参数。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><ul><li>普通匿名函数 (没有对外部产生任何变量引用)：被编译为一个内嵌类，匿名函数本身成为新类的一个成员函数，并使用静态字段绑定委托。保证调用时只会初始化一次。</li><li>调用过成员变量的匿名函数：会被直接编译为成员函数</li><li>带闭包匿名函数：编译为普通内嵌类，其中生成对应局部变量类型的字段，生成时会创建该类实例，然后将局部变量为其赋值。<ul><li>相当于每次走到匿名函数创建的地方，都会创建新的类型，评价是性能堪忧</li><li>多个匿名函数共同使用同一个局部变量，被编译在同一个类中</li><li>多个匿名函数使用不同的局部变量：被编译在同一个类中</li><li>for 循环缓存：<ul><li>若使用循环外的局部变量，则只有一个实例</li><li>若是循环内部的局部变量，循环多少次，就会创建多少个实例 <code>(!)</code></li></ul></li></ul></li></ul><p>按照如上的情况来看:</p><ul><li><code>普通的匿名函数</code>  应该没什么大问题，委托会被作为静态实例缓存，只会第一次运行到代码块时初始化一次（可能需要考虑由于静态字段原因，一旦创建就不会释放，不过觉得这点空间消耗应该不用过于担心）</li><li><code>仅调用成员变量的匿名函数</code>  它跟自己在类中定义一个成员函数没有区别（当然由于委托本身也是一个类，他与自己的成员函数一样，作为委托传递本身也有实例化消耗）</li><li><code>带闭包的匿名函数</code> 性能就比较糟糕了：每次运行到的时候都会创建新类型的实例，普通  <code>for循环</code>  与  <code>普通闭包匿名函数</code>  一样。同时加上委托本身实例化消耗。<ul><li><code>同时引用局部变量和成员变量</code>  的匿名函数，与闭包一样都是新的实例，区别在于会多定义一个  <code>本类字段</code>  将本类传入以便引用成员变量</li><li>若实在需要局部变量作为参数，可以考虑是否可以使用传参的方式做优化 (例如 Task.TaskFactory.StartNew 就提供了传参的重载)</li></ul></li></ul><p><code>注意</code> 特别最为需要避免的就是 for 循环中使用循环中定义的局部变量：例如缓存 index，每一个循环都会造成一次实例化。—— 当然，闭包确实也是一个很方便的特性... 必要时可以极大减少代码量，不要滥用就好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;匿名函数平时用得太常见了，平时都知道说用多了不好。&lt;/p&gt;
&lt;p&gt;为什么不好？原因呢？&lt;/p&gt;
&lt;p&gt;特别是涉及到造成  &lt;code&gt;闭包&lt;/code&gt;  的匿名函</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BatchTextureModifier工具使用说明</title>
    <link href="https://wangjiaying.top/2023/02/05/BatchTextureModifier%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://wangjiaying.top/2023/02/05/BatchTextureModifier%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2023-02-05T06:38:57.000Z</published>
    <updated>2023-04-28T11:08:43.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>这是上个月开始弄的一个小工具，春节期间收尾的。</p><blockquote><p>实在不知道取什么名字好，暂且就先用着这个  <code>BatchTextureModifier</code>  名字吧 🙀。</p></blockquote><p>这几天又完善了一下，这两天在家里亲自以自己网站  <code>二次元随机图库</code>  处理为目的，进行试用了一番：</p><blockquote><p>也就是说，本站的所有随机图片，都是由该工具统一处理完成：所有随机图片都是  <code>1280x800</code> ，大小则为  <code>100KB</code>  以下的  <code>Webp</code>  格式。</p></blockquote><p>并且在过程中再次改动了一波，虽然功能应该不算复杂，而且对各个选项基本也都加了  <code>Tooltips</code> ，不过考虑到部分选项情况，感觉最好也可以写一写汇总的使用说明。</p><h1 id="功能"><a class="anchor" href="#功能">#</a> 功能</h1><p>主要是实现一个批量图片处理功能，例如批量进行格式转换的同时，对图片做一些裁剪、缩放等操作。</p><p>使用 WPF .NetCore6.0 开发</p><p>目前支持：</p><ol><li>批量处理图片 (也可以单图处理)</li><li>预览修改效果、及修改后文件大小</li><li>覆盖修改、自动备份 (前提是直接覆盖修改的话)</li><li>多种模式缩放图片</li><li>按照指定参数，批量转换图片格式为  <code>*.png</code>   <code>*.jpg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code><ul><li>支持自动读取的后缀为： <code>*.png</code>   <code>*.jpg</code>   <code>*.jpeg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code></li><li>(如果发现批量处理时没有读取到，可以检查是否图片后缀不对劲)</li></ul></li><li>POT 缩放 (用过 Unity 的应该知道什么意思，不过这个跟 Unity 强行拉伸方式不同，而是比例缩放)</li><li>多线程处理，同时开启处理量取决于 CPU 核心数目</li><li>处理转为  <code>jpg</code>   <code>Webp</code>  格式时可选限制最终生成的文件大小，超出指定大小会尝试降低质量进行迭代（会极大增加额外消耗）</li></ol><h1 id="界面"><a class="anchor" href="#界面">#</a> 界面</h1><p>最基本的界面如下：</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-00-11.jpg" alt="" /></p><p>从上往下主要分为三个模块：</p><ol><li>普通设置</li><li>参数设置</li><li>结果预览</li></ol><h2 id="普通设置"><a class="anchor" href="#普通设置">#</a> 普通设置</h2><p>又分为  <code>批量处理</code> 、 <code>单图处理</code> 、 <code>其它工具</code></p><h3 id="批量处理"><a class="anchor" href="#批量处理">#</a> 批量处理</h3><p>最基本的页面，也是主要功能。</p><ul><li>原始目录：即需要处理的图片目录</li><li>输出目录：处理完毕后，保存地址</li></ul><p>若输出目录与原始目录填写一致，会自动判断为  <code>覆盖模式</code> ，并进行处理时的备份，若不需要则可以将  <code>参数设置-&gt;文件设置-&gt;备份文件</code>  勾选取消。</p><p>点击  <code>处理</code>  按钮，自动跳转至  <code>日志页签</code> ，并开启线程进行批量处理。</p><h3 id="单图处理"><a class="anchor" href="#单图处理">#</a> 单图处理</h3><p>这里可以选择某一张图片作为预览，并且单独保存：</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-27-21.jpg" alt="" /></p><p>注：只要有预览图片，就可以保存。</p><h3 id="其它工具"><a class="anchor" href="#其它工具">#</a> 其它工具</h3><p>昨天刚加了个  <code>生成文件列表</code>  的小功能，目前就这一个。</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-25-58.jpg" alt="" /></p><p>其功能是可以将指定目录下，所有文件生成一个文件列表，可选添加统一前缀。</p><p>目录路径可以直接粘贴上去，也可以点击  <code>选择</code>  用浏览去选。</p><h2 id="参数设置"><a class="anchor" href="#参数设置">#</a> 参数设置</h2><p>分为  <code>输出格式</code>   <code>缩放模式</code>   <code>文件设置</code>  三类</p><h3 id="输出格式"><a class="anchor" href="#输出格式">#</a> 输出格式</h3><p>可以选择在保存时将输入的原图转换为  <code>*.png</code>   <code>*.jpg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code>  几种格式。</p><p>每种格式都尽量提供了会对图片造成影响的选项以供配置。</p><p>其中  <code>JPG</code>  和  <code>webp</code>  有损格式 支持  <code>质量设置</code>  ，因此这两者提供了  <code>文件大小限制</code> ，即：超过指定大小会尝试降低质量进行迭代，不过会极大增加额外消耗。</p><p>另外  <code>保持透明</code>  选项默认不勾选，不勾选的情况下：指的是转化时若像素不可见则填充为透明度 (透明图片)，勾选的情况下则不做处理。</p><h3 id="缩放模式"><a class="anchor" href="#缩放模式">#</a> 缩放模式</h3><p>不缩放：不会改变原本分辨率，如果你连格式也选择保持不变，那么就没什么用<br />比例缩放 II：将原图缩放至指定分辨率时尽量保持比例不变，多余处则填充<br />直接裁剪：直接裁剪至目标分辨率<br />基于宽度：以宽度为基准进行缩放，高度不足则填充，高度超过之处则裁剪<br />基于高度：以高度为基准进行缩放，宽度不足则填充，宽度超过之处则裁剪<br />比例缩放：如果图片小于设定分辨率，则比例放大，不足之处则填充；如果图片大于设定分辨率，则比例缩小<br />比例裁剪：以高度或宽度最大者为基准进行缩放，尽量保持比例不变，多余处直接裁剪<br />直接缩放 (向下)：(与设定分辨率不会保持一致) 基于最小边长达到给定分辨率直接缩小，不会改变原本图片比例，也不会放大<br />直接缩放 (向上)：(与设定分辨率不会保持一致) 基于原本图片比例，缩放至新分辨率的比例，缩放后分辨率一般比设定分辨率更小<br />拉伸缩放：原图直接填充至新的分辨率，不足直接拉伸，会导致图片变形<br /> POT 缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处则填充<br /> POT 方形缩放：高宽缩放至最接近 2N 次方的方形分辨率，尽量保持比例不变，不足处则填充</p><p>缩放算法默认是  <code>Bicubic</code> ，我在处理本站 随机图片时，采用的  <code>Spline</code>  算法，该算法模糊图片减少细节，并能减少最终图片大小 (相比其它算法)，比较适用于生成的图片用在  <code>缩小使用</code>  的情况。</p><blockquote><p>注：填充的究竟是透明度还是黑色，取决于图片原本是否是有透明通道的图片。</p></blockquote><p><code>停靠模式</code> ：这个选项可以控制图片 <code>裁剪</code> 或 <code>缩放</code> 时，原图在新的比例下停靠标准</p><blockquote><p>例如，如果有一张竖行分辨率的图片，主要内容在靠近上部分位置，想要仅获取这部分内容，就可以选择先裁剪上半部分，然后再居中缩放为指定分辨率。</p></blockquote><h3 id="文件设置"><a class="anchor" href="#文件设置">#</a> 文件设置</h3><p>直接覆盖：可选是否直接覆盖源文件，如果勾上的话，会直接删除源文件并以转化后图片进行替代，谨慎使用！<br />保留结构：覆盖源文件且备份时使用，备份时会依照源文件的子目录进行备份，否则会全部备份在一个目录中。</p><h2 id="结果预览"><a class="anchor" href="#结果预览">#</a> 结果预览</h2><p>在结果页面，又分为两个页签，默认处于  <code>预览页签</code> ，点击  <code>输出</code>  可切换至  <code>日志页签</code> 。</p><h3 id="预览页签"><a class="anchor" href="#预览页签">#</a> 预览页签</h3><p>左侧为原图，右侧为经过修改后的预览图。</p><p>图片上方展示了该图片的分辨率、文件大小：修改后的预览图是保存磁盘后的文件大小。</p><p>因为界面比较小，如果觉得看不清楚，提供了两种选项：</p><ol><li>可以点击国轩右侧预览图的右上角， <code>仅显示结果</code> ，该选项会使 UI 只显示一张修改后的预览图</li><li>若觉得还是不够，则可以点击右侧预览图的右下角， <code>放大</code>  按钮：这个按钮会打开一个新的对比页面，该页面运行全屏、放大展示</li></ol><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-46-46.jpg" alt="" /></p><h2 id="日志页签"><a class="anchor" href="#日志页签">#</a> 日志页签</h2><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-09-34.jpg" alt="" /></p><p>运行或操作过程中的日志会记录在此，在点击批处理后会自动跳转至该页面。</p><p>处理完毕后注意一下最后  <code>批处理执行完毕！共处理 X 个文件，消耗时间：Y</code>  其中的处理文件数量是否跟目录实际文件数量一致即可：一般来说，只要图片后缀是上述支持的格式，应该就没什么大问题。</p><h1 id="最后"><a class="anchor" href="#最后">#</a> 最后</h1><p>因为不知道用什么 ICON 好，所以也没加 ICON。</p><p>Git 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvQmF0Y2hUZXh0dXJlTW9kaWZpZXI=">https://github.com/CWHISME/BatchTextureModifier</span></p><p>走过路过点个赞吧，如果有任何  <code>Bug</code>  或者  <code>问题</code>  什么的，也欢迎提出 😸。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;这是上个月开始弄的一个小工具，春节期间收尾的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实在不知道取什么名字好，暂且就先用着这个  &lt;code&gt;BatchTextu</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://wangjiaying.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>C#协程的底层原理</title>
    <link href="https://wangjiaying.top/2023/02/01/CS-%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://wangjiaying.top/2023/02/01/CS-%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-01T09:27:37.000Z</published>
    <updated>2023-02-25T10:00:12.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>这两天又研究了下协程，之前虽然用过，也稍微想过，但是并没有深入研究，这次就想把流程仔细走一遍。</p><h1 id="原理"><a class="anchor" href="#原理">#</a> 原理</h1><p>其实也是一个思维方式问题，协程的原理其实很简单：利用迭代器</p><h2 id="迭代器"><a class="anchor" href="#迭代器">#</a> 迭代器</h2><p>我们都知道，实现了  <code>IEnumerable</code>  接口、或者说拥有  <code>IEnumerator GetEnumerator()</code>  的类可以被  <code>foreach</code>  所迭代。</p><p>其重点就在于  <code>IEnumerator</code>  这个接口。</p><p><code>数组</code> 、 <code>List</code> 、 <code>字典</code>  等数据结构，迭代时都是通过返回自己创建的一个实现了  <code>IEnumerator</code>  的  <code>Warp</code>  类进行。</p><p>为什么一个方法，标记返回  <code>IEnumerator</code>  直接就能被迭代？</p><p>例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>上述代码是不会报错的，如果执行也会正常调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>迭代</pre></td></tr><tr><td data-num="2"></td><td><pre>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">:</span><span class="token function">Log</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0<span class="token punctuation">:</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>TestEnumerator<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>TestEnumerator<span class="token punctuation">:</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>TestEnumerator<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Test<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>Test<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="从il代码分析"><a class="anchor" href="#从il代码分析">#</a> 从 IL 代码分析</h2><p>想过为什么会这样吗？毕竟这只是一个方法而已，为何就能被迭代了？</p><p>实际上， <code>IEnumerator</code> + <code>yield</code>  该是属于  <code>C#</code>  的法糖，因为底层编译器会为此生成一个新的类，这个新类直接实现了  <code>IEnumerator</code>  接口，而原本的方法则会在被调用时，创建这个新类并返回。</p><p>如果想要证实这个猜测，这就要从编译后的代码说起了，通过  <code>dnSpy</code>  反编译，选择  <code>IL</code>  语言 (C# 模式会还原我们的代码，所以看不出来)，就可以查看到具体信息，一部分代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x0200019E RID: 414</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit TestEnumerator</pre></td></tr><tr><td data-num="3"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Nested Types</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Token: 0x02000215 RID: 533</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">nested</span> <span class="token keyword">private</span> auto ansi <span class="token keyword">sealed</span> beforefieldinit '<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'</pre></td></tr><tr><td data-num="8"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="9"></td><td><pre>implements <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>           <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">mscorlib</span></span><span class="token punctuation">]</span>System<span class="token punctuation">.</span>IDisposable<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>           <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IEnumerator`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// Token: 0x04000C77 RID: 3191</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">object</span> $current</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Token: 0x04000C78 RID: 3192</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">bool</span> $disposing</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// Token: 0x04000C79 RID: 3193</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>field assembly int32 $PC</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">//============ 略 ================</span></pre></td></tr></table></figure><p>我们只有一个  <code>TestEnumerator</code>  类，但是  <code>IL</code>  代码中却在  <code>TestEnumerator</code>  中又额外包含了一个  <code>&lt;GetEnumerator&gt;c__Iterator0</code>  新类。</p><p>再看原本的  <code>GetEnumerator()</code>  方法：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x06000E23 RID: 3619 RVA: 0x00059D54 File Offset: 0x00058154</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig</pre></td></tr><tr><td data-num="3"></td><td><pre>    instance <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token return-type class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator</span> GetEnumerator <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>DebuggerHiddenAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// Header Size: 12 bytes</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// Code Size: 15 (0xF) bytes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// LocalVarSig Token: 0x11000353 RID: 851</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span><span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* 0x00058160 736E110006   */</span> IL_0000<span class="token punctuation">:</span> newobj    instance <span class="token keyword">void</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/* 0x00058165 0A           */</span> IL_0005<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/* 0x00058166 06           */</span> IL_0006<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* 0x00058167 0B           */</span> IL_0007<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">/* 0x00058168 3800000000   */</span> IL_0008<span class="token punctuation">:</span> br        IL_000D</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/* 0x0005816D 07           */</span> IL_000D<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* 0x0005816E 2A           */</span> IL_000E<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method TestEnumerator::GetEnumerator</span></pre></td></tr></table></figure><p>该方法创建并返回了  <code>&lt;GetEnumerator&gt;c__Iterator0</code>  类的实例。</p><h3 id="movenext-原理"><a class="anchor" href="#movenext-原理">#</a> MoveNext 原理</h3><p>那么，协程中又是如何实现分块执行  <code>yield</code>  分割的代码呢？</p><p>在我之前的想像中，是觉得有一个  <code>容器</code>  去  <code>盛放</code>  这些代码块，通过  <code>yield</code>  将原本函数代码分割成一个个更小的代码块，然后维护一个下标，通过  <code>MoveNext</code>  递增下标来执行实现。</p><p>看了  <code>IL</code>  代码后，虽然跟实际表现有差异，不过想得感觉倒是没大错：确实是被编译成了更细小的代码块，同时以一个下标维护着代码块执行进度。</p><p>首先是三个字段：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Token: 0x04000C77 RID: 3191</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">object</span> $current</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Token: 0x04000C78 RID: 3192</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">bool</span> $disposing</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Token: 0x04000C79 RID: 3193</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>field assembly int32 $PC</pre></td></tr></table></figure><p>因为之前的代码太简单，不好看出结构，这里我多加了一点代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><code>GetEnumerator()</code>  被编译为新类的  <code>MoveNext()</code>  方法块，结构如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x0600116F RID: 4463 RVA: 0x00059D78 File Offset: 0x00058178</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> final hidebysig newslot <span class="token keyword">virtual</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    instance <span class="token return-type class-name"><span class="token keyword">bool</span></span> MoveNext <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// Header Size: 12 bytes</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// Code Size: 133 (0x85) bytes</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// LocalVarSig Token: 0x1100007D RID: 125</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">2</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> uint32</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">/* 0x00058184 02           */</span> IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">/* 0x00058185 7B790C0004   */</span> IL_0001<span class="token punctuation">:</span> ldfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">/* 0x0005818A 0A           */</span> IL_0006<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">/* 0x0005818B 02           */</span> IL_0007<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* 0x0005818C 15           */</span> IL_0008<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>m1</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/* 0x0005818D 7D790C0004   */</span> IL_0009<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/* 0x00058192 06           */</span> IL_000E<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* 0x00058193 4503000000050000002B00000050000000 */</span> IL_000F<span class="token punctuation">:</span> <span class="token keyword">switch</span>    <span class="token punctuation">(</span>IL_0025<span class="token punctuation">,</span> IL_004B<span class="token punctuation">,</span> IL_0070<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">/* 0x000581A4 385C000000   */</span> IL_0020<span class="token punctuation">:</span> br        IL_0081</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* 0x000581A9 00           */</span> IL_0025<span class="token punctuation">:</span> nop</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">/* 0x000581AA 7230AE0070   */</span> IL_0026<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代1"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/* 0x000581AF 28F700000A   */</span> IL_002B<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">/* 0x000581B4 02           */</span> IL_0030<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">/* 0x000581B5 14           */</span> IL_0031<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">/* 0x000581B6 7D770C0004   */</span> IL_0032<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">/* 0x000581BB 02           */</span> IL_0037<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/* 0x000581BC 7B780C0004   */</span> IL_0038<span class="token punctuation">:</span> ldfld     <span class="token keyword">bool</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$disposing</pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">/* 0x000581C1 2D07         */</span> IL_003D<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s  IL_0046</pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">/* 0x000581C3 02           */</span> IL_003F<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">/* 0x000581C4 17           */</span> IL_0040<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">/* 0x000581C5 7D790C0004   */</span> IL_0041<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token comment">/* 0x000581CA 3838000000   */</span> IL_0046<span class="token punctuation">:</span> br        IL_0083</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">/* 0x000581CF 7238AE0070   */</span> IL_004B<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代2"</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">/* 0x000581D4 28F700000A   */</span> IL_0050<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">/* 0x000581D9 02           */</span> IL_0055<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">/* 0x000581DA 14           */</span> IL_0056<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">/* 0x000581DB 7D770C0004   */</span> IL_0057<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">/* 0x000581E0 02           */</span> IL_005C<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/* 0x000581E1 7B780C0004   */</span> IL_005D<span class="token punctuation">:</span> ldfld     <span class="token keyword">bool</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$disposing</pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/* 0x000581E6 2D07         */</span> IL_0062<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s  IL_006B</pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">/* 0x000581E8 02           */</span> IL_0064<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">/* 0x000581E9 18           */</span> IL_0065<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">/* 0x000581EA 7D790C0004   */</span> IL_0066<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token comment">/* 0x000581EF 3813000000   */</span> IL_006B<span class="token punctuation">:</span> br        IL_0083</pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">/* 0x000581F4 7240AE0070   */</span> IL_0070<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代3"</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">/* 0x000581F9 28F700000A   */</span> IL_0075<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/* 0x000581FE 02           */</span> IL_007A<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/* 0x000581FF 15           */</span> IL_007B<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>m1</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">/* 0x00058200 7D790C0004   */</span> IL_007C<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">/* 0x00058205 16           */</span> IL_0081<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">/* 0x00058206 2A           */</span> IL_0082<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token comment">/* 0x00058207 17           */</span> IL_0083<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token comment">/* 0x00058208 2A           */</span> IL_0084<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;GetEnumerator>c__Iterator0'::MoveNext</span></pre></td></tr></table></figure><p>其中  <code>$PC</code>  字段就代表了当前细分代码块进度，然后在  <code>MoveNext()</code>  方法调用时，通过一个  <code>IL_000F: switch    (IL_0025, IL_004B, IL_0070)</code> —— 也就是  <code>Switch case</code>  判断执行当前应该执行哪个细分代码块了。</p><p>执行完细分代码块后，将  <code>yield</code>  返回值赋值给  <code>$current</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x000581B4 02           */</span> IL_0030<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x000581B5 14           */</span> IL_0031<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* 0x000581B6 7D770C0004   */</span> IL_0032<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr></table></figure><p>并将  <code>$PC</code>  替换为对应的 index：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x000581C3 02           */</span> IL_003F<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x000581C4 17           */</span> IL_0040<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* 0x000581C5 7D790C0004   */</span> IL_0041<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr></table></figure><p>执行完毕后，最后通过指令跳转返回  <code>0</code>  或  <code>1</code>  作为  <code>bool</code>  变量，用于调用者判断是否已结束：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x00058205 16           */</span> IL_0081<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x00058206 2A           */</span> IL_0082<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* 0x00058207 17           */</span> IL_0083<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/* 0x00058208 2A           */</span> IL_0084<span class="token punctuation">:</span> ret</pre></td></tr></table></figure><p>原来指令集中  <code>bool</code>  确实是作为  <code>int</code>  处理的？难怪之前在研究  <code>Bool字节对齐</code>  字节对齐的时候，通过  <code>Marshal.SizeOf</code>  取出来是  <code>4</code>  个字节。</p><h1 id="实现自己的协程"><a class="anchor" href="#实现自己的协程">#</a> 实现自己的协程</h1><p>有了上述基本原理理解之后，实现一个自己的  <code>协程</code>  也就是非常简单的事了。</p><p>这里以一个简单的多线程为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">SynchronizationContext</span> Current<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">TestEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        Current <span class="token operator">=</span> SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">IEnumerator</span> em <span class="token operator">=</span> <span class="token function">TestMyEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name"><span class="token keyword">int</span></span> wait <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>em<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                wait <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>em<span class="token punctuation">.</span>Current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>wait <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> wait<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>wait <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">else</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                    <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"发现未知迭代对象："</span> <span class="token operator">+</span> em<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">TestMyEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代1，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代2，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代3，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        Current<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="/blogimages/2023/2023-02-01/m_89e0a77f491e315a3a6392e896cf92fa_r.png" alt="" /></p><p>如上图所示，我们自己实现的  <code>协程</code>  ，只处理了  <code>yield return null</code>  及  <code>yield return 数字</code>  的情况，若为  <code>null</code>  等待一秒，若为  <code>数字</code>  则等待指定数字秒数。</p><p>根据打印时间判断，逻辑是正确生效了的。</p><p>同时如果还有其它等待逻辑，则增加判断即可，如  <code>Unity</code>  提供的各种协程等待方法： <code>WaitForEndOfFrame</code> 、 <code>WaitForSeconds</code> 、 <code>WaitForFixedUpdate</code>  等等，我怀疑就是这样处理的，不过由于  <code>Unity</code>   <code>StartCoroutine</code>  协程最终实际生效是调用的  <code>extern</code>  函数，C# 反编译跟不进去了：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>InternalCall<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">extern</span> <span class="token return-type class-name">Coroutine</span> <span class="token function">StartCoroutineManaged2</span><span class="token punctuation">(</span><span class="token class-name">IEnumerator</span> enumerator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>因此真实逻辑就不得而知了，只能猜测大约是使用类似方式，毕竟迭代器逻辑就这样。</p><h1 id="unity协程执行时机"><a class="anchor" href="#unity协程执行时机">#</a> Unity 协程执行时机</h1><p>在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMTkuNC9NYW51YWwvRXhlY3V0aW9uT3JkZXIuaHRtbA==">官方文档 ExecutionOrder</span> 有对应的流程图，其正常等待位于  <code>Update</code>  之后， <code>LateUpdate</code>  之前。</p><p>例外的有比如： <code>WaitForFixedUpdate</code>  位于 Update 之前， <code>WaitForEndOfFrame</code>  位于一帧最后。</p><h1 id="补充"><a class="anchor" href="#补充">#</a> 补充</h1><p>(2023.2.24)</p><h2 id="调用了类成员函数的协程"><a class="anchor" href="#调用了类成员函数的协程">#</a> 调用了类成员函数的协程</h2><p>例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _counter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        _counter<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>为协程编译的新类字段中会对本类产生引用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 '<span class="token operator">&lt;</span><span class="token operator">></span>1__state'</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> <span class="token keyword">object</span> '<span class="token operator">&lt;</span><span class="token operator">></span>2__current'</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span> '<span class="token operator">&lt;</span><span class="token operator">></span>4__this'</pre></td></tr></table></figure><p>初始化的地方是原本主类的  <code>GetEnumerator</code>  方法（实例化迭代类时将自身实例传进去）：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>field <span class="token keyword">private</span> int32 _counter</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Methods</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig </pre></td></tr><tr><td data-num="6"></td><td><pre>    instance <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token return-type class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator</span> GetEnumerator <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>IteratorStateMachineAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token number">01</span> <span class="token number">00</span> <span class="token number">22</span> <span class="token number">54</span> <span class="token number">65</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">45</span> 6e <span class="token number">75</span> <span class="token number">6d</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">74</span> <span class="token number">6f</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">72</span> 2b 3c <span class="token number">47</span> <span class="token number">65</span> <span class="token number">74</span> <span class="token number">45</span> 6e <span class="token number">75</span> <span class="token number">6d</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">74</span> <span class="token number">6f</span> <span class="token number">72</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        3e <span class="token number">64</span> <span class="token number">5f</span> <span class="token number">5f</span> <span class="token number">31</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// Method begins at RVA 0x2151</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// Header size: 1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// Code size: 14 (0xe)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">8</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    IL_0000<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    IL_0001<span class="token punctuation">:</span> newobj instance <span class="token keyword">void</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>d__1'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    IL_0006<span class="token punctuation">:</span> <span class="token class-name">dup</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    IL_0007<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    IL_0008<span class="token punctuation">:</span> stfld <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>d__1'<span class="token punctuation">::</span>'<span class="token operator">&lt;</span><span class="token operator">></span>4__this'</pre></td></tr><tr><td data-num="23"></td><td><pre>    IL_000d<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method TestEnumerator::GetEnumerator</span></pre></td></tr></table></figure><p>注：后续反编译发现就算协程没有调用主类字段，初始化内嵌类时依然会将主类实例出传递进去 (为什么上面的记录似乎没有？)。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><ul><li>反编译  <code>IL</code>  代码显示为自动创建一个实现了  <code>IEnumerator</code>  的新类，调用存在  <code>yield</code>  的原方法自动  <code>newObj</code>  这个新类<ul><li>协程的局部变量会被编译为新类的成员变量</li></ul></li><li>根据  <code>yield</code>  原方法逻辑会被编译成一段一段更细粒度的的代码块，并挪到  <code>MoveNext</code>  方法中</li><li>维护一个下标，每次调用返回的  <code>IEnumerator</code>   <code>MoveNext()</code>  就往下挪一位</li><li>等待逻辑后再调用下一个小方法块，可以由调用者判断  <code>Current</code>  值进行操作。因此如果是主线程调用，其中有死循环就会卡死主线程</li><li>协程本质上依然只是主线程上的一个调用，消耗的是主线程的时间，同时每个协程方法会被编译成一个新类，因此也不能滥用，顶多某些时候可以更方便地分帧处理</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;这两天又研究了下协程，之前虽然用过，也稍微想过，但是并没有深入研究，这次就想把流程仔细走一遍。&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a class=&quot;anchor&quot; </summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2022年总结</title>
    <link href="https://wangjiaying.top/2023/01/30/2022%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://wangjiaying.top/2023/01/30/2022%E5%B9%B4%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-30T03:48:27.000Z</published>
    <updated>2023-04-16T08:02:40.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>今年春节本来也没回家，就打算把总结写一下的。然后不知怎么拖延症又上来了，加上春节放假前几天不知怎么，嘴里也开了个口子，吃东西都疼，心情也难以好起来。</p><p>整个春节除了有两天时间出去买菜之外（另外春节蔬菜也涨价了，几乎比平时贵了几倍，白菜除外），基本上是一直待在成都屋里的。</p><ul><li>早上起床坐一会，感觉就该吃午饭了</li><li>再睡一觉，又到了晚饭</li></ul><p>—— 简直过得比以前看小说的时候都快，时间从来没这么快的！</p><p>以前有听过一个理论：</p><blockquote><p>熟悉的记忆会被大脑合并，导致产生『时间过得快』的错觉，这次春节确实有这种感觉。</p></blockquote><p>仔细想想，春节本来还打算利用这些时间加深学习的，结果似乎也没干多少事：</p><ol><li>收尾批量图片处理工具</li><li>又玩了《三国志幻想大陆》—— 不得不说，这游戏的回归福利太好了，送得像破解版似的，当然回归时间过了就没了</li><li>1 月 26~27 号补番看了《致不灭的你 2》、《世界顶尖的暗杀者 - 转生为异世界贵族》、《野良神》</li></ol><p>也就是说，春节花了几天把 <a href="/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/" title="开发一个批量图片处理工具">开发一个批量图片处理工具</a> 姑且收尾之后，就一直拖着了。</p><hr /><p>今天是 1 月 30 日，眼看着一月份就要过去了，还是整理一下，把总结写了罢。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>又是一年，2022 年就这样过去了，来到了 2023 年。</p><p>去年做了什么呢？</p><h2 id="生活上"><a class="anchor" href="#生活上">#</a> 生活上</h2><p>游戏上玩了：</p><ol><li>《幻塔》台服</li><li>《三国志幻想大陆》(年底刚回坑玩了下)</li></ol><p>小说：</p><ol><li>信息全知者 (没看完，太长了)</li><li>银河系殖民手册</li><li>天道方程式</li><li>我的成神日志</li></ol><p>小说就看了这么几本？</p><p>感觉当然不止，只是从头看完的，还觉得可以的大概就这几本了。</p><p>最后的成神日志写了一个靠 “学习” 把一切都研究透彻的故事，虽然必然夸大其词 —— 毕竟是小说，不过总感觉让人也对追求知识有所期待了。</p><p>后面暂时就不打算看小说了 (其实自动去年评审后基本就没看了)。<br />小说虽然容易让大脑满足幻想，但也有可能覆盖显示记忆的缺点，大概就是那种以感性换理性的感觉，『过犹不及』，如果想继续前进，就不大容幻想，还是要回到理性上来，以后什么时候想歇歇了再说吧。</p><hr /><p>还有就是，跟妹妹介绍的对象  <code>晚安晚安早安</code>  地发了一年之后，前段时间也终于没有再聊了 —— 网聊确实很难，开始那段时间确实心情挺激动的样子，想象着对方的样子。<br />不过久了之后就感觉越来越难以为继了，特别是我们性格都是那种... 难以主动表达自己的人 —— 一年了，甚至我们除了一开始之外，都没有语音过、更别说什么视频了。连对方的样子说实话，都没有任何印象。</p><p>国庆时候回去看了一下，不过只见了一面对方就回老家去了，作为脸盲患者，很快就又失了印象。</p><p>加上作为恐婚者，难以想象怎么样与另外似乎『陌生人』人共同生活。那段时间工作也不顺利，买的基金也巨亏，慢慢就淡了。</p><p>虽然家里人劝起来有时候感觉危机... 一般听得最多的就是，现在年轻，但是老了怎么办？但确实恐惧、害怕、担心，总让人想起以前，小学、初中、高中...<br /> 一个人就不用担心了。</p><h2 id="工作上"><a class="anchor" href="#工作上">#</a> 工作上</h2><p>自从开始接手现在 汉室复兴 项目以来，也有一年多了 —— 还记得前年刚接手的时候，给组员开周会都紧张得背上冒汗，到逐渐能比较完整传达意思，明明感觉比以前光做功能时进步更大。</p><p>而且在此期间除了大功能开发之外，基本上都亲力亲为地去搞，同时在这期间以优化项目总体上进行研究新技术，试图应用于项目本身。</p><p>比如意图升级项目，然后采用 Huatuo (HybridClr) 方式进行代码热更 —— 想象以后要是跟策划运营说：『需求你们随便提，版更都不用出整包，直接可以功能热更』就感觉有点激动呢！</p><p>过去的一年大概是工作积极性最高的。</p><p>当然，虽然是项目主程了，也不能为所欲为... 被更上级阻止了，被批评忽视了项目安全和稳定性 —— 虽然我觉得自己已经够稳了，测试都是在无关紧要分支上做的。当时费功夫升级后，又花时间『<a href="/2022/08/31/%E5%85%B3%E4%BA%8E%E4%BB%8EUnity2021%E9%99%8D%E7%BA%A7%E4%B8%BAUnity2018%E7%9A%84%E9%97%AE%E9%A2%98/" title="降级">降级</a>』，现在那个分支版本可以说是都已经被『放弃』了。</p><p>于是只能说，以后会把自我学习放在首位，项目以稳定性为准，维护好项目。</p><h2 id="学习上"><a class="anchor" href="#学习上">#</a> 学习上</h2><h3 id="底层基础知识的深入"><a class="anchor" href="#底层基础知识的深入">#</a> 底层基础知识的深入</h3><p>之前老是去搞宏观上的技术研究，能不能用上不说 —— 却因为项目开发过程中用不到就忽略忽视了对基础知识的深入了解和研究以及复习，并且没有作系统的总结，导致知识分散，都是点，无法形成面，不能统合所学知识，甚至清晰明确地表达出来。—— 这样也导致碰到问题，全凭经验解决，问如何解决的？就难以适时找出合适的回答。</p><p>特别是底层知识点，不能因为平时用不上，就只做理论上了解，理论了解再多，想错了那就全错了，必须得实践 —— 自己创建测试工程，一一尝试，才能明白究竟哪里理解得不对，哪里有偏差，及时反应过来并正确理解。当足够深入，平时想不到的做法或许就有启发？</p><h3 id="还有项目功能设计总结"><a class="anchor" href="#还有项目功能设计总结">#</a> 还有项目功能设计总结</h3><p>知道跟说出来是两回事，除了本身了解，还得想象如何才能明确表达，问急了直接说不知道是不行的 —— 而且思维还停留在问什么答什么。</p><p>例如之前评审时问的登录功能，解析登录数据的排序如何？控制顺序字段数组里加字段都不是一次两次了，结果直接按照普通接口解析规则回答，回答顺序控制由后台决定..... 虽然后面的是按照项目回答的，但是第一步就错了就给人一种是不是乱说的感觉？所以说做功能不止做完就完了，还得记住为什么才行，说不出来的经验谁当真呢。</p><h3 id="另外纯理论知识也需要更多的补充同时结合实践理解"><a class="anchor" href="#另外纯理论知识也需要更多的补充同时结合实践理解">#</a> 另外，纯理论知识也需要更多的补充，同时结合实践理解</h3><p>平时还是在开发应用层面花的时间多了（而且还没法把这些 “应用” 清晰明确地逻辑讲出来）。</p><ul><li>例如战斗系统<br />从《九州缥缈录》——18 年还是 19 年开始就一直在搞战斗系统，当被问到 如何设计一个高性能战斗系统？ 的时候，竟然不知道从何说起 —— 这虽然跟当时实在是脑袋太昏有点关系，但更多也是因为平时只在单纯做，实现策划功能，却没有认真去思考框架设计有关系。</li></ul><p>给一个需求单，然后给几天慢慢想肯定能能给出一个完整的解决方案，要求当时立即说出来.... 那实在是难反应过来 —— 总感觉自己的脑袋比较笨，即时反应能力很弱。平时也该更多地思考。</p><h3 id="其次对算法技能也不够敏感需要加强算法锻炼"><a class="anchor" href="#其次对算法技能也不够敏感需要加强算法锻炼">#</a> 其次对算法技能也不够敏感，需要加强算法锻炼</h3><h3 id="最后关于写文章"><a class="anchor" href="#最后关于写文章">#</a> 最后，关于写文章</h3><p>之前的自我学习的时候也确存在缺点，比较浮于表面，而且写文章也太啰嗦了，长篇大论后自己都不想看，所以后面我开始有意识在文章末尾加上『总结』：至少把重点最后标注出来</p><p>当然感觉写文章本身的时候该是也需要优化一下，写明白主要点就够了，提及重点 —— 毕竟写技术文章主要就是给自己看，太过于长篇大论，浪费时间不说，后续自己都不喜欢看也没意义。</p><p>嗯... 文章排版也需要学习下，就算用 Markdown，也总感觉跟其他人的有很大差距，不够美观，组织还难看。</p><p>过去一年，虽然写了十几二十几篇文章，时间久了知识点连自己都记不清了。所以，要记、思考、总结并理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;今年春节本来也没回家，就打算把总结写一下的。然后不知怎么拖延症又上来了，加上春节放假前几天不知怎么，嘴里也开了个口子，吃东西都疼，心情也难以好起来。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="总结" scheme="https://wangjiaying.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://wangjiaying.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>开发一个批量图片处理工具</title>
    <link href="https://wangjiaying.top/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://wangjiaying.top/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2023-01-21T11:37:15.000Z</published>
    <updated>2023-02-04T06:15:27.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>想做这个的原因有两点：</p><ol><li>Unity 的各项压缩格式，除 RGB 不压缩及 ASTC，基本都只支持 POT 分辨率的图，但是美术给的图相当不合规范</li><li>最近在给自己博客换了主题，因为 Shoka 随机壁纸采用的<s>新浪图床</s>也不再提供服务，想着直接把随机图片托管到 GitPages 算了，GitPages 的速度大家都知道，这就涉及到一个尽量压缩少大小，以期减少加载时间的问题</li></ol><p>之前直接在 Unity 里边写过一个小脚本，可以批量一键将图片『截取』为指定分辨率。</p><p>由于利用的是 Unity  <code>Texture2D</code>  类，这个类提供的处理方式很简单粗暴：直接按像素设置。所以只能做到 『截取』功能，没法做到『缩放』。</p><p>比如一个图片是  <code>1920x1080</code> ，如果想将其分辨率改成  <code>1280x720</code> ，得到的恐怕就只是这张图片其中的 <code>一部分</code> 了，例如：上半部分一小块、中间部分一小块，然后形成低分辨率。</p><p>如图所示：<br /><img data-src="/blogimages/2023/2023-01-21/m_70ba3b13a8846f219547f93a05ccf5b3_r.jpeg" alt="" /></p><p>也就是说  <code>Texture2D</code>  只能单纯『截取』，而且中间可能还会涉及到获取分辨率与设置分辨率差异量过大导致越界异常等问题。</p><p>昨天晚上回家后，查到 C# 其实就提供了对应的处理方法，可以利用  <code>System.Drawing.Image</code> 、 <code>System.Drawing.Graphics</code>  进行缩放操作，然后简单用  <code>UnityEditor</code>  写了个工具，可以根据图片宽度进行『截取缩放』，而非之前  <code>Texture2D</code>  那样单纯只能截取。</p><p><img data-src="/blogimages/2023/2023-01-21/m_f820f6115247ad9088a9c7abebe2a930_r.png" alt="" /></p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GUIStyle</span> _style<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesWindow"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        _style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUIStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token generic-method"><span class="token function">GetWindow</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TexturesCutWindow<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _path<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 截取中间部分</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _isCutCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 截取分辨率</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Vector2Int</span> _cutPixels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"选择"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            _path <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFolderPanel</span><span class="token punctuation">(</span><span class="token string">"选择一个待处理文件夹"</span><span class="token punctuation">,</span> _path<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span><span class="token string">"目录："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            _style<span class="token punctuation">.</span>normal<span class="token punctuation">.</span>textColor <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token string">"请选择一个目录！"</span><span class="token punctuation">,</span> _style<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">else</span> GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        _isCutCenter <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"截取中间部分"</span><span class="token punctuation">,</span> _isCutCenter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        _cutPixels <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Vector2IntField</span><span class="token punctuation">(</span><span class="token string">"分辨率"</span><span class="token punctuation">,</span> _cutPixels<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"截取"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayDialog</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个目录！"</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token function">CutTestures</span><span class="token punctuation">(</span>_path<span class="token punctuation">,</span> _isCutCenter<span class="token punctuation">,</span> _cutPixels<span class="token punctuation">.</span>x<span class="token punctuation">,</span> _cutPixels<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isCenter<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> height<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"*.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"_CutResult_CenterPixel_"</span> <span class="token operator">+</span> isCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> texPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> texNum <span class="token operator">=</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> texNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            texPath <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"处理中："</span> <span class="token operator">+</span> texPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>texNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token function">ZoomImage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"处理完毕："</span> <span class="token operator">+</span> texPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token comment">// 等比例缩放图片</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Bitmap</span> <span class="token function">ZoomImage</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bitmap<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> destWidth<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> destHeight<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">try</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Image</span> sourImage <span class="token operator">=</span> bitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token class-name">Bitmap</span> destBitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Graphics</span> g <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>destBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            g<span class="token punctuation">.</span>CompositingQuality <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>CompositingQuality<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            g<span class="token punctuation">.</span>SmoothingMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>SmoothingMode<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            g<span class="token punctuation">.</span>InterpolationMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>InterpolationMode<span class="token punctuation">.</span>HighQualityBicubic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token comment">// 尝试以宽度为基准，截取缩放</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>sourImage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sourImage<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> sourImage<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span>destWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>destHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> GraphicsUnit<span class="token punctuation">.</span>Pixel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>            sourImage<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            <span class="token keyword">return</span> destBitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">catch</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这种方式实现的话，可以以图片宽度为基准，再确定是否截取高度，或者不足填充透明度 —— 也就是说支持基于宽度的缩放。</p><p>如图所示，是将  <code>1920x1200</code>  缩放至  <code>700x300</code>  分辨率：<br /><img data-src="/blogimages/2023/2023-01-21/m_3b66b8ee697959d44ac5ae453d8cba7e_r.jpeg" alt="" /></p><p>后来一想：为啥不直接写成一个通用的工具，每次使用还得打开 Unity 么？<br />而且做成工具后，还可以根据需求，截取完毕后作一条龙处理：后续转其它例如 WebP 之类的格式。</p><h1 id="需求"><a class="anchor" href="#需求">#</a> 需求</h1><p>由于项目存在大量 NPOT 图片，导致压缩格式难以生效，大量图片实际处于 RGBA32 模式，且 Unity 自带的 POT 缩放会导致变形 (Sprite 也无法使用) 因此想要实现一个通用的 WPF 工具，可以大批量将图片正确重新缩放为 2N 次方或其它模式的工具，至少包含以下功能：</p><ol><li>批量处理图片</li><li>直接缩放图片，完全将旧图缩放至新分辨率，不拉伸，不足处使用透明度填充</li><li>基于宽度或高度缩放图片，不足处裁剪</li><li>基于图片当前分辨率，缩放至最接近的 2N 次方分辨率，可选是否将宽高缩放至一致，不足以透明度填充</li><li>可以设定 X、Y 偏移量，丢弃偏移量之前的像素</li><li>可以直接选择最终存储格式，使其可以当做一个格式转换器使用</li><li>可以事先预览各个选项造成的结果</li></ol><h1 id="研究"><a class="anchor" href="#研究">#</a> 研究</h1><p>于是在网上先是以  <code>C# 图片处理库</code>  这种关键字查了下</p><p>找到了一个 <span class="exturl" data-url="aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2RvdG5ldC9uZXQtY29yZS1pbWFnZS1wcm9jZXNzaW5nLw==">net-core-image-processing</span> 的文章（对应翻译 <a href="https://zhuanlan.zhihu.com/p/25928777">【渣翻译】.NET Core 图片处理<br /></a>）</p><p>最后选中了  <code>ImageSharp</code>  这个图像处理库，不为什么，就因为它是纯 C# 实现，感觉可能更方便。</p><p>Git 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NpeExhYm9ycy9JbWFnZVNoYXJw">ImageSharp</span></p><h1 id="问题"><a class="anchor" href="#问题">#</a> 问题</h1><p>在使用 WPF 过程中碰到了不少问题，毕竟以前虽然有用过，但都是简单用用，没有深入研究。</p><p>这次想实现一点 高级特性 功能就感觉不够用了，碰到了不少问题。</p><p>然后越记录越多，因此还是新开一个文档记录了，具体在：使用 WPF 问题记录</p><h1 id="缩放方式"><a class="anchor" href="#缩放方式">#</a> 缩放方式</h1><p>目前准备支持选择的缩放方式如下：</p><ul><li>不缩放：不会改变原本分辨率</li><li>直接缩放：直接缩放为设置的分辨率，不足之处直接拉伸，会造成变形</li><li>比例缩放：将原图缩放至指定分辨率时尽量保持比例不变，多余处填充透明度</li><li>比例裁剪：以高度或宽度最大者为基准进行缩放，尽量保持比例不变，多余处直接裁剪</li><li>基于宽度：以宽度为基准进行缩放，高度不足则以透明度填充，高度超过之处则裁剪</li><li>基于高度：以高度为基准进行缩放，宽度不足则以透明度填充，宽度超过之处则裁剪</li><li>填充缩放：如果图片小于设定分辨率，则不改变图片原有像素大小，不足之处以透明度填充；如果图片大于设定分辨率，则比例缩放</li><li>POT 缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处进行透明度填充</li></ul><h2 id="直接缩放"><a class="anchor" href="#直接缩放">#</a> 直接缩放</h2><p>直接将原分辨率拉伸填满设定的新分辨率，会造成拉伸变形，实现要也是最简单的，直接调用接口默认就是这种模式。</p><h2 id="比例缩放"><a class="anchor" href="#比例缩放">#</a> 比例缩放</h2><p>自动基于高度或宽度，保持比例不变的情况下缩放至新图。</p><p>分析：</p><p>既然是保持比例不变，那么首先需要计算出原图的比例。</p><p>例如原图为  <code>720x1280</code>  需要缩放至  <code>1280x720</code> :</p><p><img data-src="/blogimages/2023/2023-01-21/m_2b8041e6dc4de2ab9dd4e77af924ffa2_r.png" alt="" /></p><ul><li>原始比例为：720/1280=0.5625</li><li>保持不变的情况下，若基于宽度，则高度为：1280/0.5625=2275</li><li>保持不变的情况下，若基于高度，则宽度为：720x0.5625=405</li><li>由于此时基于宽度的情况下，高度将会越界，因此只能选择基于高度</li><li>即新的分辨率为：405x720</li><li>像素复制开始位置为：(1280-405)/2,(720-720)/2</li></ul><p>基本代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 先计算原图比例</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">float</span></span> scaleRatio <span class="token operator">=</span> image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 再按照比例映射至新图时，什么分辨率合适</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 保持不变的情况下，若基于宽度</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">/</span> scaleRatio<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 保持不变的情况下，若基于高度</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">*</span> scaleRatio<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 新的正确比例情况下，哪个正确不越界</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>newHeight <span class="token operator">></span> data<span class="token punctuation">.</span>Height<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 基于宽度，新的高度越界了那么，取基于高度</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    newHeight <span class="token operator">=</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 基于高度，新的宽度越界了那么，取基于宽度</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    newWidth <span class="token operator">=</span> data<span class="token punctuation">.</span>Width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>startX <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">-</span> newWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>startY <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">-</span> newHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>效果如下：</p><p><img data-src="/blogimages/2023/2023-01-21/m_bcd51791799f9a3a1bb7f81a487e5ce5_r.png" alt="" /></p><hr /><p>当做完这个效果之后，点进去看了下接口，结果发现了如果采用  <code>ResizeOptions</code>  作为参数传递，有一个  <code>ResizeMode</code>  的枚举：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">//     Provides enumeration over how the image should be resized.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResizeMode</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//     Crops the resized image to fit the bounds of its container.</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Crop<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">//     Pads the resized image to fit the bounds of its container. If only one dimension</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//     is passed, will maintain the original aspect ratio.</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        Pad<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//     Pads the image to fit the bound of the container without resizing the original</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">//     source. When downscaling, performs the same functionality as SixLabors.ImageSharp.Processing.ResizeMode.Pad</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        BoxPad<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">//     Constrains the resized image to fit the bounds of its container maintaining the</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">//     original aspect ratio.</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        Max<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">//     Resizes the image until the shortest side reaches the set given dimension. Upscaling</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">//     is disabled in this mode and the original image will be returned if attempted.</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        Min<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">//     Stretches the resized image to fit the bounds of its container.</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        Stretch<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token comment">//     The target location and size of the resized image has been manually set.</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        Manual</pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>... 感觉看着有点不对劲，是不是又造轮子了？这个功能是  <code>ImageSharp</code>  就有的么...</p><p>然后稍微研究了下，好像真的是提供了基础的缩放设定的... 只是之前我一直使用普通传参方式调用，导致才发现这么个接口。</p><p>不过后续研究了下发现，自带的接口  <code>Pad/BoxPad</code>  确实类似的于上述我实现的缩放模式，不过仅限于缩小时，当指定分辨率比图更大时，自带的接口不会缩放图片大小，而是直接填充透明度 —— 这样功能更类似于  <code>填充缩放</code> ，对比结果：</p><p><img data-src="/blogimages/2023/2023-01-21/m_15956b46e6ea54dcb2c30926f64fedec_r.png" alt="" /></p><p>左边是我实现的方法，右边是自带的  <code>Pad/BoxPad</code>  模式。</p><p>于是比例缩放还是用自己方法，填充缩放则直接调用  <code>ImageSharp</code>  接口了。</p><h2 id="比例裁剪"><a class="anchor" href="#比例裁剪">#</a> 比例裁剪</h2><p>直接使用 Imagesharp 的  <code>Crop</code>  模式</p><h2 id="基于宽度高度"><a class="anchor" href="#基于宽度高度">#</a> 基于宽度 / 高度</h2><p>与上面自定义的算法其实是一样的，只是固定为宽度或高度为准，不再判断哪个边更『长』</p><p>基于宽度，就是把宽度当做不变的值，根据原图比例，重设新的宽度下的高度值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> EScaleMode<span class="token punctuation">.</span>WidthBase<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 基于宽度，计算新的高度</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">-</span> newHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>基于高度，把高度当做不变的值，根据原图比例，重设新的高度下的宽度值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> EScaleMode<span class="token punctuation">.</span>HeightBase<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 基于高度，计算新的宽度</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">*</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">-</span> newWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="pot缩放"><a class="anchor" href="#pot缩放">#</a> POT 缩放</h2><p>POT 指的 Power of two，即 2N 次方，即需求是计算 <strong>计算与指定数值最接近的 2N 次方</strong></p><p>Unity 里边除了 ASTC 外，其它压缩格式均要求 POT 分辨率格式的图片</p><p>Unity 本身其实也自带了 POT 缩放的选项，不过它只是单纯拉伸图片，使其撑满缩放后的分辨率，会造成变形。</p><p>这里我则是想实现不拉伸的缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处进行透明度填充</p><h3 id="缩放计算"><a class="anchor" href="#缩放计算">#</a> 缩放计算</h3><p>这里计算最接近 2N 的方式大概有 3 种：</p><ul><li>除二计算 (自顶向下)</li><li>乘二计算 (自底向上)</li><li>二进制操作</li></ul><p>其中二进制操作是在网上看到的方法</p><h4 id="除二计算"><a class="anchor" href="#除二计算">#</a> 除二计算</h4><p>指定数字 X 不断除二，直到 X 不再大于 0，期间计算了 N 次，那么 2N 次方就是最接近 X 的 POT 数。</p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">do</span> <span class="token punctuation">&#123;</span> x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">Print</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="乘二计算"><a class="anchor" href="#乘二计算">#</a> 乘二计算</h4><p>跟上一种方式类似</p><p>不过是从下往上判断，2 不断往上乘，直到获得的数值超出了 X</p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1080</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 若取比 X 更小的 2N 数值</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//n-=1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">Print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这种方式有个缺点，原因是由于采用比较方式，原数值并未参与 <code>计算</code> ，测了一下大概是：只能取比 X 大的或者比 X 小的 POT 数值，并不能取到  <code>最接近</code>  的 2N 数值。</p><h4 id="二进制操作"><a class="anchor" href="#二进制操作">#</a> 二进制操作</h4><p>这是在网上看到的一种方法，通过位移计算：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token comment">// 比 X 小的 2N 数值</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token keyword">return</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>缺点与 乘二计算 一致，只能取比指定数字 X 更大，或者更小的 2N 数值（除非再增加额外判断或者改造）</p><p>实现方式感觉很巧妙，于是简单分析了下，以数字 100 为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//1100100</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 110010</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//  11001</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//    110</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//      0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111011</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111111</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111111</span></pre></td></tr></table></figure><p>可以发现，100 直接转二进制是有 7 位的，</p><ul><li>当右移一位后，变成了 6 位</li><li>右移二位后，变成了 5 位</li><li>右移四位后，变成 3 位</li><li>右移八位后，变成 1 位 0 (这是因为 100 太小了)</li></ul><p>每次或运算，都会使得对应位数变成 1，最后会使得整个二进制全部变成 1，即 『 <code>1111111</code> 』(长度以右移一位为准)，同样的位数全部为 1 肯定会比原值更大，不过这种格式转为十进制后，是  <code>2N-1</code> ，因此 + 1 之后就变成『 <code>10000000</code> 』这种格式转为十进制即为 2N</p><hr /><p>上面的分析是否准确呢？</p><p>其实，恰好因为我选的数字是 100，才造成了这种  <code>看似正确</code>  的结果，实际上是 <code>有误</code> 的。</p><p>仔细看原算法，每次  <code>或运算之前</code> ，x 的值都是之前的修改过的值基础上进行，而在上述使用 100 为例的分析中，打印的都只是 100 直接位移之后的二进制值。</p><p>如果换一个数字，例如  <code>128</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"1101000"</span></pre></td></tr></table></figure><p>是吧，完全乱了。</p><p>如果想依照这种算法计算，那么每次位移递增都只能是 1 位，而非 2N 递增。</p><p>之所以能够 2N 递增的原因是，与前值进行位移后，就包含了之前的</p><p>例如，还是以 128 为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">128</span><span class="token operator">=</span>      <span class="token string">"10000000"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"10000000"</span><span class="token operator">|</span><span class="token string">"1000000"</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11000000"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"11000000"</span><span class="token operator">|</span><span class="token string">" 110000"</span><span class="token punctuation">(</span><span class="token number">11000000</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11110000"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token string">"11110000"</span><span class="token operator">|</span><span class="token string">"  1111"</span><span class="token punctuation">(</span><span class="token number">11110000</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11111111"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token string">"11111111"</span><span class="token operator">|</span><span class="token string">"     0"</span><span class="token punctuation">(</span><span class="token number">11111111</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11111111"</span></pre></td></tr></table></figure><p>因为每次或运算都是在前者基础上进行，因此可移动的位数是倍增的，在二进制位移层面上，倍增的表现就是以 2N 递增。</p><ul><li>第一次移动 1 位 (变成 2 个单位)</li><li>第二次移动 2 位 (变成 4 个单位)</li><li>第三次移动 4 位 (变成 8 个单位)</li><li>第四次移动 8 位 (变成 16 个单位)</li></ul><p>当然，由于这里 128 本身只有 8 位，右移 8 位 后结果直接为 0，因此实际到第三次移动时就已经确定了结果，第四次属于无效操作。</p><p>所以在上面的算法中，最高右移 8 位，即代表最高支持 2^16 次方数值：65535 及以下</p><p>测试结果很简单，加上打印，并传入 65536：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>     <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">.</span>     <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"10000000000000000"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"11000000000000000"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token string">"11110000000000000"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token string">"11111111000000000"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">"11111111111111110"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token string">"11111111111111111"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">131071</span></pre></td></tr></table></figure><p><code>65536</code>  的下一个 2N 应该是  <code>131072</code> ，这里计算出来直接少了一位了。</p><p>同理可得加上第四次移动  <code> x &gt;&gt; 16</code> ，理论上最大可以支持  <code>2^32</code>  次方。</p><h3 id="采用算法"><a class="anchor" href="#采用算法">#</a> 采用算法</h3><p>考虑了一下，决定使用位运算的方式，毕竟这看着就比前两种暴力算法厉害。</p><p>另外，由于我这里是对分辨率的修改，没有那么高的数值需求 —— 至少感觉不可能有那么大的分辨率，因此最多移动四次即可。</p><p>最后再加上接近判断，就可以弄出三个函数分别代表  <code>最接近</code> 、 <code>更小</code> 、 <code>更大</code> ，与 Unity 提供的 POT 缩放模式一致：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/// 计算给定数值的 POT（根据缩放模式返回给定数值接近的 2N 数值）</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/// 最大支持 65535</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalcPot</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name">EPotMode</span> mode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> oldX <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> minPot <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToNearest<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token comment">// 判断哪个更接近 X</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">return</span> x <span class="token operator">-</span> oldX <span class="token operator">></span> oldX <span class="token operator">-</span> <span class="token class-name">minPot <span class="token punctuation">?</span></span> minPot <span class="token punctuation">:</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToLarger<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToSmaller<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token comment">// 比 X 小的 2N 数值</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">return</span> minPot<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 出问题了？</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> oldX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bool字节对齐"><a class="anchor" href="#bool字节对齐">#</a> Bool 字节对齐</h2><p>在重构代码，以使枚举可以更方便支持 WPF 数据绑定时，我采用了扩展函数的形式，并对数据进行了缓存。</p><p>由于定义的结构体，特意注意了一下字节对齐，发现 1 个 bool 变量 + 2 个指针变量是 24 个字节</p><p>再增加一个 bool 变量也是 24 个字节，但加到 3 个就不对了，变成了 32 个字节。</p><p>然后就单独分析了下，直接调用  <code>sizeof</code>  确实是 1 个字节，但放结构体使用  <code>Marshal.SizeOf</code>  就变成 4 个字节了：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">bool</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">></span> <span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">CacheData</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>     <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> IsAddFirstName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">></span> Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CacheData</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">4</span></pre></td></tr></table></figure><p>其实，不只是放结构体， <code>Marshal.SizeOf</code>  直接获取到的大小就是 4 个字节：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">bool</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">4</span></pre></td></tr></table></figure><p>其它比如  <code>Char</code>  类型，sizeof=2，Marshal.SizeOf=1</p><p>以前还没注意到，这里需要注意下。</p><h2 id="可空类型泛型模板需要返回-null-值问题"><a class="anchor" href="#可空类型泛型模板需要返回-null-值问题">#</a> 可空类型泛型模板需要返回 Null 值问题</h2><p>在扩展枚举之后，又有一个新的需求：因为 ImageSharp 中的自动检测设置采用的可空类型，若类型为空则自动检测。</p><p>为了顺应同样的规则，Wrap 设置我也一样定义为了可空类型</p><p>然后我有一个函数，可以将下标转枚举，第一位是后期加上的一个字符串名字『自动』，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_2137b911f5a7d60bdeb9c66a43c9851e_r.png" alt="" /></p><p>这个『自动』并非枚举中的值，当使用者选择『自动』时，我会将对应枚举变量设置为空 —— 因此就有了一个问题：可空类型的模板方法，如何返回空值？</p><p>直接  <code>return null</code>  会报错并提示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_ae323d03b08e0f2c2a61e9553a364efc_r.png" alt="" /></p><p>解决方式很简单 (虽然花了点时间)</p><p>顺应可空了类型本身的实现原理去分析了下：我们都知道可空类型本身是  <code>Nullable</code>  的二次封装，那么是否可以返回  <code>Nullable</code>  类型以解决这个问题？</p><p>如果想要  <code>return new Nullable&lt;T&gt;()</code> ，泛型约束必须加上  <code>struct</code> ，如下所示：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">IndexToEnumNullable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAddFirstName <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> addFirstName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span><span class="token punctuation">,</span> <span class="token class-name">Enum</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">CacheData</span> data <span class="token operator">=</span> <span class="token function">GetCacheNames</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> isAddFirstName<span class="token punctuation">,</span> addFirstName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Names<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Nullable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试了下，外部接收者可空类型枚举确实变成  <code>null</code>  了</p><p>然后我又试了下，其实加上  <code>struct</code>  的泛型约束后，直接返回  <code>null</code>  也是可以的。</p><h1 id="最后"><a class="anchor" href="#最后">#</a> 最后</h1><p>现在是 2023 年 1 月 21 日，春节的前一天，除夕。这两天断断续续把最后的多线程批量处理功能加上去了，第一版暂且就这样了：</p><p><img data-src="/blogimages/2023/2023-01-21/Snipaste_2023-01-21_19-51-37.jpg" alt="" /></p><p>对比了一下起初自己提到的各个需求，除了偏移功能，应该也都完成了：</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true" /><label for="cbx_0"> 批量处理图片</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true" /><label for="cbx_1"> 直接缩放图片，完全将旧图缩放至新分辨率，不拉伸，不足处使用透明度填充</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true" /><label for="cbx_2"> 基于宽度或高度缩放图片，不足处裁剪</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true" /><label for="cbx_3"> 基于图片当前分辨率，缩放至最接近的 2N 次方分辨率，可选是否将宽高缩放至一致，不足以透明度填充</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true" /><label for="cbx_4"> 可以设定 X、Y 偏移量，丢弃偏移量之前的像素</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked="true" disabled="true" /><label for="cbx_5"> 可以直接选择最终存储格式，使其可以当做一个格式转换器使用</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" checked="true" disabled="true" /><label for="cbx_6"> 可以事先预览各个选项造成的结果</label></li></ul><p>另外批量处理图片采用多线程处理 —— 同时开启处理量取决于 CPU 核心数目，以后也会会加个自定义数量？</p><hr /><p>在开始弄之前，可没想到会花这么长时间 —— 其实大多数时间都花在搞 UI 上去了... 做实际处理逻辑的功能虽然也花时间，但相比下来就不算什么了。</p><p>今年也没回家，今天已经是除夕了，先把功能收尾了。暂且这样吧，后边自己试用过后再看有没有想完善的再完善下。</p><p>最后，项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvQmF0Y2hUZXh0dXJlTW9kaWZpZXIuZ2l0">GitHub</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;想做这个的原因有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unity 的各项压缩格式，除 RGB 不压缩及 ASTC，基本都只支持 POT 分辨率的图，但是美术给的图相当不</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://wangjiaying.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>使用WPF开发时问题记录</title>
    <link href="https://wangjiaying.top/2023/01/21/%E4%BD%BF%E7%94%A8WPF%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangjiaying.top/2023/01/21/%E4%BD%BF%E7%94%A8WPF%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-21T11:37:04.000Z</published>
    <updated>2023-01-22T03:54:34.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>之前本来是跟 开发一个批量图片处理工具 写一块的，用于记录使用 WPF 开发那个工具时，过程中碰到的各种问题，后来发现越记录越多，还是新开一个文档记录了。</p><h1 id="问题记录"><a class="anchor" href="#问题记录">#</a> 问题记录</h1><p>说实话，UI 问题反而是最多的</p><h2 id="枚举文件"><a class="anchor" href="#枚举文件">#</a> 枚举文件</h2><p>使用  <code>Directory.EnumerateFiles</code>  比  <code>Directory.GetFiles</code>  更好，包括内存及可开始处理的时间，因为前者通过迭代器返回，后者必须一次性全部搜集完成才能返回值。</p><p>例如目录下有 1000 个文件，我们实际上只需要取其中一个，枚举的方式就可以在取得之后直接返回，避免多余的消耗。</p><p>更多测试结果见：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL1RpcHMvNTI5ODQzOS9CYXRjaC1Qcm9jZXNzaW5nLXdpdGgtRGlyZWN0b3J5LUVudW1lcmF0ZUZpbGVz">Batch-Processing-with-Directory-EnumerateFiles</span></p><p>需要注意的是使用  <code>SearchOption</code>  会导致把无权限的文件也取出来，因此最好是配合  <code>EnumerationOptions</code>  使用。</p><h2 id="searchpattern-不支持多个匹配"><a class="anchor" href="#searchpattern-不支持多个匹配">#</a> searchPattern 不支持多个匹配</h2><p>由于图片格式是多样的，第一次碰到需要过滤多个后缀文件的情况，正常情况下  <code>*.jpg</code>  这种就行了。</p><p>以前一直以为可以用： <code>*.jpg||*.png</code> —— 实际上并不支持这种功能，要真传入这种格式直接就抛异常了，网上竟然还有说可以用这种方式的文章，不清楚怎么回事。</p><p>需要自己实现，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pattern <span class="token keyword">in</span> Filter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> Directory<span class="token punctuation">.</span><span class="token function">EnumerateFiles</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> item<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="wpf-netcore-如何调取打开目录界面"><a class="anchor" href="#wpf-netcore-如何调取打开目录界面">#</a> WPF .NetCore 如何调取打开目录界面？</h2><p>见 <a href="https://blog.csdn.net/weixin_39305029/article/details/111877602">.net core 3.1 WPF 使用 FolderBrowserDialog 对象打开文件资源管理器选择文件夹<br /></a><br />项目增加  <code>&lt;UseWindowsForms&gt;true&lt;/UseWindowsForms&gt;</code>  引用后，按照正常代码使用  <code>FolderBrowserDialog</code>  即可：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FolderBrowserDialog</span> folderDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FolderBrowserDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>folderDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    TexturesOriginPathText<span class="token punctuation">.</span>Text <span class="token operator">=</span> folderDialog<span class="token punctuation">.</span>SelectedPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打开文件则直接调用  <code>OpenFileDialog</code> ：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span> fileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>fileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    TexturesOriginPathText<span class="token punctuation">.</span>Text <span class="token operator">=</span> fileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="降低-tooltip-显示时间"><a class="anchor" href="#降低-tooltip-显示时间">#</a> 降低 ToolTip 显示时间</h2><p>在目标前添加  <code>ToolTipService.InitialShowDelay=&quot;0&quot;</code></p><p>且 ToolTip 可以支持多行：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label.ToolTip</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Label.ToolTip</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="普通组件也是可以添加事件的"><a class="anchor" href="#普通组件也是可以添加事件的">#</a> 普通组件也是可以添加事件的</h2><p>开始想将 Button 表现上设置成 Text 的样子，结果很麻烦，各种自定义样式。后来发现 Text 实际上就可以直接添加点击事件...</p><h2 id="窗口右上角按钮"><a class="anchor" href="#窗口右上角按钮">#</a> 窗口右上角按钮</h2><p>例如去掉最大化功能，在 Title 添加： <code>ResizeMode=&quot;CanMinimize&quot;</code></p><h2 id="限制只能输入数字"><a class="anchor" href="#限制只能输入数字">#</a> 限制只能输入数字</h2><p>TextBox 使用  <code>PreviewTextInput=&quot;OnPreviewTextInputLimitNumber</code>  事件：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPreviewTextInputLimitNumber</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">TextCompositionEventArgs</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>e<span class="token punctuation">.</span>Handled <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>不过这种方式只能限制英文键盘，对中文键盘就无效了... 只能说聊胜于无，这种简单的功能 WPF 都没提供吗？总感觉以前写界面的时候好像也用过，难道记错了。</p><hr /><p>最后在做输入改变时，在对应事件给代码的长宽赋值时，发现其实直接在  <code>TextChanged</code>  事件处理一次也行，例如不合法直接清空：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/// 检测 TextBox 输入是否是纯数字</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/// &lt;param name="text">&lt;/param></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CheckTextNumberInput</span><span class="token punctuation">(</span><span class="token class-name">TextBox</span> text<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>ScaleHeight<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token keyword">out</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请输入数字！"</span><span class="token punctuation">,</span> <span class="token string">"输入不合法"</span><span class="token punctuation">,</span> MessageBoxButton<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxImage<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        ScaleHeight<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>注：期间还发现有个  <code>InputScope=&quot;Number&quot;</code>  的属性，然而其实完全没什么用，不是限制输入内容的。</p><h2 id="检测目录权限"><a class="anchor" href="#检测目录权限">#</a> 检测目录权限</h2><p>.NetCore 可以通过如下方式调用  <code>GetAccessControl</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>AccessControl<span class="token punctuation">.</span>DirectorySecurity</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>folderDialog<span class="token punctuation">.</span>SelectedPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAccessControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>主要是因为  <code>Directory.EnumerateFiles</code>  枚举文件时，会把无权限的隐藏文件也给枚举出来，结果这个安全检测也不好用，改成  <code>EnumerationOptions</code>  去取文件了。</p><h2 id="bitmapimage-不支持重复利用"><a class="anchor" href="#bitmapimage-不支持重复利用">#</a> BitmapImage 不支持重复利用</h2><p>只能初始化一次，调用已添加过图片的  <code>BeginInit</code>  会直接抛出异常，也就是每次显示图片都必须重新创建一个对象。</p><p>同时  <code>BitmapImage.StreamSource</code>  对象被释放也会导致  <code>Image</code>  显示不出来。</p><h2 id="ui特性问题多"><a class="anchor" href="#ui特性问题多">#</a> UI 特性问题多</h2><p>问题真的很多，简单使用还行，要实现复杂的 UI 效果，<s>查半天都没个能用的...</s></p><p>比如数据绑定，我想把一个 TextBox 组件与类中的一个变量绑定起来，使得修改 TextBox 值对应相当于修改变量 —— 我 Unity 直接写，<s>这都是些啥跟啥，查出来的使用方式也都是要么过时、要么根本不能用的 (虽然也可能跟我版本是 WPF .NetCore 有关)。</s></p><p>感觉可能需要把流程先学习下，直接上手撸，做简单功能还行，想做点高级的特性就力不从心了。</p><p><s>下次要么就把这东西学习流程走一遍再说，要么用 WinForm，做点小东西 WPF 感觉比不上 WinForm 效率好。记得当年用 WinForm 写 Demo 速度刷刷的。</s></p><hr /><h2 id="与代码双向数据绑定"><a class="anchor" href="#与代码双向数据绑定">#</a> 与代码双向数据绑定</h2><p>昨晚回家看了下系统教程，数据与自定义类中的字段做双向 <code>数据绑定</code> 其实很简单，而且还直接支持  <code>TextBox</code>  与  <code>数值</code>  绑定，绑定后虽然不会做输入检测，不过不合法会直接在输入框外显示  <code>红框</code></p><ol><li>首先为  <code>DataContext</code>  赋值</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>DataContext <span class="token operator">=</span> _helper<span class="token punctuation">.</span>ConvertData<span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="2"><li>在  <code>ConvertData</code>  实现  <code>System.ComponentModel.INotifyPropertyChanged</code>  接口：</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TestWidth</pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            <span class="token keyword">get</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token keyword">return</span> Width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">set</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                Width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                PropertyChanged<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">"TestWidth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">event</span> <span class="token return-type class-name">PropertyChangedEventHandler<span class="token punctuation">?</span></span> INotifyPropertyChanged<span class="token punctuation">.</span>PropertyChanged</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">add</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                PropertyChanged <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">remove</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                PropertyChanged <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol start="3"><li>Xaml 处直接绑定</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ScaleWidth<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding TestWidth&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>  <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">PreviewTextInput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OnPreviewTextInputLimitNumber<span class="token punctuation">"</span></span> <span class="token attr-name">InputScope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Number<span class="token punctuation">"</span></span> <span class="token attr-name">TextChanged</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ScaleWidth_TextChanged<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr></table></figure><p>感觉还是挺好用的，了解了方法后，像之前通过主动的事件绑定实现的方式，就可以直接改成数据绑定 + 通知的模式了，而且感觉确实方便不少。<br />于是简单重构了一波代码，分离成  <code>数据+Controller+界面</code>  这种形式。</p><h2 id="格式化绑定"><a class="anchor" href="#格式化绑定">#</a> 格式化绑定</h2><p>TextBox  <code>Text</code>  使用  <code>StringFormat</code> <br />Label  <code>Content</code>  使用  <code>ContentStringFormat</code></p><p>多数据源绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MultiBinding</span> <span class="token attr-name">StringFormat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#125;啦啦啦&#123;0&#125;x啦啦啦&#123;1&#125;啦啦啦&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Width<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Height<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MultiBinding</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>但是默认提供的只支持 TextBox，其它的类型得实现  <code>IMultiValueConverter</code>  来做。</p><p>步骤如下：</p><ol><li>定义一个实现了  <code>IMultiValueConverter</code>  接口的类:</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/// 支持非 Text 的多数据源绑定</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiContentConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiValueConverter</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token return-type class-name"><span class="token keyword">object</span></span> IMultiValueConverter<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">try</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">return</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token return-type class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> IMultiValueConverter<span class="token punctuation">.</span><span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> targetTypes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol start="2"><li>在  <code>MainWindow.xaml</code>  顶部定义  <code>Window.Resources</code> :</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>MultiContentConverter</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MultiContentConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ol start="3"><li>通过  <code>MultiBinding</code>  的  <code>Converter(转换器)</code>  及  <code>ConverterParameter(参数)</code>  指定：</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MultiBinding</span>  <span class="token attr-name">Converter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource MultiContentConverter&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">ConverterParameter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>啦啦啦&#123;0&#125;x啦啦啦&#123;1&#125;啦啦啦<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Width<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Height<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MultiBinding</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Label</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="与组件数据绑定"><a class="anchor" href="#与组件数据绑定">#</a> 与组件数据绑定</h2><p>与父节点绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre>Width="&#123;Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=DockPanel&#125;, Path=ActualWidth&#125;"</pre></td></tr></table></figure><p>与指定 Name 的节点绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre>Width="&#123;Binding ElementName=ScaleWidth,Path=ActualWidth&#125;</pre></td></tr></table></figure><h2 id="数据绑定中进行计算"><a class="anchor" href="#数据绑定中进行计算">#</a> 数据绑定中进行计算</h2><p>这个需要用到一个插件： <code>CalcBinding</code></p><p>直接  <code>NuGet</code>  搜索就有了，有了这个就可以直接在绑定中进行计算，方便了很多。</p><p>下载后，在  <code>MainWindow.xaml</code>  最前面加上  <code>xmlns:c=&quot;clr-namespace:CalcBinding;assembly=CalcBinding&quot;</code> ，然后就可以使用  <code>c:Binding</code>  进行计算了。</p><p>例如上面组件绑定方法，如果想取自身宽度为父容器的一半，就可以这样写：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GroupBox</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>原图<span class="token punctuation">"</span></span>  <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;c:Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=DockPanel&#125;, Path=ActualWidth/2-10&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,5,5,5<span class="token punctuation">"</span></span> <span class="token attr-name">BorderThickness</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1,1,1,1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></pre></td></tr></table></figure><p>另外它还支持直接  <code>Bool</code>  变量转  <code>Visibility</code> ，例如我这有个需求是：CheckBox 勾选后隐藏另外一个组件，否则显示，就可以这样实现：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StayInputFormatToggle<span class="token punctuation">"</span></span> <span class="token attr-name">IsChecked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保留原格式<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span> <span class="token attr-name">ToolTipService.InitialShowDelay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ToolTip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在处理完毕后，保存的图片与输入格式保持一致。例如修改前是 *.png，修改后也是 *.png。<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComboBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OutputFormatComboBox<span class="token punctuation">"</span></span> <span class="token attr-name">Visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;c:Binding ElementName=StayInputFormatToggle,Path=!IsChecked,FalseToVisibility=Collapsed&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0,0,0<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr></table></figure><p>更多操作可以看这篇文章，写得挺不错的：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxpbmRleGkuY29tL3Bvc3QvV1BGLSVFNSU5QyVBOCVFNyVCQiU5MSVFNSVBRSU5QSVFOCVBMSVBOCVFOCVCRSVCRSVFNSVCQyU4RiVFNiVCNyVCQiVFNSU4QSVBMCVFOCVBRSVBMSVFNyVBRSU5Ny5odG1s">在绑定表达式添加计算</span></p><h2 id="激活最小化后的窗口"><a class="anchor" href="#激活最小化后的窗口">#</a> 激活最小化后的窗口</h2><p>我增加了一个新窗口用于显示『更大』的图片对比效果，这个新界面只有一个作用：左边显示原图、右边显示修改后的图。</p><p>然后有个需求就是：没有打开的情况下，直接创建新窗口打开，不过已经打开的情况下，点击按钮应该是将这个界面激活至最上层。</p><p>然后就发现正常情况下  <code>Window.Activate()</code>  可以正常激活，但要是窗口已经被最小化了，那么就不行。</p><p>查了下是 WindowState 参数问题，最简单是激活前先设置为  <code>WindowState= WindowState.Normal</code>  即可。</p><p>不过这样的话，如果之前是最大化状态，重新激活后就会还原。</p><p>要是想记录原先的状态，则可以通过注册  <code>Window.StateChanged</code>  简单这样做:</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>_imageCompareView<span class="token punctuation">.</span>StateChanged <span class="token operator">+=</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=></span> _imageCompareViewState <span class="token operator">=</span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> <span class="token class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WindowState <span class="token operator">==</span> <span class="token class-name">WindowState<span class="token punctuation">.</span>Minimized <span class="token punctuation">?</span></span> _imageCompareViewState <span class="token punctuation">:</span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> <span class="token class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WindowState<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="dockpanel-自动拉伸对齐方式"><a class="anchor" href="#dockpanel-自动拉伸对齐方式">#</a> DockPanel 自动拉伸对齐方式</h2><p>DockPanel 默认情况下的作用是：自动排版，最后一个元素会拉伸填满剩余空间</p><p><code>剩余空间</code>  的定义其实不止是顺序排版的情况，如果对元素设置过  <code>DockPanel.Dock</code> ，那么就以设置过的元素停靠为准，最后一个元素填满剩余空间。</p><p>如下所示：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DockPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">DockPanel.Dock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">DockPanel.Dock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DockPanel</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>如上所示，第三个  <code>StackPanel</code>  不设置  <code>DockPanel.Dock</code> ，并放在最后，那么就会直接填满中间区域。<br />(注：必须放在设置过  <code>DockPanel.Dock</code>  的最后)</p><p>上面也是我采用的方法，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_346cc0f1b5433465987b9175723976af_r.png" alt="" /></p><p>最后的  <code>关于</code>  说明靠下，设置靠上，中间对比元素则填满中间空隙。</p><h2 id="集合数据绑定"><a class="anchor" href="#集合数据绑定">#</a> 集合数据绑定</h2><p>列表类型的组件元素，不能直接绑定通用的  <code>List</code>  容器 —— 我就尝试了下，就发现当  <code>List</code>  发生变动时，绑定 UI 根本不会同时发生改变。</p><p>经过研究发现像  <code>ListBox、ListView、DataGrid</code>  这种容器类组件元素，绑定的数据源必须是 <code>可监听</code> 的，例如  <code>ObservableCollection</code>  才能正确接收集合改变时的通知。</p><h2 id="子窗口初始位置"><a class="anchor" href="#子窗口初始位置">#</a> 子窗口初始位置</h2><p>可以通过  <code>WindowStartupLocation</code>  进行控制</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">BatchProgressView</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BatchProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>view<span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>view<span class="token punctuation">.</span>WindowStartupLocation <span class="token operator">=</span> WindowStartupLocation<span class="token punctuation">.</span>CenterOwner<span class="token punctuation">;</span></pre></td></tr></table></figure><p>需要注意的是  <code>CenterOwner</code>  选项的情况下，必须设置  <code>Owner</code>  才有效，否则也是满屏乱飞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前本来是跟 开发一个批量图片处理工具 写一块的，用于记录使用 WPF 开发那个工具时，过程中碰到的各种问题，后来发现越记录越多，还是新开一个文档记录了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="问题记录" scheme="https://wangjiaying.top/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>关于Shoka图床又挂了这件事</title>
    <link href="https://wangjiaying.top/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://wangjiaying.top/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2023-01-01T11:09:08.000Z</published>
    <updated>2023-01-02T08:33:32.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。</p><p>目前的情况是，本地调试可以，但一旦发布，那边直接就阻止访问了 —— 本地右键 -&gt; 转到 直接取访问一样会被 403 阻止，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_19-17-32.jpg" alt="" /></p><p>不信点一点：<span class="exturl" data-url="aHR0cHM6Ly90dmEzLnNpbmFpbWcuY29tL2xhcmdlLzY4MzM5MzlibHkxZ2lwZXVpYms5ZmoyMHprMG04YXkyLmpwZw==">我也忘了这是哪张图了</span></p><p>估计被整了域名白名单之类的东西。</p><p>Shoka 随机图片的 API 使用的是 Gimhoy 提供的图床，实际上依赖于 Sina 的服务器，而且 —— 这个功能貌似是开发者自己开发的，听说是依赖于新浪微博的相册啥功能弄的，网上搜索了一下 —— 所以其实貌似根本没有『新浪图床』这么个东西，都是玩家自己整的。</p><p>而且早在 2019 年就有文章提到这个被屏蔽了，虽然不知道为啥前几天 (大概 2022 年 12 月 28 号左右) 才又挂掉 —— 反正等了几天之后，现在还是依然是挂掉的情况，满屏 403，没啥变正常的反应。</p><p>看着没办法了，想着恐怕只能放 GitPages 一块了。</p><p>还好 Shoka 是懒加载，理论上讲就算图片慢不至于影响网页本身加载速度。</p><h1 id="下载备份"><a class="anchor" href="#下载备份">#</a> 下载备份</h1><p>因为目前本地还是可以访问『新浪图床』的，这个可能也是官方留给目前白嫖图床的各位一个备份图片的机会 —— 也会后面啥时候没准也会屏蔽这个接口。</p><p>所以趁本地还能拉图片，就想着把那批图片先拉下来。</p><p>一开始想着用 js 下载，搞了半天没整好... 后边想着不如用 C# 写个小工具，顶多可能需要在请求头模仿一下  <code>http://localhost</code>  的情况。</p><p>然后试了下其实没那么麻烦 —— 随便一个本地的申请接口就是可以下载的，都不需要改什么请求头，于是简单利用  <code>HttpClient</code>  直接在 Unity 里边写了个下载代码，通过读取  <code>images.yml</code>  把里面配置的所有图片都下载下来：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">HttpClient</span> HttpRequest</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DownloadTextures/Download"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"D:\MyOthers\JavaScripts\WebSite1\HexoBlog\Hexo\source\_data\images.yml"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 大图</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 小图</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"mw690"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"../Downloads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> localPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resPath<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 下载</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> nameList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"请求下载："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">await</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token function">GetUrl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> localPath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> HttpRequest<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsByteArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> downPicPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>downPicPath<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==>OK："</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUrl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"https://tva"</span> <span class="token operator">+</span> randomServer <span class="token operator">+</span> <span class="token string">".sinaimg.cn/"</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token char">'/'</span> <span class="token operator">+</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> randomServer</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token keyword">return</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这些图片前几天刚失效就下载下来了，等了两天，没看到其它谁修复的 —— 网上其它使用 Shoka 主题的基本都还是满屏 403，唯一看到一个正常的还是使用的自己的 CDN。</p><p>毕竟是微博直接屏蔽了接口，觉得这次可能是真挂了。</p><h1 id="裁剪与压缩"><a class="anchor" href="#裁剪与压缩">#</a> 裁剪与压缩</h1><p>没办法，少了这些随机的背景图，就觉得缺了不少东西，加上现在感觉 GitPages 速度也还算可以，所以决定先直接放 GitPages 算了。</p><p>不过，毕竟图片不是使用 CDN 了，能减少一点最好就减少一点，免得真卡网的时候半天都在加载，也是糟糕的体验。</p><p>于是研究了下如何把这一堆图的大小尽量减少。</p><h2 id="分辨率分析"><a class="anchor" href="#分辨率分析">#</a> 分辨率分析</h2><p>目前页面上的 cover —— 即每个文章的图片分辨率通过审查元素查出来大约是  <code>643x224</code> ，实际上从新浪图床下载下来的图片，mw690 大小的至少也有  <code>690x400</code> 。</p><p>所以我们看到的图，实际能显示出来都是被『截取』过一半的，大约就只显示中间部分。</p><p>如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_20-08-44.jpg" alt="" /></p><p>所以在分辨率这一块，应该是可以手动截取，减少原图大小的。</p><p>由于涉及到图片操作，我选择直接在 Unity 里面搞，毕竟这边有完整的操作接口，以前也有用过。</p><p>同时，有部分图片如果显示上半部分效果比较好，有的图片则显示中间部分比较好：虽然目前没有作处理的情况下，都是显示的中间部分，不过既然都做处理了，为何不手动调整一下？</p><p>于是简单写了两个接口：一个接取图片上半部分、一个截取图片中间部分。</p><p>当然最终实际分辨率都会是： <code>643x224</code> <br /><font color=red>注：其实不一定得要这种分辨率，审查元素查出来的分辨率其实也会跟随页面大小发生变化，只要这种比例就行了，网页显示时，宽度或高度任一不足都会被放大显示</font></p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesTop"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 截取以上半部分为准</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesCenter"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 截取以中间部分为准</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> isCenter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> width <span class="token operator">=</span> <span class="token number">643</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> height <span class="token operator">=</span> <span class="token number">224</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> offsetHight <span class="token operator">=</span> isCenter <span class="token punctuation">?</span> height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFolderPanel</span><span class="token punctuation">(</span><span class="token string">"选择一个待处理文件夹"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"*.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token class-name">Texture2D</span> texOrigin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token class-name">Texture2D</span> texResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"_CutResult_CenterPixel_"</span> <span class="token operator">+</span> isCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> texPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> texNum <span class="token operator">=</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> texNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        texPath <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"处理中："</span> <span class="token operator">+</span> texPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>texNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        texOrigin<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">SetPixels</span><span class="token punctuation">(</span>texOrigin<span class="token punctuation">.</span><span class="token function">GetPixels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isCenter <span class="token punctuation">?</span> texOrigin<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> texOrigin<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> offsetHight<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        bytes <span class="token operator">=</span> texResult<span class="token punctuation">.</span><span class="token function">EncodeToJPG</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>毕竟只是临时随便用用，能用就行了，就没有花时间去处理可能的异常了。</p><p>另外，重新导出的 jpg 质量我选择了 95%，要是超过这个数，体积会增加不少，特别是 100% 质量的情况下，比不截取的图也小不了多少了。</p><p>导出然后挑挑拣拣把合适的放一块合并起来，就形成最后的结果了。</p><h2 id="转化-webp"><a class="anchor" href="#转化-webp">#</a> 转化 WebP</h2><p>jpg 转为 WebP 之后，大小确实还可以进一步压缩，于是找了相关工具：竟然很少有离线软件。</p><p>基本都是在线的工具。</p><p>最后在这找到一个：<span class="exturl" data-url="aHR0cDovL3d3dy53aW53aW43LmNvbS9zb2Z0LzM2NzYzLmh0bWwjeGlhemFp">Webp 转换工具绿色版</span></p><h2 id="删除与图片随机算法修改"><a class="anchor" href="#删除与图片随机算法修改">#</a> 删除与图片随机算法修改</h2><p>因为没了图床加速，考虑了下还是决定把一部分删掉。</p><p>然后就有了一个新的问题：随机图片实际上也是在我们图片列表中随机，列表中图片减少，就意味着在同一个页面之中，出现同一张重复图片的概率会变得更高！</p><p>为了解决这个问题，我在主题随机代码上又进行了修改，以避免同一张图片随机在同一个页面。</p><p>具体随机方法在  <code>engine.js</code>  中的  <code>_cover</code>  里边，稍微修改了一下，做了个简单的缓存：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> cacheList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_cover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> statics<span class="token punctuation">,</span> js<span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>photos<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">let</span> bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 总图片数量大于 10，并且是文章图片才判断是否重复，num>1 表示页面头部图片吧，那个就不用处理了</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token keyword">undefined</span><span class="token operator">||</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 图片列表走过最低页数随机后，也就是基本上全部走过一轮才允许重复随机</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">let</span> maxCheckNum<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Math.min(30,image_list.length);</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span>length<span class="token operator">>=</span>maxCheckNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        cacheList<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">while</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      cacheList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> bg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>本来只是想试一下，没想到定义在方法块外边的缓存变量真有效，那就这样了。</p><h2 id="模糊"><a class="anchor" href="#模糊">#</a> 模糊</h2><p>一通压缩操作下来，感觉图片质量就不大行了... 加点模糊效果吧，CSS 还挺简单的，例如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#header</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">#imgs</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>1.5px<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>压缩处理步骤：</p><ol><li>降低分辨率，图片实际大小与实际使用分辨率保持一致，避免无谓浪费</li><li>降低部分质量，例如截取后存储质量我选择  <code>95%</code></li><li>WebP 化</li><li>利用 <span class="exturl" data-url="aHR0cHM6Ly90aW55cG5nLmNvbQ==">TinyPng</span> 再压一遍 (注：最后实测发现转 WebP 时压缩率高了实际上 TinyPng 也压不动了)</li><li>质量不行就用模糊什么的挡一下</li></ol><p>总之，就是在尽量『能看』的情况下，减少传输数据量，毕竟 GitPages 的速度... 谁知道什么时候快慢呢...</p><p>这么就几个步骤下来，基本上可以减少到极致了 (也许还有其它再减少大小的处理方式？如果有知道的务必留言提醒！)</p><p>今天是 <s>2023 年 1 月 1 日</s> 2023 年 1 月 2 日，我竟然在研究如何优化博客... 图片怎么处理...😥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。&lt;/p&gt;
&lt;p&gt;目前的</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://wangjiaying.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Mesh渲染优化与批处理</title>
    <link href="https://wangjiaying.top/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/"/>
    <id>https://wangjiaying.top/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/</id>
    <published>2022-12-30T10:19:07.000Z</published>
    <updated>2023-01-01T04:25:38.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。</p><p>理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一下，方向感觉就变成 合批、优化 这块去了，于是本篇文章直接就先整理一下这一块。</p><p>首先，我们都知道由于 CPU 和 GPU 是两个不同的执行对象，所以一般问题都出在两者『数据交换』，由于 GPU 并行结构设计，通常情况都是 GPU 等待 CPU，而 CPU 干事情得一件件做，渲染一个对象就要先把一个对象的属性 (切换材质、切换贴图、设置材质属性等) 准备好，然后通知 GPU 渲染该对象，这中间通常就存在空挡。</p><p>CPU 准备数据越多，最终渲染一帧消耗时间就越长 —— 所以优化的时候，通常提到了减少 DrawCall ，也就是 CPU 去通知 GPU 渲染一个对象前这块的『准备消耗』，DrawCall 命令本身消耗不能算很高，高的是在这之前的一系列准备操作。所以说是『优化 DrawCall』这个也不决对，但是通常减少 DrawCall 确实是最明显的优化。</p><p>其它例如减少带宽、减少中间切换次数、减少向 GPU 上载数据理论上应该都可以算作减少『渲染』消耗这一块的优化 (应该)。</p><h2 id="unity-drawcall"><a class="anchor" href="#unity-drawcall">#</a> Unity DrawCall</h2><p>在 Unity 中，可以主要关注两个数据：</p><ul><li>SetPass Call<ul><li>在我们 Sahder 中可能会存在有多个 Pass，例如阴影就是单独一个 Pass 处理</li></ul></li><li>Batches<ul><li>提交一次数据并执行绘制</li></ul></li></ul><p>在 Unity 中 Batches 可以看做实际的 DrawCall。</p><p>为什么一般优化 DrawCall 是提升效率的手段？</p><p>因为上述工作原理，CPU 和 GPU 处于两个不同的硬件结构，两个硬件的数据交换是存在等待机制的，两者频繁数据交换就会导致要么你等我，要么我等你这种情况，浪费大量效率。</p><p>例如有 100 个对象需要绘制，分别每提交一个对象的材质、模型等数据就发起一次调用，就有 100 次通知 GPU 渲染的调用。<br />将 100 个对象属性一次性设置，然后统一提交再申请绘制，就只需要一次。</p><p>效率就上来了 —— 当然也会带来一些其它问题，例如剔除精度降低。</p><p>Unity 会将一些可以合并渲染命令合成一个 『Batches』， SetPass Call 可以看做渲染状态改变次数 (不同材质导致必须的渲染切换数量)，在 Unity 中 Batches 可以看做实际的 DrawCall—— 减少 Batches 不一定减少 SetPass Call，不过一般减少 SetPass Call 的都伴随着 Batches 减少。</p><h2 id="实际操作"><a class="anchor" href="#实际操作">#</a> 实际操作</h2><p>因此在实际中，一般渲染优化追求的是在 GPU 工作能力内，尽可能一次性让其绘制。</p><p>体现出来就叫做 『批处理』。</p><p>在 Unity 中，目前引擎存在的批处理通常有  <code>动态</code> 、 <code>静态</code> 、 <code>GPU Instancing</code> 、 <code>SRP Batcher</code> ，其它的例如 UGUI 也有特有的合批规则。</p><p>由于合批操作通常都有指定限制，因此平时也得注意避免出现合批中断情况。</p><p>例如，像是一些单个物体材质属性操作，就可能导致合批中断：</p><ul><li>renderer.material：调用时会创建并返回一个新的材质 (不推荐)。</li><li>renderer.sharedMaterial：材质引用，修改的话所有引用该材质对象都会受到改变。</li></ul><h3 id="materialpropertyblock"><a class="anchor" href="#materialpropertyblock">#</a> MaterialPropertyBlock</h3><p>为解决 sharedMaterial 的缺点，Unity 提供了 MaterialPropertyBlock。</p><p>这个东西可以做到跟 sharedMaterial 一样不创建成新材质对象的情况下，单独修改某个对象材质属性 (而不影响其它同材质对象)。</p><p>使用方式也很简单，直接可以在 MaterialPropertyBlock 设置与材质上同样的变量与值，然后赋值给材质。</p><p>简单使用代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MeshRenderer</span> renderrender <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">MaterialPropertyBlock</span> mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>官方称内置地形系统的树，渲染方式就是这样的，通过这种方式修改每棵树的材质属性，产生不同的颜色、缩放和风力系数等。</p><p><font color=red>注：MaterialPropertyBlock 与 URP 的 SRP Batcher 会有冲突，URP 就不要用了。</font></p><h4 id="不再受到材质属性修改影响"><a class="anchor" href="#不再受到材质属性修改影响">#</a> 不再受到材质属性修改影响</h4><p>通过这种方式设置材质参数后，将不再受到材质本身属性修改的影响，如图：</p><p><img data-src="/blogimages/2022/2022-12-30/m_bf8cd0c6fb721f2ea29f53d5fdaddfed_r.png" alt="" /></p><p>材质本身的值将始终被 MaterialPropertyBlock 属性覆盖，此时再去修改材质，材质属性的改变不再影响这个对象了。</p><h4 id="合批被打断"><a class="anchor" href="#合批被打断">#</a> 合批被打断</h4><p>经过测试，通过 MaterialPropertyBlock 设置材质属性虽然不会导致创建新的材质实例，但是却会打断合批：</p><p><img data-src="/blogimages/2022/2022-12-30/m_c84f4c09265700b27e66a030d5110323_r.png" alt="" /></p><p>经过测试，无论动态合批、静态合批，都会被打断。<br /><font color=red>注：除非设置的是同一个颜色，倒是依然能够合批</font></p><p>例如，上述是 3 个 Cube，静态合批被打断情况：设置前 -&gt; 设置后</p><p>SetPass Call 及 Batches 都增加了两个：说明 MaterialPropertyBlock 参数不同的话，依然会造成渲染状态改变。</p><h4 id="materialpropertyblock-只是一个参数携带者"><a class="anchor" href="#materialpropertyblock-只是一个参数携带者">#</a> MaterialPropertyBlock 只是一个参数携带者</h4><p>使用如下代码，仅使用一个 MaterialPropertyBlock 对象</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Renderer</span> render <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponentInChildren</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mpb <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> _color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以成功『分别』设置各个对象的『不同』颜色属性，而 MaterialPropertyBlock 是一个类，说明在调用 SetPropertyBlock 底层会生成一份当前类的临时参数数据，并覆盖掉材质上的本来设置。</p><h3 id="gpu-instancing"><a class="anchor" href="#gpu-instancing">#</a> GPU Instancing</h3><p>上述采用 MaterialPropertyBlock 修改材质属性后，会打断 静态 / 动态 合批功能。</p><p>如果想进一步优化，可以采用 GPU Instancing 技术。</p><p>GPU Instancing 也有限制：</p><ul><li>只能用于 Mesh</li><li>同一个 Mesh 才能一次性绘制</li></ul><p>需要注意的是：虽然 StandardShader 有勾选 Enable GPU Instancing 选项，勾选之后也能用，但是却没法跟 MaterialPropertyBlock 配合 —— 实测设置 MaterialPropertyBlock 后 GPU Instancing 依然都会被打断。</p><p>自定义 Shader ：</p><ol><li>增加： <code>#pragma multi_compile_instancing</code>  预定义后，材质面板会出现对应的  <code>Enable GPU Instancing</code>  选项</li><li>顶点数据接收结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>顶点转片段  <code>v2f</code>  结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>使用  <code>UNITY_INSTANCING_BUFFER_START</code>  定义可以进行修改的参数，例如我们修改颜色：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>float4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="5"><li>顶点处理函数中，在正常计算之前执行 Unity 提供的预定义：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_TRANSFER_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 正常必须的顶点转换处理</span></pre></td></tr><tr><td data-num="5"></td><td><pre>o<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="6"><li>片段函数中，执行设置，然后获取</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Unity 提供的预定义函数，对该对象进行设置</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 从列表中获取该对象应当设置的属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fixed4 color <span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">return</span> color<span class="token punctuation">;</span></pre></td></tr></table></figure><p>该项对于『纯自定义 (Unlit Shader)』Shader 可能会繁琐一点，但  <code>SurfaceShader</code>  就简单些了，因为逻辑类似，这里直接上完整的  <code>SurfaceShader</code> ，也好可以做个对比：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>Shader <span class="token string">"Custom/GPUInstancingSurfaceShader"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Properties</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Tags <span class="token punctuation">&#123;</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        LOD <span class="token number">200</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        CGPROGRAM</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// Physically based Standard lighting model, and enable shadows on all light types</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">surface surf Standard fullforwardshadows</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// Use shader model 3.0 target, to get nicer looking lighting</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">target <span class="token number">3.0</span></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        sampler2D _MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">struct</span> <span class="token class-name">Input</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            float2 uv_MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        half _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        half _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">//fixed4 _Color;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// #pragma instancing_options assumeuniformscaling</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// put more per-instance properties here</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>fixed4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token comment">//UNITY_SETUP_INSTANCE_ID(IN);</span></pre></td></tr><tr><td data-num="44"></td><td><pre> fixed4 realColor<span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// Albedo comes from a texture tinted by color</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> realColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token comment">// Metallic and smoothness come from slider variables</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ENDCG</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    FallBack <span class="token string">"Diffuse"</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里 SurfaceShader 只需要两个步骤：</p><ol><li>将对应需要修改的属性值定义到使用 UNITY_DEFINE_INSTANCED_PROP 定义在对应预定义块中，这点与 UnlitShader 一样</li><li>在片段着色方法中 通过 UNITY_ACCESS_INSTANCED_PROP 取值</li></ol><p>就这么简单！其它的预定义 SurfaceShader 都已经帮忙处理好了。</p><p>效果：</p><p><img data-src="/blogimages/2022/2022-12-30/m_4a96aecd4cbe95fc91e76c956ca3e0b8_r.png" alt="" /></p><p>Instancing 中三个不同颜色的 Cube 只占用了一个 DrawCall</p><h4 id="问题为什么-standarsahder-设置颜色后会破坏合批"><a class="anchor" href="#问题为什么-standarsahder-设置颜色后会破坏合批">#</a> 问题：为什么 StandarSahder 设置颜色后会破坏合批？</h4><p>原因是：</p><blockquote><p>Unity’s Standard and StandardSpecular shaders have instancing support by default, but with no per-instance properties other than the transform.</p></blockquote><p>即 —— 虽然它支持 GPU Instancing，但实际上除了变换之外之外的属性都没有写入实例化处理。所以如果想支持其它属性的变化，需要自定义 Shader 才行。</p><p><font color=red>注 1：GPU Instancing 优先级在 SRPBatcher 及 静态合批 之后。</font><br /><font color=red>注 2：缩放为负也会打断 GPU Instancing 合批。</font><br /><font color=red>注 3：常量缓冲区不同设备可能大小不一样，因此一次性绘制也有上限。</font><br /><font color=red>注 4：GPU Instancing 只支持一个平行光，多放一个点光源就会导致多渲染 3 次 (每个对象分别一次)。(以上述  <code>SurfaceShadaer</code>  测试)</font><br /><img data-src="/blogimages/2022/2022-12-30/m_71c1a43f78bed26b6972397ca7dabe28_r.png" alt="" /><br />3 个 Cube、两个点光源：总共 7 个 DrawCall，3 个合批一次，然后分别渲染 2 次</p><h3 id="扩展"><a class="anchor" href="#扩展">#</a> 扩展</h3><p>GPU Instancing 只支持同一个模型，不支持带动画 SkinMeshRender，那么是否可以配合 GPU 动画 实现大批量动画模型绘制？</p><p>感觉理论上是可行的，后面再试试看。</p><h3 id="srpbatcher"><a class="anchor" href="#srpbatcher">#</a> SRPBatcher</h3><p>在 SRP 中，Unity 又提供了一种新的合批方式：SRPBatcher</p><p>这种方式的原理与 GPU Instancing 类似，都是需要在 Shader 中先定义受影响的属性值，Unity 渲染时先将这些值放进 GPU 的缓冲区，对象渲染时直接去取。但是它支持不同的材质和模型 —— 只要变体一致就行了。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>批处理顺序：静态合批 -&gt;SRPBatcher-&gt;GPU Instancing-&gt; 动态合批</p><p>静态合批优先级最高，相当于会与其它合批有冲突。<br />例如：个人测试中，GPU Instancing 和 静态合批 会有冲突，静态合批后使用 MaterialPropertyBlock  修改依然不会进入 GPU Instancing，也就是说 —— 直接勾选静态又去修改了材质参数反而降低效率。</p><p>前三者更有效，至于动态合批由于限制过多，而且本身就是 CPU 换 CPU，因此感觉也不用过多追求。像最新 HDRP 都去掉了动态合批功能 (当然 URP 还是有保留着的)。</p><p>参考文档：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0RyYXdDYWxsQmF0Y2hpbmcuaHRtbA==">DrawCallBatching</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9uamEtdHV0b3JpYWxzLmNvbS9wb3N0LzA0OC1tYXRlcmlhbC1wcm9wZXJ0eS1ibG9ja3M=">material-property-blocks</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0dQVUluc3RhbmNpbmcuaHRtbA==">GPUInstancing</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。&lt;/p&gt;
&lt;p&gt;理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/categories/Unity3D/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>新冠感染记录</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-28T13:02:46.000Z</published>
    <updated>2023-04-16T10:01:08.413Z</updated>
    
    <content type="html"><![CDATA[<ol><li>第一天 (2022 年 12 月 19 日 周一)：<br />咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。</li><li>第二天 (2022 年 12 月 20 日 周二)：<br />办公室咳嗽声感觉更多了，也比较想喝水 —— 吃饭时也是暴露的情况。晚餐直接带回家吃的，不过感觉胃口相对没那么好了，回家后还感觉喉咙有点不舒，不过还没有更明显的症状。心跳较快。</li><li>第三天 (2022 年 12 月 21 日 周三)：<br />早上起来感觉喉咙症状比较明显，8 点去医院做了一次核酸，由于有工作没处理完还是去上班了，中午把盒饭拿到走廊上出去吃的，下午开始感觉头晕，脑袋胀痛。晚餐带回家吃 —— 简单吃了一点，几乎没有胃口了。晚上早早上传睡觉，感觉很煎熬，发冷、发昏，开着空调都冷。心跳极快。</li><li>第四天 (2022 年 12 月 22 日 周四)：<br />早上刚起来咽喉痛，头胀痛 (晃一下脑袋更加强烈)，身上酸痛，特别是右手臂举着都痛。所以请假了，同时昨天的核酸结果出来了：显示阴性。这么明显的症状不可能阴性，于是上午又去做了一次。整天状态都不大好。开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。心跳极快。</li><li>第五天 (2022 年 12 月 23 日 周五)：<br />早上刚起来咽喉痛，头胀痛，身上酸痛。相比昨天稍微好一点，还是难受。而且照镜子感觉脸色蜡黄 —— 甚至让人怀疑是不是脏都出了问题，下午核酸结果出来显示阳性。开了空调，特别怕冷，稍微移动就起鸡皮疙瘩。没有胃口，中午强行简单吃了点炒菜心，感觉反胃。晚上喝了点稀饭粥。心跳极快。</li><li>第六天 (2022 年 12 月 24 日 周六)：<br />早上刚起来咽喉痛，头胀痛，脖子肩膀痛。偶尔嘴巴会混合血丝，鼻子感觉有堵塞，中午想睡觉躺下去也睡不着。状态相比昨天稍微好一点，还是难受。特别怕冷，开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。早上去买菜发现好又多超市看着都快倒闭了，卖的东西快清干净了。路口买了三根莴笋 —— 中午没胃口也没吃，喝了点稀饭粥。晚上煮了饭本来也没胃口的，但是感觉不好处理，还是炒了一根，吃了一半。晚上开始流清鼻涕了。心跳速度好了点，不过还是比较快。</li><li>第七天 (2022 年 12 月 25 日 周日)：<br />咽喉还是痛，早上醒来时特别明显，晚上特别厉害。鼻子也堵，早上鼻孔实在堵塞厉害，去 bilibili 找到了一个 mandell 的通鼻孔教程照着做，弄出了几坨浓血块和痰组成的东西。早上鼻涕转浓 —— 同时白天鼻孔也堵起来了，呼吸比较难。身体疼痛好些了，心跳速度也好了点。声音完全变了，之前喝水都是苦的，今天喝水不苦了，下午喝了不少水，但是胃那边感觉很不舒服，像有什么东西顶在里面。自从上午跑下去拿了快递后，就一直感觉明显。</li><li>第八天 (2022 年 12 月 26 日 周一)：<br />鼻孔堵塞得厉害，躺床上基本就一个鼻孔了，早上咽喉还是痛，同时会吸出一些血吐出来，中午躺床上没睡着，下午依然能吸出血吐出来。心跳感觉相对正常了。</li><li>第九天 (2022 年 12 月 27 日 周二)：<br />鼻孔还是堵塞，躺床上基本就一个鼻孔了，早上咽喉还是痛，不过比昨天好点。还是能吸出一些血丝。开始有点胃口了，中午把前几天买的莴笋吃了，睡了个午觉，一觉起来快 4 点了吧，午睡后鼻孔堵塞、咽喉都有改善，然后出去想买菜，发现好又多超市完全关门了，在路边买了娃娃菜吃。偶尔忍不住会咳嗽。</li><li>第十天 (2022 年 12 月 28 日 周三)：<br />早上刚起床咽喉微痛，鼻孔微堵。中午把昨天买的娃娃菜吃完了，晚上吃了冻菜包。偶尔感觉喉咙痒忍不住会咳嗽。到晚上时除了感觉喉咙偶尔有东西外，至少过于明显的症状已经快没了，今天也是最后一天病假。</li></ol><h3 id="无"><a class="anchor" href="#无">#</a> 无</h3><p>感觉放太开了，完全不知道为什么突然之间，什么都不管了。<br />说好的『逐步』放开呢？就算建立免疫屏障，也不是让所有人都走一轮吧... 我这次本来还坚挺了一个星期，直到确实感染的同事们陆续带病上班，然后感觉就被强行感染 —— 办公室咳嗽一片，这种都是完全没人管的。<br />这个病毒肯定是比重感冒严重的，按照有症状到恢复，至少需要一个星期。在严重那两天基本上很难做什么。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;第一天 (2022 年 12 月 19 日 周一)：&lt;br /&gt;
咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。&lt;/li&gt;
&lt;li&gt;第二天 (2022 年 12 月 20 日 周二)：&lt;br /&gt;
办公室咳嗽声感觉更多</summary>
      
    
    
    
    <category term="其它" scheme="https://wangjiaying.top/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="疫情" scheme="https://wangjiaying.top/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>揭秘Unity的黑盒世界-笔记</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T07:34:25.000Z</published>
    <updated>2023-04-16T08:02:40.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="native-mamery"><a class="anchor" href="#native-mamery">#</a> Native Mamery</h3><p>Unity 如何分配内存？</p><p><img data-src="/blogimages/2022/2022-12-28/note2_1.jpg" alt="" /></p><ul><li>New/Malloc：<ul><li>一个是函数一个是操作符，原理上讲 操作符 快于 函数</li><li>分配失败 New 会抛出 Exception，Malloc 返回 null</li><li>Malloc 实现都类似，New 各有不同<ul><li>例如构造函数，New/Delete 会调用对象的 构造函数 / 析构函数 以完成对象的 构造 / 析构。而 Malloc/Free 则不会</li><li>但是 New 并不代表是 Malloc + 构造函数</li></ul></li><li>New 内存分配于 FreeStore (自由存储区【C++ 基于 new 操作符的一个抽象概念】)，Malloc 会分配于 Heap 上<ul><li>New/Delete 时，是否分配或释放内存，New 可以由自己决定，Malloc/Free 一定会返还系统</li></ul></li><li>所以严格讲两者根本不是一个东西，其实没有关系</li></ul></li></ul><p>Unity 不会直接通过 New/Malloc 进行操作，而是自己通过宏实现了一套内存分配机制，比如  <code>UNITY_MALLOC</code> ，分配内存时，会给内存一个标识符 ( <code>Memery Label</code> )，提交到 Memery Manager 进行分配。</p><ul><li>像 Profiler 中 Take Sample ，用以区分运行时每块内存所属，就是通过 Memery Label 区分。</li><li>Memery Label 同时也可以帮助 Memery Manager 做一个筛选，区分应该通过哪种内存分配器策略分配内存</li><li>主要内存分配器：<ul><li><code>Stack Allocator</code> ：快速、容量小、临时对象分配器<br /><img data-src="/blogimages/2022/2022-12-28/note2_2.jpg" alt="" /><br /> <code>注：图上的 Heap 是内存对象的 Heap，Stack Allocator 指先进后出结构</code><ul><li><code>快</code> ：对于栈内存，默认就会预分配一块，然后通过栈顶指针在内存块中移动，此时不会真的重新申请内存，所以快 —— 官方测试比动态堆分配器大概快 3~5 倍</li><li><code>小</code> ：分配多了很可能会被浪费，而且申请后就不会释放，是永远占用的</li><li><code>临时</code> ：上述机制也代表栈顶不可能长时间不动，快速收缩膨胀，高效重复利用。所以常驻对象不大行。<ul><li>在我们想要分配内存时，Unity 会分配两块内存：Header (记录如 (1) 是否使用 (2) User 大小 (3) 前一块是谁)+User<ul><li>所以会有额外消耗，例如自己想分配 16 字节内存，可能最终会有 32 字节大小</li></ul></li><li>回收中间对象时，Header 直接置为 『已删除』</li><li>栈顶指针回弹时，会检测回弹指针位置对象是否已经 『已删除』，若是则再次往上移动，直到一个没有被标记为删除的块，或挪到了整个 Block 头</li><li>栈结构分配虽然快，但是若栈顶对象未释放，中间内存即使回收也无法复用<ul><li>它必须等待栈顶指针对象被释放，才能回弹检测连续内存</li><li>所以无法快速重用中间已释放内存</li></ul></li><li>栈内存大小有限制 (虽然会进行拓展)<ul><li>Editor：主线程有 16M，Woker 线程 256KB</li><li>Runtime：主线程 128KB~1MB，Woker 线程 64KB</li></ul></li><li>栈内存爆了之后：Memery.FallbackAllocation，Fallback 至主堆分配器，会慢很多，造成卡顿<ul><li>分帧处理</li><li>有源码加大堆栈内存</li></ul></li></ul></li></ul></li><li><code>Batch Allocator</code> ：SRP</li><li><code>DynamicHeapAllocator</code> ：主分配器</li><li>...15~20 种不同的分配器，每一种适用的场景不同</li></ul></li></ul><h3 id="managed-memery"><a class="anchor" href="#managed-memery">#</a> Managed Memery</h3><ul><li>Mono：保留内存不会返给系统</li><li>Il2CPP：保留内存可能返给系统 —— 在同一个『页』6 次 GC 都没有被触及到的情况，很难 (注意不是对象，是内存管理单位)，Unity 确实设置了这一个机制，但是很难达成。</li><li>注意内存碎片化带来的保留内存上升</li><li>Unity 使用 Boehm GC (保守式 GC)：<br /><img data-src="/blogimages/2022/2022-12-28/note2_3.jpg" alt="" /><ul><li><p><code>一级列表</code> ：将对象分为不同类型（如 PTRFREE (无指针类型)、Normal (一般类型)、不可回收类型 (回收器自己用)）</p></li><li><p><code>二级列表</code> ：表明当前类型下的内存块大小 (16 字节增量，最多到 2K)</p></li><li><p>二层 <code>链表</code> ：每一个大小内存块为一个链表，逻辑链接起来</p><ul><li>当用户需求分配一个内存对象，就会拿出指定大小的第一个块返给用户</li><li>若用户需要分配大小小于最低大小，会返回最低大小的一个 Block (例如最小 16 字节，用户需求 8 字节，返回的就是 16 字节的内存块，会造成浪费)</li><li>若所需大小不足，则向更高级取：然后将高级大小分拆分为两半，一半返回用户、另一半链到低级链表上</li><li>同时进行回收时，若两个节点物理地址连接，则其会试图将两者合并，挂到更大的节点下，从而尽量减少整体碎片化 —— 注意不是移动内存，而是直接挂指针</li></ul></li><li><p>回收一个 Object 内存块时，会尝试找到这个内存卡块下所有指针指向地址，并且标记为引用<br />以一个不可回收对象 ObjectA 为例，需要同时标记其引用对象也不可回收。但是在内存层次上因为已经没有 class 信息，无法确认对象地址存储的是值还是指针，靠『猜测 (pattern)』判断，因此叫『潜在指针』<br /><img data-src="/blogimages/2022/2022-12-28/note2_4.jpg" alt="" /></p><ul><li>因此它总是假设给定值是指针，并且将相关联的对象标记为存活状态：<ul><li>若指向对象，则将对象也标记为不可回收</li><li>若正好指向不相干的对象，不相干的对象也会被标记为不可回收 (不相干的对象指恰好被分配到这个地址上的对象，与其无实际依赖关系)</li><li>若正好指向空白内存，空白内存地址将会加入黑名单，下次分配时若刚好踩到该地址，将不可分配内存</li></ul></li></ul></li></ul></li><li>Boehm GC 问题：<ul><li>不分代、不合并 (整理内存)，容易导致内存碎片<ul><li>例如当我们保留内存还剩很多，但是突然又被分了一大块就是这种情况</li></ul></li><li>非精准回收<ul><li>已分配内存在无人引用时，不一定能收回</li><li>没有分配使用的内存，当想要分配使用时不一定能使用</li></ul></li></ul></li><li>其它：<ul><li>GC 回收方式有：Boehm GC (保守式)、S-Gen GC (分代式)、引用式 GC (Java)</li><li>Unity 继续使用保守式 Boehm GC，也有觉得移动平台再额外花费 CPU 去整理内存是不合算的事情缘故<ul><li>当然，由于没有实装 S-Gen GC 来对比，具体性能差异当然是不可而知了</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;native-mamery&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-mamery&quot;&gt;#&lt;/a&gt; Native Mamery&lt;/h3&gt;
&lt;p&gt;Unity 如何分配内存？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/blogimages/2</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://wangjiaying.top/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="笔记" scheme="https://wangjiaying.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Unity内存管理-笔记</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T04:40:26.000Z</published>
    <updated>2023-04-16T08:02:40.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是内存"><a class="anchor" href="#什么是内存">#</a> 什么是内存？</h2><h3 id="物理内存"><a class="anchor" href="#物理内存">#</a> 物理内存</h3><h4 id="cpu访问内存"><a class="anchor" href="#cpu访问内存">#</a> CPU 访问内存：</h4><ul><li>CPU 访问内存是一个慢速的过程</li><li>CPU 想要访问一块内存时，并不是立即走系统总线访问内存，而是先向 L1、L2、L3 Cache 查询。当三个 Cache 全部 Miss 以后，才会去主内存中拿一段连续的指令回到 Cache。当下一次需要的时候，依然是先向 Cache 查询。</li><li>这样如果我们的内存、指令不是连续的，就会导致大量内存到 Cache 的交换，浪费大量时间在内存读取上</li><li><img data-src="/blogimages/2022/2022-12-28/image.jpg" alt="" /></li><li>(CPU 上 Cahce 的核心面积一般占用都是很大的)</li><li>(Unity ECS DOTS 就是为了优化这一点，将数据组建为连续内存块，以期减少 Cache Miss)</li></ul><h4 id="pc-和-移动设备内存架构差异"><a class="anchor" href="#pc-和-移动设备内存架构差异">#</a> PC 和 移动设备内存架构差异：</h4><ul><li>移动设备没有独立显卡</li><li>移动设备没有独立显存<ul><li>所以移动设备上我们关注的 <code>内存</code> ，也即是 <code>显存</code></li></ul></li><li>CPU 核心更小，缓存级数和大小也更小</li></ul><h3 id="虚拟内存"><a class="anchor" href="#虚拟内存">#</a> 虚拟内存</h3><ul><li><p>PC：<br />交换内存，当我们内存不足时，它会尝试将不使用的内存交换到硬盘上，以节省出更多的物理内存给当前系统比较活跃的进程使用</p></li><li><p>IOS：<br />IOS 可以进行压缩，将不活跃的内存压缩起来移动到内存中特定空间，节省出物理内存给活跃的应用使用</p></li><li><p>Android：一般是没有的 (虽然有部分手机支持交换内存)</p></li></ul><h3 id="内存寻址范围"><a class="anchor" href="#内存寻址范围">#</a> 内存寻址范围</h3><ul><li>32 位 CPU 和 64 位 CPU</li><li>控制其寻址范围的是 MCU，一般与 CPU 位数对应</li></ul><h2 id="安卓内存管理"><a class="anchor" href="#安卓内存管理">#</a> 安卓内存管理：</h2><p>内存基本单位：Page，没有经过设置一般为 4K，分配和回收以 Page 为单位 (并不意味所有数据都是 4K 对齐)</p><ul><li>分用户态和内核态，用户访问内核态 (如 Native 分配) 会错误</li></ul><p>内存杀手：low memery killer</p><ul><li>杀顺序：缓存 -&gt; 前一个应用 -&gt;Home-&gt;Service-&gt;Perceptible-&gt;Foreground-&gt;Persistent (前台驻留内存，杀掉前台还在的)-&gt;System (重启)</li></ul><p>内存指标：</p><ul><li>Resident Set Size (RSS)：当前应用所用掉的所有内存 (包括调用公共库导致的内存分配)</li><li>Proportional Set Size (PSS)：当前应用内存 + 均分公共库内存 (公共库被调用者均分 -- 内存公摊)</li><li>Unique Set Size (USS)：只有应用自己分配的内存，我们能做到的就是优化这一块内存，并避免在 PSS 上造成更多压力<ul><li>procrank 命令查看内存分配</li></ul></li></ul><h2 id="unity-内存"><a class="anchor" href="#unity-内存">#</a> Unity 内存</h2><ul><li>类型：<ul><li>Native Memery<ul><li>重载了所有内存分配符，每一个操作符 (Allocator) 被使用时要求一个额外参数：MemeryLable，指当前这一块内存要分配到哪个内存池，Profiler 查看时那些名字就是这个统计</li></ul></li><li>Managed Memery</li><li>引擎管理内存</li><li>用户管理内存</li></ul></li><li>Unity 检测不到用户分配的 Native 内存、Lua 内存也是无法被 Unity 直接统计到的</li></ul><h3 id="native-内存"><a class="anchor" href="#native-内存">#</a> Native 内存</h3><h4 id="scene"><a class="anchor" href="#scene">#</a> Scene</h4><ul><li>场景中的对象，GameObject</li><li>当我们创建一个 GameObject 时，Unity 底层会构建一个或多个 Object 存储其信息 (因为其内部还可能存在多个 Component)<ul><li>也因此当场景有过多 GameObject 时，Native 内存会有显著增长</li><li>通过 Profiler 发现 Native 内存大量上升时，可以检查该项</li></ul></li></ul><h4 id="audio"><a class="anchor" href="#audio">#</a> Audio</h4><ul><li>DSP Buffer：填充满了才会向 CPU 发送指令，过大会导致声音延迟，太小会导致 CPU 负担上升</li><li>Force To Mono</li><li>Format：是否硬解支持，IOS 对 MP3 有硬解支持<ul><li>MP3 比 Vorbis 更大，但是比 ADPCM 更小</li></ul></li><li>Compression Format</li></ul><h4 id="code-size"><a class="anchor" href="#code-size">#</a> Code Size</h4><ul><li>模板泛型滥用，IL2CPP 会被展开编译成静态代码，不同的泛型参数会导致排列组合形成代码膨胀</li></ul><h4 id="assetbundle"><a class="anchor" href="#assetbundle">#</a> AssetBundle</h4><ul><li>Type Tree：当前版本序列化字段形成一张对应表，如果换了一个版本反序列化，没有的字段可以直接采用默认值，避免出错。<ul><li>确认不会对兼容性造成影响 (跨版本打热更？)，就可以关掉。关掉可以 (1) 减小内存、(1) 减小包体大小，(3) Build 和运行时会变快。</li><li>若存在 Type Tree，会进行两次序列化 (反序列化)，第一步先反序列化出 Type Tree，第二步再反序列化出实际内容</li></ul></li><li>LZ4：推荐，但是压缩率会比 LZMA 平均差 30%，速度快 10 倍以上 (官方称)，基于 ChunkBase ，可以一块一块解压<ul><li>例如，一个文件是从第 5 块～10 块，会从第五块开始，5 块、6 块、分别解压，并重用之前内存，可以减少内存峰值</li></ul></li><li>LZMA：官方很不推荐，因为解压和读取速度都很慢，另外会占大量内存，因为不是 ChunkBase 而是 Stream，需要一次性读取全解压。</li><li>Size &amp; Count：每个 Bundle 包含资源数量，没有定论，需要平衡</li></ul><h4 id="resources-目录"><a class="anchor" href="#resources-目录">#</a> Resources 目录</h4><ul><li>这个目录在打进包的时候，会生成一个红黑树，用于帮助检索资源位置，这棵树在刚开始游戏就会加载进内存且不可卸载，造成持续内存压力。并且会拖慢游戏启动速度：没有分析生成完毕，游戏不会正式启动。</li><li>官方极不推荐：建议最多 Debug 环境使用，正式环境直接删掉。</li></ul><h4 id="texture"><a class="anchor" href="#texture">#</a> Texture</h4><ul><li>upload buffer：也可以设置，与声音的 DSP Buffer 有点像，就是填满多大向 GPU Push 一次</li><li>Read/Write：正常情况下，一张图读进内存，然后提交到 upload buffer 后就会直接 Delete 掉。检测到开启该选项就不会 Delete，显存内存各一份。手游显存和内存通用，就会导致 Unique Memery  存在两份。</li><li>Mipmap：UI 之类都不用开，如 3D 模型的贴图，涉及 3D 相机变化，才可能需要开启 (需要一个平衡，会增加大概 30% 内存占用，减轻渲染消耗)。</li></ul><h4 id="mesh"><a class="anchor" href="#mesh">#</a> Mesh</h4><ul><li>Read/Write：与图片一样</li><li>Compression：压缩，减少文件大小，对内存没帮助，使用时还是解压 (而且有可能会导致内存占用更多)</li></ul><h4 id="assets"><a class="anchor" href="#assets">#</a> Assets</h4><ul><li>资源管理方式</li></ul><h3 id="unity-managed-memery"><a class="anchor" href="#unity-managed-memery">#</a> Unity Managed Memery</h3><ul><li>VM 内存池<ul><li>以 Block 进行管理，当一个 Block 连续 6 次未被 GC 访问，会返还系统 (所以这种情况基本上看不到)</li><li>不会频繁分配 reserved 内存，一次性分配一大块，每次当接近一个阈值会按照一个比例乘出来</li></ul></li><li>GC 机制<ul><li>Unity Mono 使用 Boehm<ul><li>不分带的</li><li>非压缩，不整理内存</li><li>为何没升级 Mono GC：要交版税，以及后来转向 IL2CPP，自己实现升级了渐进式 GC</li></ul></li><li>下一代 GC<ul><li>Incremental GC (渐进试 GC)、<ul><li>正常 GC 会暂停主线程，进行 GC 操作，会造成主线程卡顿</li><li>该项将暂停主线程操作分帧做，GC 总体时间不会变，减少的峰值消耗</li><li>IL2CPP 为 Unity 自己实现的 GC 机制，升级版 Boehm</li></ul></li></ul></li></ul></li><li>为什么内存下降了，总体内存池上升？<ul><li>Memery Fragmentation (内存碎片化)：分配的新内存已经插不进去了 (虽然碎片加起来可能远远满足需求)，造成严重浪费 —— 这些碎片可能再也用不了了。</li><li>高密度加载释放，先操作大内存，再操作小内存</li><li>Zombie Memery (僵尸内存)<ul><li>并非内存泄露 (无人可以访问和管理)</li><li>无用内存、没有释放</li><li>通过代码管理和性能工具分析</li></ul></li></ul></li><li>推荐做法<ul><li>Class (长生命周期) 和 Struct (短生命周期)</li><li>内存池，高频使用的小对象</li><li>闭包和匿名函数：闭包和匿名函数全被创建为 Class</li><li>协程：轮询模式，即使是局部变量，在协程未结束之前也会一直占用，以 Class 形式。所以推荐用的时候生产，用完释放</li><li>配置表：是否有庞大配置表，不要全部一次性扔内存</li><li>单例：慎用</li></ul></li><li>问题<ul><li>GameObject.SetActive：内部有大量操作，特别是 UI 会产生 额外 GC，激活一个 UI 时还会递归子 UI 初始化。建议这一块比较影响的话，将其移动至屏幕外</li></ul></li></ul><p>内存最佳实践：<br /><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi51bml0eS5jb20vdHV0b3JpYWwvbWVtb3J5LW1hbmFnZW1lbnQtaW4tdW5pdHkj">https://learn.unity.com/tutorial/memory-management-in-unity#</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是内存&quot;&gt;#&lt;/a&gt; 什么是内存？&lt;/h2&gt;
&lt;h3 id=&quot;物理内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#物理内存&quot;&gt;#&lt;/a&gt; 物理内存&lt;/h3&gt;
&lt;h4 id=&quot;cpu访问内</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://wangjiaying.top/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="笔记" scheme="https://wangjiaying.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>修复 Shoka 主题的一点小问题</title>
    <link href="https://wangjiaying.top/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://wangjiaying.top/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-23T02:40:28.000Z</published>
    <updated>2022-12-23T12:17:21.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>后续又发现两个问题：</p><ol><li>当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹</li><li>页面百分比进度显示不大准确</li></ol><h1 id="标签页回弹问题"><a class="anchor" href="#标签页回弹问题">#</a> 标签页回弹问题</h1><p>回家预览了下，发现页面内容高度不足会有显示问题，例如标签页会变得比较鬼畜：页面无法拉到底，底部的评论及网站底部一闪一闪的：</p><p><img data-src="/blogimages/2022/2022-12-17/GIF2022-12-1921-01-23.gif" alt="" /></p><p>调试了一下，找到了  <code>global.js</code>  中的  <code>scrollHandle</code>  方法中计算导致的。</p><p>它会为  <code>sidebar</code>  增加一个  <code>affix</code>  的 class，存在时会显示页面下方的元素，否则就会隐藏。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>affix<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>不知道为啥在我这反复横跳，造成了这种闪烁的结果。</p><p>其对应代码如下：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>看判断条件，结合实际情况，宽度因素可以排除：那么就是恐怕就是这个高度判断出了啥问题吧？</p><ul><li>window.pageYOffset = 当前页面相对于窗口垂直方向滚动的像素</li><li>headerHight=header 高度 + waves 高度 (就那个波纹特效高度)</li></ul><p>这里的逻辑估计是想：如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)。</p><p><s>所以不知道这个具体用来处理啥情况的，但毕竟我这出问题了，只能减小该值。改成  <code>window.pageYOffset &gt; headerHightInner</code>  就好了。</s></p><p>这样改是不对的， <code>过了两天</code>  发现不行，单纯修改这个高度判断，换一个分辨率又炸了。</p><p>又研究了下，觉得它主要问题还是  <code>window.pageYOffset &gt; headerHight</code>  计算问题，这里相当于只判断了  <code>当前页面滑动高度</code>  是否大于  <code>标题图像高度</code> ，但是并没判断要是整个文档区域的高度都比 标题图像高度 低的情况。这样 当前页面滑动高度 可能就划不过去了。</p><ul><li>注 1： <code>sideBar</code>  其实是我们显示的头像那个组件，不知道为啥还会影响到底部区域的显示，有 affix class 底部才能显示，删掉就会导致隐藏。</li><li>注 2： <code>document.body.offsetWidth &gt; 991</code>  代表的是会导致排版切换为手机类型排版的最低宽度，切换为手机排版后  <code>sideBar affix class</code>  也不产生影响</li></ul><h1 id="页面百分比计算不一致问题"><a class="anchor" href="#页面百分比计算不一致问题">#</a> 页面百分比计算不一致问题</h1><p>在修改上面标签页问题时，发现页面的 百分比 进度显示也不对劲 —— 跟实际页面滑动过的百分比不一致。</p><p>感觉原来的计算方式，仅计算百分比就不大对劲： <code>当前滑动高度/可显示区域高度</code></p><p>而  <code>当前滑动高度</code>  肯定会比  <code>可显示区域高度</code>  更大的，这种计算方式就感觉比较奇怪，然后在其它页面试了试，并特意去作者的博客看了下，显示上都不大对的上号。</p><p>于是把百分比计算和显示与否判断都改了：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">scrollHandle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> winHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> docHeight <span class="token operator">=</span> <span class="token function">getDocHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// var contentVisibilityHeight = docHeight > winHeight ? docHeight - winHeight : document.body.scrollHeight - winHeight;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">var</span> contentVisibilityHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight <span class="token operator">-</span> winHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> <span class="token constant">SHOW</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHightInner<span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> startScroll <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SHOW</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#FFF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  toolBtn<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  siteBrand<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// sideBar.toggleClass('affix', window.pageYOffset > headerHight &amp;&amp; document.body.offsetWidth > 991);</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 所以不清楚具体用来处理啥，单纯 window.pageYOffset > headerHight 判断可能导致底部最近评论闪烁问题</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">//scrollAction.y = Container.scrollTop;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token comment">//var diffX = scrollAction.x - Container.scrollLeft;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  diffY <span class="token operator">=</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">-</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">//if (diffX &lt; 0) &#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// Scroll right</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">//&#125; else if (diffX > 0) &#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// Scroll left</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token comment">//&#125; else</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// Scroll down</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// Scroll up</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// First scroll event</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// var scrollPercent = Math.round(Math.min(100 * window.pageYOffset / contentVisibilityHeight, 100)) + '%';</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token comment">// 上面的计算方式感觉对不上，这个改着试试</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token keyword">var</span> scrollPercent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">/</span><span class="token punctuation">(</span>contentVisibilityHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  backToTop<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> scrollPercent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.percent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span>scrollPercent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>暂时算是好了，不知道还有没有其它问题。后续如果发现问题再看了。</p><h1 id="果然出现新的问题了"><a class="anchor" href="#果然出现新的问题了">#</a> 果然出现新的问题了</h1><p>头像组件会浮动至页面顶端去 —— 终于也明白  <code>affix</code>  用来判断什么的了，有这个标记时可以浮动，否则不行。</p><p>感觉造成闪烁的原因，最大的问题是 docHeight 取出来的值不一样，会产生变化。</p><p>最终又改了下，改成要是实际高度比页顶图片那块还低，那么判断标准就取  <code>docHeight/2</code> ：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span><span class="token punctuation">(</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">></span>docHeight<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这样修改虽然不会闪烁，但要是 实际内容高度比页顶图片那块还低，滑动时头像组件进入浮动模式后，还是可能跑到页顶图片上去。</p><p>如果想彻底解决，得研究下为什么  <code>affix</code>  会导致下方对象看不见，然后再针对『消失』问题作处理 —— 而不是在这里改此处代码，因为理论上在这种情况下应该始终显示才对。</p><p>至于为什么会导致下方对象看不见了？估计跟 CSS 排版那边有关系，不想看了，再研究下去花的时间就太多了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;后续又发现两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹&lt;/li&gt;
&lt;li&gt;页面百分比进度显示不大准确&lt;/li&gt;
&lt;/o</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://wangjiaying.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
