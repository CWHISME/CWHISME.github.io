<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangJiaYing</title>
  
  <subtitle>人不能没有梦想，也要有足够的敬畏</subtitle>
  <link href="https://wangjiaying.top/atom.xml" rel="self"/>
  
  <link href="https://wangjiaying.top/"/>
  <updated>2023-02-05T07:55:41.800Z</updated>
  <id>https://wangjiaying.top/</id>
  
  <author>
    <name>CWHISME</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BatchTextureModifier工具使用说明</title>
    <link href="https://wangjiaying.top/2023/02/05/BatchTextureModifier%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://wangjiaying.top/2023/02/05/BatchTextureModifier%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2023-02-05T06:38:57.000Z</published>
    <updated>2023-02-05T07:55:41.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>这是上个月开始弄的一个小工具，春节期间收尾的。</p><blockquote><p>实在不知道取什么名字好，暂且就先用着这个  <code>BatchTextureModifier</code>  名字吧 🙀。</p></blockquote><p>这几天又完善了一下，昨天在家里亲自以自己网站  <code>二次元随机图库</code>  处理为目的，进行试用了一番，并改动了一波，虽然功能应该不算复杂，而且对各个选项基本也都加了  <code>Tooltips</code> ，不过考虑到部分选项情况，感觉最好也可以写一写汇总的使用说明。</p><p>也就是说，本网站的所有随机图片，都是由该工具统一处理完成：所有随机图片都是  <code>1280x800</code> ，大小则为  <code>100KB</code>  以下的  <code>Webp</code>  格式。</p><h1 id="功能"><a class="anchor" href="#功能">#</a> 功能</h1><p>主要是实现一个批量图片处理功能，例如批量进行格式转换的同时，对图片做一些裁剪、缩放等操作。</p><p>使用 WPF .NetCore6.0 开发</p><p>目前支持：</p><ol><li>批量处理图片 (也可以单图处理)</li><li>预览修改效果、及修改后文件大小</li><li>覆盖修改、自动备份 (前提是直接覆盖修改的话)</li><li>多种模式缩放图片</li><li>按照指定参数，批量转换图片格式为  <code>*.png</code>   <code>*.jpg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code><ul><li>支持自动读取的后缀为： <code>*.png</code>   <code>*.jpg</code>   <code>*.jpeg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code></li><li>(如果发现批量处理时没有读取到，可以检查是否图片后缀不对劲)</li></ul></li><li>POT 缩放 (用过 Unity 的应该知道什么意思，不过这个跟 Unity 强行拉伸方式不同，而是比例缩放)</li><li>多线程处理，同时开启处理量取决于 CPU 核心数目</li><li>处理转为  <code>jpg</code>   <code>Webp</code>  格式时可选限制最终生成的文件大小，超出指定大小会尝试降低质量进行迭代（会极大增加额外消耗）</li></ol><h1 id="界面"><a class="anchor" href="#界面">#</a> 界面</h1><p>最基本的界面如下：</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-00-11.jpg" alt="" /></p><p>从上往下主要分为三个模块：</p><ol><li>普通设置</li><li>参数设置</li><li>结果预览</li></ol><h2 id="普通设置"><a class="anchor" href="#普通设置">#</a> 普通设置</h2><p>又分为  <code>批量处理</code> 、 <code>单图处理</code> 、 <code>其它工具</code></p><h3 id="批量处理"><a class="anchor" href="#批量处理">#</a> 批量处理</h3><p>最基本的页面，也是主要功能。</p><ul><li>原始目录：即需要处理的图片目录</li><li>输出目录：处理完毕后，保存地址</li></ul><p>若输出目录与原始目录填写一致，会自动判断为  <code>覆盖模式</code> ，并进行处理时的备份，若不需要则可以将  <code>参数设置-&gt;文件设置-&gt;备份文件</code>  勾选取消。</p><p>点击  <code>处理</code>  按钮，自动跳转至  <code>日志页签</code> ，并开启线程进行批量处理。</p><h3 id="单图处理"><a class="anchor" href="#单图处理">#</a> 单图处理</h3><p>这里可以选择某一张图片作为预览，并且单独保存：</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-27-21.jpg" alt="" /></p><p>注：只要有预览图片，就可以保存。</p><h3 id="其它工具"><a class="anchor" href="#其它工具">#</a> 其它工具</h3><p>昨天刚加了个  <code>生成文件列表</code>  的小功能，目前就这一个。</p><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-25-58.jpg" alt="" /></p><p>其功能是可以将指定目录下，所有文件生成一个文件列表，可选添加统一前缀。</p><p>目录路径可以直接粘贴上去，也可以点击  <code>选择</code>  用浏览去选。</p><h2 id="参数设置"><a class="anchor" href="#参数设置">#</a> 参数设置</h2><p>分为  <code>输出格式</code>   <code>缩放模式</code>   <code>文件设置</code>  三类</p><h3 id="输出格式"><a class="anchor" href="#输出格式">#</a> 输出格式</h3><p>可以选择在保存时将输入的原图转换为  <code>*.png</code>   <code>*.jpg</code>   <code>*.webp</code>   <code>*.tga</code>   <code>*.bmp</code>   <code>*.gif</code>  几种格式。</p><p>每种格式都尽量提供了会对图片造成影响的选项以供配置。</p><p>其中  <code>JPG</code>  和  <code>webp</code>  有损格式 支持  <code>质量设置</code>  ，因此这两者提供了  <code>文件大小限制</code> ，即：超过指定大小会尝试降低质量进行迭代，不过会极大增加额外消耗。</p><p>另外  <code>保持透明</code>  选项默认不勾选，不勾选的情况下：指的是转化时若像素不可见则填充为透明度 (透明图片)，勾选的情况下则不做处理。</p><h3 id="缩放模式"><a class="anchor" href="#缩放模式">#</a> 缩放模式</h3><p>不缩放：不会改变原本分辨率，如果你连格式也选择保持不变，那么就没什么用<br />比例缩放 II：将原图缩放至指定分辨率时尽量保持比例不变，多余处则填充<br />直接裁剪：直接裁剪至目标分辨率<br />基于宽度：以宽度为基准进行缩放，高度不足则填充，高度超过之处则裁剪<br />基于高度：以高度为基准进行缩放，宽度不足则填充，宽度超过之处则裁剪<br />比例缩放：如果图片小于设定分辨率，则比例放大，不足之处则填充；如果图片大于设定分辨率，则比例缩小<br />比例裁剪：以高度或宽度最大者为基准进行缩放，尽量保持比例不变，多余处直接裁剪<br />直接缩放 (向下)：(与设定分辨率不会保持一致) 基于最小边长达到给定分辨率直接缩小，不会改变原本图片比例，也不会放大<br />直接缩放 (向上)：(与设定分辨率不会保持一致) 基于原本图片比例，缩放至新分辨率的比例，缩放后分辨率一般比设定分辨率更小<br />拉伸缩放：原图直接填充至新的分辨率，不足直接拉伸，会导致图片变形<br /> POT 缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处则填充<br /> POT 方形缩放：高宽缩放至最接近 2N 次方的方形分辨率，尽量保持比例不变，不足处则填充</p><p>缩放算法默认是  <code>Bicubic</code> ，我在处理本站 随机图片时，采用的  <code>Spline</code>  算法，该算法模糊图片减少细节，并能减少最终图片大小 (相比其它算法)，比较适用于生成的图片用在  <code>缩小使用</code>  的情况。</p><blockquote><p>注：填充的究竟是透明度还是黑色，取决于图片原本是否是有透明通道的图片。</p></blockquote><h3 id="文件设置"><a class="anchor" href="#文件设置">#</a> 文件设置</h3><p>直接覆盖：可选是否直接覆盖源文件，如果勾上的话，会直接删除源文件并以转化后图片进行替代，谨慎使用！<br />保留结构：覆盖源文件且备份时使用，备份时会依照源文件的子目录进行备份，否则会全部备份在一个目录中。</p><h2 id="结果预览"><a class="anchor" href="#结果预览">#</a> 结果预览</h2><p>在结果页面，又分为两个页签，默认处于  <code>预览页签</code> ，点击  <code>输出</code>  可切换至  <code>日志页签</code> 。</p><h3 id="预览页签"><a class="anchor" href="#预览页签">#</a> 预览页签</h3><p>左侧为原图，右侧为经过修改后的预览图。</p><p>图片上方展示了该图片的分辨率、文件大小：修改后的预览图是保存磁盘后的文件大小。</p><p>因为界面比较小，如果觉得看不清楚，提供了两种选项：</p><ol><li>可以点击国轩右侧预览图的右上角， <code>仅显示结果</code> ，该选项会使 UI 只显示一张修改后的预览图</li><li>若觉得还是不够，则可以点击右侧预览图的右下角， <code>放大</code>  按钮：这个按钮会打开一个新的对比页面，该页面运行全屏、放大展示</li></ol><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-46-46.jpg" alt="" /></p><h2 id="日志页签"><a class="anchor" href="#日志页签">#</a> 日志页签</h2><p><img data-src="/blogimages/2023/2023-02-05/Snipaste_2023-02-05_15-09-34.jpg" alt="" /></p><p>运行或操作过程中的日志会记录在此，在点击批处理后会自动跳转至该页面。</p><p>处理完毕后注意一下最后  <code>批处理执行完毕！共处理 X 个文件，消耗时间：Y</code>  其中的处理文件数量是否跟目录实际文件数量一致即可：一般来说，只要图片后缀是上述支持的格式，应该就没什么大问题。</p><h1 id="最后"><a class="anchor" href="#最后">#</a> 最后</h1><p>因为不知道用什么 ICON 好，所以也没加 ICON。</p><p>Git 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvQmF0Y2hUZXh0dXJlTW9kaWZpZXI=">https://github.com/CWHISME/BatchTextureModifier</span></p><p>走过路过点个赞吧，如果有任何  <code>Bug</code>  或者  <code>问题</code>  什么的，也欢迎提出 😸。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;这是上个月开始弄的一个小工具，春节期间收尾的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实在不知道取什么名字好，暂且就先用着这个  &lt;code&gt;BatchTextu</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://wangjiaying.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>C#协程的底层原理</title>
    <link href="https://wangjiaying.top/2023/02/01/CS-%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://wangjiaying.top/2023/02/01/CS-%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-01T09:27:37.000Z</published>
    <updated>2023-02-04T06:15:27.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>这两天又研究了下协程，之前虽然用过，也稍微想过，但是并没有深入研究，这次就想把流程仔细走一遍。</p><h1 id="原理"><a class="anchor" href="#原理">#</a> 原理</h1><p>其实也是一个思维方式问题，协程的原理其实很简单：利用迭代器</p><h2 id="迭代器"><a class="anchor" href="#迭代器">#</a> 迭代器</h2><p>我们都知道，实现了  <code>IEnumerable</code>  接口、或者说拥有  <code>IEnumerator GetEnumerator()</code>  的类可以被  <code>foreach</code>  所迭代。</p><p>其重点就在于  <code>IEnumerator</code>  这个接口。</p><p><code>数组</code> 、 <code>List</code> 、 <code>字典</code>  等数据结构，迭代时都是通过返回自己创建的一个实现了  <code>IEnumerator</code>  的  <code>Warp</code>  类进行。</p><p>为什么一个方法，标记返回  <code>IEnumerator</code>  直接就能被迭代？</p><p>例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>上述代码是不会报错的，如果执行也会正常调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>迭代</pre></td></tr><tr><td data-num="2"></td><td><pre>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">:</span><span class="token function">Log</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0<span class="token punctuation">:</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>TestEnumerator<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>TestEnumerator<span class="token punctuation">:</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>TestEnumerator<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Test<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>at Assets<span class="token operator">/</span>Test<span class="token punctuation">.</span>cs<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="从il代码分析"><a class="anchor" href="#从il代码分析">#</a> 从 IL 代码分析</h2><p>想过为什么会这样吗？毕竟这只是一个方法而已，为何就能被迭代了？</p><p>实际上， <code>IEnumerator</code> + <code>yield</code>  该是属于  <code>C#</code>  的法糖，因为底层编译器会为此生成一个新的类，这个新类直接实现了  <code>IEnumerator</code>  接口，而原本的方法则会在被调用时，创建这个新类并返回。</p><p>如果想要证实这个猜测，这就要从编译后的代码说起了，通过  <code>dnSpy</code>  反编译，选择  <code>IL</code>  语言 (C# 模式会还原我们的代码，所以看不出来)，就可以查看到具体信息，一部分代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x0200019E RID: 414</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">public</span></span> auto ansi beforefieldinit TestEnumerator</pre></td></tr><tr><td data-num="3"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Nested Types</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Token: 0x02000215 RID: 533</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">nested</span> <span class="token keyword">private</span> auto ansi <span class="token keyword">sealed</span> beforefieldinit '<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'</pre></td></tr><tr><td data-num="8"></td><td><pre>extends <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Object</pre></td></tr><tr><td data-num="9"></td><td><pre>implements <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>           <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">mscorlib</span></span><span class="token punctuation">]</span>System<span class="token punctuation">.</span>IDisposable<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>           <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IEnumerator`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>CompilerGeneratedAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// Token: 0x04000C77 RID: 3191</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">object</span> $current</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Token: 0x04000C78 RID: 3192</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">bool</span> $disposing</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// Token: 0x04000C79 RID: 3193</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>field assembly int32 $PC</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">//============ 略 ================</span></pre></td></tr></table></figure><p>我们只有一个  <code>TestEnumerator</code>  类，但是  <code>IL</code>  代码中却在  <code>TestEnumerator</code>  中又额外包含了一个  <code>&lt;GetEnumerator&gt;c__Iterator0</code>  新类。</p><p>再看原本的  <code>GetEnumerator()</code>  方法：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x06000E23 RID: 3619 RVA: 0x00059D54 File Offset: 0x00058154</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig</pre></td></tr><tr><td data-num="3"></td><td><pre>    instance <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span><span class="token return-type class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator</span> GetEnumerator <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>DebuggerHiddenAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// Header Size: 12 bytes</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// Code Size: 15 (0xF) bytes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// LocalVarSig Token: 0x11000353 RID: 851</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span><span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token punctuation">[</span>mscorlib<span class="token punctuation">]</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IEnumerator</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* 0x00058160 736E110006   */</span> IL_0000<span class="token punctuation">:</span> newobj    instance <span class="token keyword">void</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/* 0x00058165 0A           */</span> IL_0005<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/* 0x00058166 06           */</span> IL_0006<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* 0x00058167 0B           */</span> IL_0007<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">/* 0x00058168 3800000000   */</span> IL_0008<span class="token punctuation">:</span> br        IL_000D</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/* 0x0005816D 07           */</span> IL_000D<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* 0x0005816E 2A           */</span> IL_000E<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method TestEnumerator::GetEnumerator</span></pre></td></tr></table></figure><p>该方法创建并返回了  <code>&lt;GetEnumerator&gt;c__Iterator0</code>  类的实例。</p><h3 id="movenext-原理"><a class="anchor" href="#movenext-原理">#</a> MoveNext 原理</h3><p>那么，协程中又是如何实现分块执行  <code>yield</code>  分割的代码呢？</p><p>在我之前的想像中，是觉得有一个  <code>容器</code>  去  <code>盛放</code>  这些代码块，通过  <code>yield</code>  将原本函数代码分割成一个个更小的代码块，然后维护一个下标，通过  <code>MoveNext</code>  递增下标来执行实现。</p><p>看了  <code>IL</code>  代码后，虽然跟实际表现有差异，不过想得感觉倒是没大错：确实是被编译成了更细小的代码块，同时以一个下标维护着代码块执行进度。</p><p>首先是三个字段：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Fields</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Token: 0x04000C77 RID: 3191</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">object</span> $current</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Token: 0x04000C78 RID: 3192</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>field assembly <span class="token keyword">bool</span> $disposing</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Token: 0x04000C79 RID: 3193</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>field assembly int32 $PC</pre></td></tr></table></figure><p>因为之前的代码太简单，不好看出结构，这里我多加了一点代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><code>GetEnumerator()</code>  被编译为新类的  <code>MoveNext()</code>  方法块，结构如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Token: 0x0600116F RID: 4463 RVA: 0x00059D78 File Offset: 0x00058178</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>method <span class="token keyword">public</span> final hidebysig newslot <span class="token keyword">virtual</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    instance <span class="token return-type class-name"><span class="token keyword">bool</span></span> MoveNext <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// Header Size: 12 bytes</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// Code Size: 133 (0x85) bytes</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// LocalVarSig Token: 0x1100007D RID: 125</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">.</span>maxstack <span class="token number">2</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">.</span><span class="token return-type class-name">locals</span> init <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> uint32</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">/* 0x00058184 02           */</span> IL_0000<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">/* 0x00058185 7B790C0004   */</span> IL_0001<span class="token punctuation">:</span> ldfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">/* 0x0005818A 0A           */</span> IL_0006<span class="token punctuation">:</span> stloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">/* 0x0005818B 02           */</span> IL_0007<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* 0x0005818C 15           */</span> IL_0008<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>m1</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/* 0x0005818D 7D790C0004   */</span> IL_0009<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/* 0x00058192 06           */</span> IL_000E<span class="token punctuation">:</span> ldloc<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* 0x00058193 4503000000050000002B00000050000000 */</span> IL_000F<span class="token punctuation">:</span> <span class="token keyword">switch</span>    <span class="token punctuation">(</span>IL_0025<span class="token punctuation">,</span> IL_004B<span class="token punctuation">,</span> IL_0070<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">/* 0x000581A4 385C000000   */</span> IL_0020<span class="token punctuation">:</span> br        IL_0081</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* 0x000581A9 00           */</span> IL_0025<span class="token punctuation">:</span> nop</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">/* 0x000581AA 7230AE0070   */</span> IL_0026<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代1"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/* 0x000581AF 28F700000A   */</span> IL_002B<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">/* 0x000581B4 02           */</span> IL_0030<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">/* 0x000581B5 14           */</span> IL_0031<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">/* 0x000581B6 7D770C0004   */</span> IL_0032<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">/* 0x000581BB 02           */</span> IL_0037<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/* 0x000581BC 7B780C0004   */</span> IL_0038<span class="token punctuation">:</span> ldfld     <span class="token keyword">bool</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$disposing</pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">/* 0x000581C1 2D07         */</span> IL_003D<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s  IL_0046</pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">/* 0x000581C3 02           */</span> IL_003F<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">/* 0x000581C4 17           */</span> IL_0040<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">/* 0x000581C5 7D790C0004   */</span> IL_0041<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token comment">/* 0x000581CA 3838000000   */</span> IL_0046<span class="token punctuation">:</span> br        IL_0083</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">/* 0x000581CF 7238AE0070   */</span> IL_004B<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代2"</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">/* 0x000581D4 28F700000A   */</span> IL_0050<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">/* 0x000581D9 02           */</span> IL_0055<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">/* 0x000581DA 14           */</span> IL_0056<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">/* 0x000581DB 7D770C0004   */</span> IL_0057<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">/* 0x000581E0 02           */</span> IL_005C<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/* 0x000581E1 7B780C0004   */</span> IL_005D<span class="token punctuation">:</span> ldfld     <span class="token keyword">bool</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$disposing</pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/* 0x000581E6 2D07         */</span> IL_0062<span class="token punctuation">:</span> brtrue<span class="token punctuation">.</span>s  IL_006B</pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">/* 0x000581E8 02           */</span> IL_0064<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">/* 0x000581E9 18           */</span> IL_0065<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">/* 0x000581EA 7D790C0004   */</span> IL_0066<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token comment">/* 0x000581EF 3813000000   */</span> IL_006B<span class="token punctuation">:</span> br        IL_0083</pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">/* 0x000581F4 7240AE0070   */</span> IL_0070<span class="token punctuation">:</span> ldstr     <span class="token string">"迭代3"</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">/* 0x000581F9 28F700000A   */</span> IL_0075<span class="token punctuation">:</span> call      <span class="token keyword">void</span> <span class="token punctuation">[</span>UnityEngine<span class="token punctuation">.</span>CoreModule<span class="token punctuation">]</span>UnityEngine<span class="token punctuation">.</span>Debug<span class="token punctuation">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/* 0x000581FE 02           */</span> IL_007A<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/* 0x000581FF 15           */</span> IL_007B<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span>m1</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">/* 0x00058200 7D790C0004   */</span> IL_007C<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">/* 0x00058205 16           */</span> IL_0081<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">/* 0x00058206 2A           */</span> IL_0082<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token comment">/* 0x00058207 17           */</span> IL_0083<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token comment">/* 0x00058208 2A           */</span> IL_0084<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// end of method '&lt;GetEnumerator>c__Iterator0'::MoveNext</span></pre></td></tr></table></figure><p>其中  <code>$PC</code>  字段就代表了当前细分代码块进度，然后在  <code>MoveNext()</code>  方法调用时，通过一个  <code>IL_000F: switch    (IL_0025, IL_004B, IL_0070)</code> —— 也就是  <code>Switch case</code>  判断执行当前应该执行哪个细分代码块了。</p><p>执行完细分代码块后，将  <code>yield</code>  返回值赋值给  <code>$current</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x000581B4 02           */</span> IL_0030<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x000581B5 14           */</span> IL_0031<span class="token punctuation">:</span> ldnull</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* 0x000581B6 7D770C0004   */</span> IL_0032<span class="token punctuation">:</span> stfld     <span class="token keyword">object</span> TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$current</pre></td></tr></table></figure><p>并将  <code>$PC</code>  替换为对应的 index：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x000581C3 02           */</span> IL_003F<span class="token punctuation">:</span> ldarg<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x000581C4 17           */</span> IL_0040<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* 0x000581C5 7D790C0004   */</span> IL_0041<span class="token punctuation">:</span> stfld     int32 TestEnumerator<span class="token operator">/</span>'<span class="token operator">&lt;</span>GetEnumerator<span class="token operator">></span>c__Iterator0'<span class="token punctuation">::</span>$PC</pre></td></tr></table></figure><p>执行完毕后，最后通过指令跳转返回  <code>0</code>  或  <code>1</code>  作为  <code>bool</code>  变量，用于调用者判断是否已结束：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 0x00058205 16           */</span> IL_0081<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* 0x00058206 2A           */</span> IL_0082<span class="token punctuation">:</span> ret</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* 0x00058207 17           */</span> IL_0083<span class="token punctuation">:</span> ldc<span class="token punctuation">.</span>i4<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/* 0x00058208 2A           */</span> IL_0084<span class="token punctuation">:</span> ret</pre></td></tr></table></figure><p>原来指令集中  <code>bool</code>  确实是作为  <code>int</code>  处理的？难怪之前在研究  <code>Bool字节对齐</code>  字节对齐的时候，通过  <code>Marshal.SizeOf</code>  取出来是  <code>4</code>  个字节。</p><h1 id="实现自己的协程"><a class="anchor" href="#实现自己的协程">#</a> 实现自己的协程</h1><p>有了上述基本原理理解之后，实现一个自己的  <code>协程</code>  也就是非常简单的事了。</p><p>这里以一个简单的多线程为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnumerator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">SynchronizationContext</span> Current<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">TestEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        Current <span class="token operator">=</span> SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">IEnumerator</span> em <span class="token operator">=</span> <span class="token function">TestMyEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name"><span class="token keyword">int</span></span> wait <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>em<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                wait <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>em<span class="token punctuation">.</span>Current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>wait <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> wait<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>wait <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">else</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                    <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"发现未知迭代对象："</span> <span class="token operator">+</span> em<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">TestMyEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代1，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代2，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"迭代3，Time："</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        Current<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="/blogimages/2023/2023-02-01/m_89e0a77f491e315a3a6392e896cf92fa_r.png" alt="" /></p><p>如上图所示，我们自己实现的  <code>协程</code>  ，只处理了  <code>yield return null</code>  及  <code>yield return 数字</code>  的情况，若为  <code>null</code>  等待一秒，若为  <code>数字</code>  则等待指定数字秒数。</p><p>根据打印时间判断，逻辑是正确生效了的。</p><p>同时如果还有其它等待逻辑，则增加判断即可，如  <code>Unity</code>  提供的各种协程等待方法： <code>WaitForEndOfFrame</code> 、 <code>WaitForSeconds</code> 、 <code>WaitForFixedUpdate</code>  等等，我怀疑就是这样处理的，不过由于  <code>Unity</code>   <code>StartCoroutine</code>  协程最终实际生效是调用的  <code>extern</code>  函数，C# 反编译跟不进去了：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>InternalCall<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">extern</span> <span class="token return-type class-name">Coroutine</span> <span class="token function">StartCoroutineManaged2</span><span class="token punctuation">(</span><span class="token class-name">IEnumerator</span> enumerator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>因此真实逻辑就不得而知了，只能猜测大约是使用类似方式，毕竟迭代器逻辑就这样。</p><h1 id="unity协程执行时机"><a class="anchor" href="#unity协程执行时机">#</a> Unity 协程执行时机</h1><p>在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuLzIwMTkuNC9NYW51YWwvRXhlY3V0aW9uT3JkZXIuaHRtbA==">官方文档 ExecutionOrder</span> 有对应的流程图，其正常等待位于  <code>Update</code>  之后， <code>LateUpdate</code>  之前。</p><p>例外的有比如： <code>WaitForFixedUpdate</code>  位于 Update 之前， <code>WaitForEndOfFrame</code>  位于一帧最后。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><ul><li>反编译  <code>IL</code>  代码显示为自动创建一个实现了  <code>IEnumerator</code>  的新类，调用存在  <code>yield</code>  的原方法自动  <code>newObj</code>  这个新类</li><li>根据  <code>yield</code>  原方法逻辑会被编译成一段一段更细粒度的的代码块，并挪到  <code>MoveNext</code>  方法中</li><li>维护一个下标，每次调用返回的  <code>IEnumerator</code>   <code>MoveNext()</code>  就往下挪一位</li><li>等待逻辑后再调用下一个小方法块，可以由调用者判断  <code>Current</code>  值进行操作。因此如果是主线程调用，其中有死循环就会卡死主线程</li><li>协程本质上依然只是主线程上的一个调用，消耗的是主线程的时间，同时每个协程方法会被编译成一个新类，因此也不能滥用，顶多某些时候可以更方便地分帧处理</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;这两天又研究了下协程，之前虽然用过，也稍微想过，但是并没有深入研究，这次就想把流程仔细走一遍。&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a class=&quot;anchor&quot; </summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2022年总结</title>
    <link href="https://wangjiaying.top/2023/01/30/2022%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://wangjiaying.top/2023/01/30/2022%E5%B9%B4%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-30T03:48:27.000Z</published>
    <updated>2023-02-04T06:19:47.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>今年春节本来也没回家，就打算把总结写一下的。然后不知怎么拖延症又上来了，加上春节放假前几天不知怎么，嘴里也开了个口子，吃东西都疼，心情也难以好起来。</p><p>整个春节除了有两天时间出去买菜之外（另外春节蔬菜也涨价了，几乎比平时贵了几倍，白菜除外），基本上是一直待在成都屋里的。</p><ul><li>早上起床坐一会，感觉就该吃午饭了</li><li>再睡一觉，又到了晚饭</li></ul><p>—— 简直过得比以前看小说的时候都快，时间从来没这么快的！</p><p>以前有听过一个理论：</p><blockquote><p>熟悉的记忆会被大脑合并，导致产生『时间过得快』的错觉，这次春节确实有这种感觉。</p></blockquote><p>仔细想想，春节本来还打算利用这些时间加深学习的，结果似乎也没干多少事：</p><ol><li>收尾批量图片处理工具</li><li>又玩了《三国志幻想大陆》—— 不得不说，这游戏的回归福利太好了，送得像破解版似的，当然回归时间过了就没了</li><li>1 月 26~27 号补番看了《致不灭的你 2》、《世界顶尖的暗杀者 - 转生为异世界贵族》、《野良神》</li></ol><p>也就是说，春节花了几天把 <a href="/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/" title="开发一个批量图片处理工具">开发一个批量图片处理工具</a> 姑且收尾之后，就一直拖着了。</p><hr /><p>今天是 1 月 30 日，眼看着一月份就要过去了，还是整理一下，把总结写了罢。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>又是一年，2022 年就这样过去了，来到了 2023 年。</p><p>去年做了什么呢？</p><h2 id="生活上"><a class="anchor" href="#生活上">#</a> 生活上</h2><p>游戏上玩了：</p><ol><li>《幻塔》台服</li><li>《三国志幻想大陆》(年底刚回坑玩了下)</li></ol><p>小说：</p><ol><li>信息全知者 (没看完，太长了)</li><li>银河系殖民手册</li><li>天道方程式</li><li>我的成神日志</li></ol><p>小说就看了这么几本？</p><p>感觉当然不止，只是从头看完的，还觉得可以的大概就这几本了。</p><p>最后的成神日志写了一个靠 “学习” 把一切都研究透彻的故事，虽然必然夸大其词 —— 毕竟是小说，不过总感觉让人也对追求知识有所期待了。</p><p>后面暂时就不打算看小说了 (其实自动去年评审后基本就没看了)。<br />小说虽然容易让大脑满足幻想，但也有可能覆盖显示记忆的缺点，大概就是那种以感性换理性的感觉，『过犹不及』，如果想继续前进，就不大容幻想，还是要回到理性上来，以后什么时候想歇歇了再说吧。</p><hr /><p>还有就是，跟妹妹介绍的对象  <code>晚安晚安早安</code>  地发了一年之后，前段时间也终于没有再聊了 —— 网聊确实很难，开始那段时间确实心情挺激动的样子，想象着对方的样子。<br />不过久了之后就感觉越来越难以为继了，特别是我们性格都是那种... 难以主动表达自己的人 —— 一年了，甚至我们除了一开始之外，都没有语音过、更别说什么视频了。连对方的样子说实话，都没有任何印象。</p><p>国庆时候回去看了一下，不过只见了一面对方就回老家去了，作为脸盲患者，很快就又失了印象。</p><p>加上作为恐婚者，难以想象怎么样与另外似乎『陌生人』人共同生活。那段时间工作也不顺利，买的基金也巨亏，慢慢就淡了。</p><p>虽然家里人劝起来有时候感觉危机... 一般听得最多的就是，现在年轻，但是老了怎么办？但确实恐惧、害怕、担心，总让人想起以前，小学、初中、高中...<br /> 一个人就不用担心了。</p><h2 id="工作上"><a class="anchor" href="#工作上">#</a> 工作上</h2><p>自从开始接手现在 汉室复兴 项目以来，也有一年多了 —— 还记得前年刚接手的时候，给组员开周会都紧张得背上冒汗，到逐渐能比较完整传达意思，明明感觉比以前光做功能时进步更大。</p><p>而且在此期间除了大功能开发之外，基本上都亲力亲为地去搞，同时在这期间以优化项目总体上进行研究新技术，试图应用于项目本身。</p><p>比如意图升级项目，然后采用 Huatuo (HybridClr) 方式进行代码热更 —— 想象以后要是跟策划运营说：『需求你们随便提，版更都不用出整包，直接可以功能热更』就感觉有点激动呢！</p><p>过去的一年大概是工作积极性最高的。</p><p>当然，虽然是项目主程了，也不能为所欲为... 被更上级阻止了，被批评忽视了项目安全和稳定性 —— 虽然我觉得自己已经够稳了，测试都是在无关紧要分支上做的。当时费功夫升级后，又花时间『<a href="/2022/08/31/%E5%85%B3%E4%BA%8E%E4%BB%8EUnity2021%E9%99%8D%E7%BA%A7%E4%B8%BAUnity2018%E7%9A%84%E9%97%AE%E9%A2%98/" title="降级">降级</a>』，现在那个分支版本可以说是都已经被『放弃』了。</p><p>于是只能说，以后会把自我学习放在首位，项目以稳定性为准，维护好项目。</p><h2 id="学习上"><a class="anchor" href="#学习上">#</a> 学习上</h2><h3 id="底层基础知识的深入"><a class="anchor" href="#底层基础知识的深入">#</a> 底层基础知识的深入</h3><p>之前老是去搞宏观上的技术研究，能不能用上不说 —— 却因为项目开发过程中用不到就忽略忽视了对基础知识的深入了解和研究以及复习，并且没有作系统的总结，导致知识分散，都是点，无法形成面，不能统合所学知识，甚至清晰明确地表达出来。—— 这样也导致碰到问题，全凭经验解决，问如何解决的？就难以适时找出合适的回答。</p><p>特别是底层知识点，不能因为平时用不上，就只做理论上了解，理论了解再多，想错了那就全错了，必须得实践 —— 自己创建测试工程，一一尝试，才能明白究竟哪里理解得不对，哪里有偏差，及时反应过来并正确理解。当足够深入，平时想不到的做法或许就有启发？</p><h3 id="还有项目功能设计总结"><a class="anchor" href="#还有项目功能设计总结">#</a> 还有项目功能设计总结</h3><p>知道跟说出来是两回事，除了本身了解，还得想象如何才能明确表达，问急了直接说不知道是不行的。</p><p>例如之前评审时问的登录功能，解析登录数据的排序如何？控制顺序字段数组里加字段都不是一次两次了，结果直接按照普通接口解析规则回答，回答顺序控制由后台决定..... 虽然后面的是按照项目回答的，但是第一步就错了就给人一种是不是乱说的感觉？所以说做功能不止做完就完了，还得记住为什么才行，说不出来的经验谁当真呢。</p><h3 id="另外纯理论知识也需要更多的补充同时结合实践理解"><a class="anchor" href="#另外纯理论知识也需要更多的补充同时结合实践理解">#</a> 另外，纯理论知识也需要更多的补充，同时结合实践理解</h3><p>平时还是在开发应用层面花的时间多了（而且还没法把这些 “应用” 清晰明确地逻辑讲出来）。</p><ul><li>例如战斗系统<br />从《九州缥缈录》——18 年还是 19 年开始就一直在搞战斗系统，当被问到 如何设计一个高性能战斗系统？ 的时候，竟然不知道从何说起 —— 这虽然跟当时实在是脑袋太昏有点关系，但更多也是因为平时只在单纯做，实现策划功能，却没有认真去思考框架设计有关系。</li></ul><p>给一个需求单，然后给几天慢慢想肯定能能给出一个完整的解决方案，要求当时立即说出来.... 那实在是难反应过来 —— 总感觉自己的脑袋比较笨，即时反应能力很弱。平时也该更多地思考。</p><h3 id="其次对算法技能也不够敏感需要加强算法锻炼"><a class="anchor" href="#其次对算法技能也不够敏感需要加强算法锻炼">#</a> 其次对算法技能也不够敏感，需要加强算法锻炼</h3><h3 id="最后关于写文章"><a class="anchor" href="#最后关于写文章">#</a> 最后，关于写文章</h3><p>之前的自我学习的时候也确存在缺点，比较浮于表面，而且写文章也太啰嗦了，长篇大论后自己都不想看，所以后面我开始有意识在文章末尾加上『总结』：至少把重点最后标注出来</p><p>当然感觉写文章本身的时候该是也需要优化一下，写明白主要点就够了，提及重点 —— 毕竟写技术文章主要就是给自己看，太过于长篇大论，浪费时间不说，后续自己都不喜欢看也没意义。</p><p>嗯... 文章排版也需要学习下，就算用 Markdown，也总感觉跟其他人的有很大差距，不够美观，组织还难看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;今年春节本来也没回家，就打算把总结写一下的。然后不知怎么拖延症又上来了，加上春节放假前几天不知怎么，嘴里也开了个口子，吃东西都疼，心情也难以好起来。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="总结" scheme="https://wangjiaying.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://wangjiaying.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>开发一个批量图片处理工具</title>
    <link href="https://wangjiaying.top/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://wangjiaying.top/2023/01/21/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2023-01-21T11:37:15.000Z</published>
    <updated>2023-02-04T06:15:27.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>想做这个的原因有两点：</p><ol><li>Unity 的各项压缩格式，除 RGB 不压缩及 ASTC，基本都只支持 POT 分辨率的图，但是美术给的图相当不合规范</li><li>最近在给自己博客换了主题，因为 Shoka 随机壁纸采用的<s>新浪图床</s>也不再提供服务，想着直接把随机图片托管到 GitPages 算了，GitPages 的速度大家都知道，这就涉及到一个尽量压缩少大小，以期减少加载时间的问题</li></ol><p>之前直接在 Unity 里边写过一个小脚本，可以批量一键将图片『截取』为指定分辨率。</p><p>由于利用的是 Unity  <code>Texture2D</code>  类，这个类提供的处理方式很简单粗暴：直接按像素设置。所以只能做到 『截取』功能，没法做到『缩放』。</p><p>比如一个图片是  <code>1920x1080</code> ，如果想将其分辨率改成  <code>1280x720</code> ，得到的恐怕就只是这张图片其中的 <code>一部分</code> 了，例如：上半部分一小块、中间部分一小块，然后形成低分辨率。</p><p>如图所示：<br /><img data-src="/blogimages/2023/2023-01-21/m_70ba3b13a8846f219547f93a05ccf5b3_r.jpeg" alt="" /></p><p>也就是说  <code>Texture2D</code>  只能单纯『截取』，而且中间可能还会涉及到获取分辨率与设置分辨率差异量过大导致越界异常等问题。</p><p>昨天晚上回家后，查到 C# 其实就提供了对应的处理方法，可以利用  <code>System.Drawing.Image</code> 、 <code>System.Drawing.Graphics</code>  进行缩放操作，然后简单用  <code>UnityEditor</code>  写了个工具，可以根据图片宽度进行『截取缩放』，而非之前  <code>Texture2D</code>  那样单纯只能截取。</p><p><img data-src="/blogimages/2023/2023-01-21/m_f820f6115247ad9088a9c7abebe2a930_r.png" alt="" /></p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GUIStyle</span> _style<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesWindow"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        _style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUIStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token generic-method"><span class="token function">GetWindow</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TexturesCutWindow<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _path<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 截取中间部分</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _isCutCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 截取分辨率</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Vector2Int</span> _cutPixels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"选择"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            _path <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFolderPanel</span><span class="token punctuation">(</span><span class="token string">"选择一个待处理文件夹"</span><span class="token punctuation">,</span> _path<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span><span class="token string">"目录："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            _style<span class="token punctuation">.</span>normal<span class="token punctuation">.</span>textColor <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token string">"请选择一个目录！"</span><span class="token punctuation">,</span> _style<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">else</span> GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        _isCutCenter <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"截取中间部分"</span><span class="token punctuation">,</span> _isCutCenter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        _cutPixels <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Vector2IntField</span><span class="token punctuation">(</span><span class="token string">"分辨率"</span><span class="token punctuation">,</span> _cutPixels<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"截取"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>_path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayDialog</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个目录！"</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token function">CutTestures</span><span class="token punctuation">(</span>_path<span class="token punctuation">,</span> _isCutCenter<span class="token punctuation">,</span> _cutPixels<span class="token punctuation">.</span>x<span class="token punctuation">,</span> _cutPixels<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isCenter<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> height<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"*.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"_CutResult_CenterPixel_"</span> <span class="token operator">+</span> isCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> texPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> texNum <span class="token operator">=</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> texNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            texPath <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"处理中："</span> <span class="token operator">+</span> texPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>texNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token function">ZoomImage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"处理完毕："</span> <span class="token operator">+</span> texPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token comment">// 等比例缩放图片</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Bitmap</span> <span class="token function">ZoomImage</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bitmap<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> destWidth<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> destHeight<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">try</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Image</span> sourImage <span class="token operator">=</span> bitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token class-name">Bitmap</span> destBitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Graphics</span> g <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>destBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            g<span class="token punctuation">.</span>CompositingQuality <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>CompositingQuality<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            g<span class="token punctuation">.</span>SmoothingMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>SmoothingMode<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            g<span class="token punctuation">.</span>InterpolationMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>InterpolationMode<span class="token punctuation">.</span>HighQualityBicubic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token comment">// 尝试以宽度为基准，截取缩放</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>sourImage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sourImage<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> sourImage<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span>destWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>destHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> GraphicsUnit<span class="token punctuation">.</span>Pixel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>            sourImage<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            <span class="token keyword">return</span> destBitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">catch</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这种方式实现的话，可以以图片宽度为基准，再确定是否截取高度，或者不足填充透明度 —— 也就是说支持基于宽度的缩放。</p><p>如图所示，是将  <code>1920x1200</code>  缩放至  <code>700x300</code>  分辨率：<br /><img data-src="/blogimages/2023/2023-01-21/m_3b66b8ee697959d44ac5ae453d8cba7e_r.jpeg" alt="" /></p><p>后来一想：为啥不直接写成一个通用的工具，每次使用还得打开 Unity 么？<br />而且做成工具后，还可以根据需求，截取完毕后作一条龙处理：后续转其它例如 WebP 之类的格式。</p><h1 id="需求"><a class="anchor" href="#需求">#</a> 需求</h1><p>由于项目存在大量 NPOT 图片，导致压缩格式难以生效，大量图片实际处于 RGBA32 模式，且 Unity 自带的 POT 缩放会导致变形 (Sprite 也无法使用) 因此想要实现一个通用的 WPF 工具，可以大批量将图片正确重新缩放为 2N 次方或其它模式的工具，至少包含以下功能：</p><ol><li>批量处理图片</li><li>直接缩放图片，完全将旧图缩放至新分辨率，不拉伸，不足处使用透明度填充</li><li>基于宽度或高度缩放图片，不足处裁剪</li><li>基于图片当前分辨率，缩放至最接近的 2N 次方分辨率，可选是否将宽高缩放至一致，不足以透明度填充</li><li>可以设定 X、Y 偏移量，丢弃偏移量之前的像素</li><li>可以直接选择最终存储格式，使其可以当做一个格式转换器使用</li><li>可以事先预览各个选项造成的结果</li></ol><h1 id="研究"><a class="anchor" href="#研究">#</a> 研究</h1><p>于是在网上先是以  <code>C# 图片处理库</code>  这种关键字查了下</p><p>找到了一个 <span class="exturl" data-url="aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2RvdG5ldC9uZXQtY29yZS1pbWFnZS1wcm9jZXNzaW5nLw==">net-core-image-processing</span> 的文章（对应翻译 <a href="https://zhuanlan.zhihu.com/p/25928777">【渣翻译】.NET Core 图片处理<br /></a>）</p><p>最后选中了  <code>ImageSharp</code>  这个图像处理库，不为什么，就因为它是纯 C# 实现，感觉可能更方便。</p><p>Git 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NpeExhYm9ycy9JbWFnZVNoYXJw">ImageSharp</span></p><h1 id="问题"><a class="anchor" href="#问题">#</a> 问题</h1><p>在使用 WPF 过程中碰到了不少问题，毕竟以前虽然有用过，但都是简单用用，没有深入研究。</p><p>这次想实现一点 高级特性 功能就感觉不够用了，碰到了不少问题。</p><p>然后越记录越多，因此还是新开一个文档记录了，具体在：使用 WPF 问题记录</p><h1 id="缩放方式"><a class="anchor" href="#缩放方式">#</a> 缩放方式</h1><p>目前准备支持选择的缩放方式如下：</p><ul><li>不缩放：不会改变原本分辨率</li><li>直接缩放：直接缩放为设置的分辨率，不足之处直接拉伸，会造成变形</li><li>比例缩放：将原图缩放至指定分辨率时尽量保持比例不变，多余处填充透明度</li><li>比例裁剪：以高度或宽度最大者为基准进行缩放，尽量保持比例不变，多余处直接裁剪</li><li>基于宽度：以宽度为基准进行缩放，高度不足则以透明度填充，高度超过之处则裁剪</li><li>基于高度：以高度为基准进行缩放，宽度不足则以透明度填充，宽度超过之处则裁剪</li><li>填充缩放：如果图片小于设定分辨率，则不改变图片原有像素大小，不足之处以透明度填充；如果图片大于设定分辨率，则比例缩放</li><li>POT 缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处进行透明度填充</li></ul><h2 id="直接缩放"><a class="anchor" href="#直接缩放">#</a> 直接缩放</h2><p>直接将原分辨率拉伸填满设定的新分辨率，会造成拉伸变形，实现要也是最简单的，直接调用接口默认就是这种模式。</p><h2 id="比例缩放"><a class="anchor" href="#比例缩放">#</a> 比例缩放</h2><p>自动基于高度或宽度，保持比例不变的情况下缩放至新图。</p><p>分析：</p><p>既然是保持比例不变，那么首先需要计算出原图的比例。</p><p>例如原图为  <code>720x1280</code>  需要缩放至  <code>1280x720</code> :</p><p><img data-src="/blogimages/2023/2023-01-21/m_2b8041e6dc4de2ab9dd4e77af924ffa2_r.png" alt="" /></p><ul><li>原始比例为：720/1280=0.5625</li><li>保持不变的情况下，若基于宽度，则高度为：1280/0.5625=2275</li><li>保持不变的情况下，若基于高度，则宽度为：720x0.5625=405</li><li>由于此时基于宽度的情况下，高度将会越界，因此只能选择基于高度</li><li>即新的分辨率为：405x720</li><li>像素复制开始位置为：(1280-405)/2,(720-720)/2</li></ul><p>基本代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 先计算原图比例</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">float</span></span> scaleRatio <span class="token operator">=</span> image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 再按照比例映射至新图时，什么分辨率合适</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 保持不变的情况下，若基于宽度</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">/</span> scaleRatio<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 保持不变的情况下，若基于高度</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">*</span> scaleRatio<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 新的正确比例情况下，哪个正确不越界</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>newHeight <span class="token operator">></span> data<span class="token punctuation">.</span>Height<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 基于宽度，新的高度越界了那么，取基于高度</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    newHeight <span class="token operator">=</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 基于高度，新的宽度越界了那么，取基于宽度</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    newWidth <span class="token operator">=</span> data<span class="token punctuation">.</span>Width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>startX <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">-</span> newWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>startY <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">-</span> newHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>效果如下：</p><p><img data-src="/blogimages/2023/2023-01-21/m_bcd51791799f9a3a1bb7f81a487e5ce5_r.png" alt="" /></p><hr /><p>当做完这个效果之后，点进去看了下接口，结果发现了如果采用  <code>ResizeOptions</code>  作为参数传递，有一个  <code>ResizeMode</code>  的枚举：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">//     Provides enumeration over how the image should be resized.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResizeMode</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//     Crops the resized image to fit the bounds of its container.</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Crop<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">//     Pads the resized image to fit the bounds of its container. If only one dimension</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//     is passed, will maintain the original aspect ratio.</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        Pad<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//     Pads the image to fit the bound of the container without resizing the original</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">//     source. When downscaling, performs the same functionality as SixLabors.ImageSharp.Processing.ResizeMode.Pad</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        BoxPad<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">//     Constrains the resized image to fit the bounds of its container maintaining the</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">//     original aspect ratio.</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        Max<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">//     Resizes the image until the shortest side reaches the set given dimension. Upscaling</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">//     is disabled in this mode and the original image will be returned if attempted.</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        Min<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">//     Stretches the resized image to fit the bounds of its container.</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        Stretch<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 摘要:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token comment">//     The target location and size of the resized image has been manually set.</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        Manual</pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>... 感觉看着有点不对劲，是不是又造轮子了？这个功能是  <code>ImageSharp</code>  就有的么...</p><p>然后稍微研究了下，好像真的是提供了基础的缩放设定的... 只是之前我一直使用普通传参方式调用，导致才发现这么个接口。</p><p>不过后续研究了下发现，自带的接口  <code>Pad/BoxPad</code>  确实类似的于上述我实现的缩放模式，不过仅限于缩小时，当指定分辨率比图更大时，自带的接口不会缩放图片大小，而是直接填充透明度 —— 这样功能更类似于  <code>填充缩放</code> ，对比结果：</p><p><img data-src="/blogimages/2023/2023-01-21/m_15956b46e6ea54dcb2c30926f64fedec_r.png" alt="" /></p><p>左边是我实现的方法，右边是自带的  <code>Pad/BoxPad</code>  模式。</p><p>于是比例缩放还是用自己方法，填充缩放则直接调用  <code>ImageSharp</code>  接口了。</p><h2 id="比例裁剪"><a class="anchor" href="#比例裁剪">#</a> 比例裁剪</h2><p>直接使用 Imagesharp 的  <code>Crop</code>  模式</p><h2 id="基于宽度高度"><a class="anchor" href="#基于宽度高度">#</a> 基于宽度 / 高度</h2><p>与上面自定义的算法其实是一样的，只是固定为宽度或高度为准，不再判断哪个边更『长』</p><p>基于宽度，就是把宽度当做不变的值，根据原图比例，重设新的宽度下的高度值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> EScaleMode<span class="token punctuation">.</span>WidthBase<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 基于宽度，计算新的高度</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">-</span> newHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>基于高度，把高度当做不变的值，根据原图比例，重设新的高度下的宽度值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> EScaleMode<span class="token punctuation">.</span>HeightBase<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 基于高度，计算新的宽度</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> newWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Height <span class="token operator">*</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ResamplerAlgorithm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Width <span class="token operator">-</span> newWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="pot缩放"><a class="anchor" href="#pot缩放">#</a> POT 缩放</h2><p>POT 指的 Power of two，即 2N 次方，即需求是计算 <strong>计算与指定数值最接近的 2N 次方</strong></p><p>Unity 里边除了 ASTC 外，其它压缩格式均要求 POT 分辨率格式的图片</p><p>Unity 本身其实也自带了 POT 缩放的选项，不过它只是单纯拉伸图片，使其撑满缩放后的分辨率，会造成变形。</p><p>这里我则是想实现不拉伸的缩放：高宽缩放至最接近 2N 次方的分辨率，尽量保持比例不变，不足处进行透明度填充</p><h3 id="缩放计算"><a class="anchor" href="#缩放计算">#</a> 缩放计算</h3><p>这里计算最接近 2N 的方式大概有 3 种：</p><ul><li>除二计算 (自顶向下)</li><li>乘二计算 (自底向上)</li><li>二进制操作</li></ul><p>其中二进制操作是在网上看到的方法</p><h4 id="除二计算"><a class="anchor" href="#除二计算">#</a> 除二计算</h4><p>指定数字 X 不断除二，直到 X 不再大于 0，期间计算了 N 次，那么 2N 次方就是最接近 X 的 POT 数。</p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">do</span> <span class="token punctuation">&#123;</span> x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">Print</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="乘二计算"><a class="anchor" href="#乘二计算">#</a> 乘二计算</h4><p>跟上一种方式类似</p><p>不过是从下往上判断，2 不断往上乘，直到获得的数值超出了 X</p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1080</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 若取比 X 更小的 2N 数值</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//n-=1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">Print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这种方式有个缺点，原因是由于采用比较方式，原数值并未参与 <code>计算</code> ，测了一下大概是：只能取比 X 大的或者比 X 小的 POT 数值，并不能取到  <code>最接近</code>  的 2N 数值。</p><h4 id="二进制操作"><a class="anchor" href="#二进制操作">#</a> 二进制操作</h4><p>这是在网上看到的一种方法，通过位移计算：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token comment">// 比 X 小的 2N 数值</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token keyword">return</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>缺点与 乘二计算 一致，只能取比指定数字 X 更大，或者更小的 2N 数值（除非再增加额外判断或者改造）</p><p>实现方式感觉很巧妙，于是简单分析了下，以数字 100 为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//1100100</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 110010</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//  11001</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//    110</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//      0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111011</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111111</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//111111</span></pre></td></tr></table></figure><p>可以发现，100 直接转二进制是有 7 位的，</p><ul><li>当右移一位后，变成了 6 位</li><li>右移二位后，变成了 5 位</li><li>右移四位后，变成 3 位</li><li>右移八位后，变成 1 位 0 (这是因为 100 太小了)</li></ul><p>每次或运算，都会使得对应位数变成 1，最后会使得整个二进制全部变成 1，即 『 <code>1111111</code> 』(长度以右移一位为准)，同样的位数全部为 1 肯定会比原值更大，不过这种格式转为十进制后，是  <code>2N-1</code> ，因此 + 1 之后就变成『 <code>10000000</code> 』这种格式转为十进制即为 2N</p><hr /><p>上面的分析是否准确呢？</p><p>其实，恰好因为我选的数字是 100，才造成了这种  <code>看似正确</code>  的结果，实际上是 <code>有误</code> 的。</p><p>仔细看原算法，每次  <code>或运算之前</code> ，x 的值都是之前的修改过的值基础上进行，而在上述使用 100 为例的分析中，打印的都只是 100 直接位移之后的二进制值。</p><p>如果换一个数字，例如  <code>128</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">|</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token operator">|</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"1101000"</span></pre></td></tr></table></figure><p>是吧，完全乱了。</p><p>如果想依照这种算法计算，那么每次位移递增都只能是 1 位，而非 2N 递增。</p><p>之所以能够 2N 递增的原因是，与前值进行位移后，就包含了之前的</p><p>例如，还是以 128 为例：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">128</span><span class="token operator">=</span>      <span class="token string">"10000000"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"10000000"</span><span class="token operator">|</span><span class="token string">"1000000"</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11000000"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"11000000"</span><span class="token operator">|</span><span class="token string">" 110000"</span><span class="token punctuation">(</span><span class="token number">11000000</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11110000"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token string">"11110000"</span><span class="token operator">|</span><span class="token string">"  1111"</span><span class="token punctuation">(</span><span class="token number">11110000</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11111111"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token string">"11111111"</span><span class="token operator">|</span><span class="token string">"     0"</span><span class="token punctuation">(</span><span class="token number">11111111</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"11111111"</span></pre></td></tr></table></figure><p>因为每次或运算都是在前者基础上进行，因此可移动的位数是倍增的，在二进制位移层面上，倍增的表现就是以 2N 递增。</p><ul><li>第一次移动 1 位 (变成 2 个单位)</li><li>第二次移动 2 位 (变成 4 个单位)</li><li>第三次移动 4 位 (变成 8 个单位)</li><li>第四次移动 8 位 (变成 16 个单位)</li></ul><p>当然，由于这里 128 本身只有 8 位，右移 8 位 后结果直接为 0，因此实际到第三次移动时就已经确定了结果，第四次属于无效操作。</p><p>所以在上面的算法中，最高右移 8 位，即代表最高支持 2^16 次方数值：65535 及以下</p><p>测试结果很简单，加上打印，并传入 65536：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>     x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>     <span class="token function">Print</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>     <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">.</span>     <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"10000000000000000"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"11000000000000000"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token string">"11110000000000000"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token string">"11111111000000000"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">"11111111111111110"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token string">"11111111111111111"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">131071</span></pre></td></tr></table></figure><p><code>65536</code>  的下一个 2N 应该是  <code>131072</code> ，这里计算出来直接少了一位了。</p><p>同理可得加上第四次移动  <code> x &gt;&gt; 16</code> ，理论上最大可以支持  <code>2^32</code>  次方。</p><h3 id="采用算法"><a class="anchor" href="#采用算法">#</a> 采用算法</h3><p>考虑了一下，决定使用位运算的方式，毕竟这看着就比前两种暴力算法厉害。</p><p>另外，由于我这里是对分辨率的修改，没有那么高的数值需求 —— 至少感觉不可能有那么大的分辨率，因此最多移动四次即可。</p><p>最后再加上接近判断，就可以弄出三个函数分别代表  <code>最接近</code> 、 <code>更小</code> 、 <code>更大</code> ，与 Unity 提供的 POT 缩放模式一致：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/// 计算给定数值的 POT（根据缩放模式返回给定数值接近的 2N 数值）</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/// 最大支持 65535</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalcPot</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name">EPotMode</span> mode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> oldX <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    x <span class="token operator">|=</span> x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> minPot <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToNearest<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token comment">// 判断哪个更接近 X</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">return</span> x <span class="token operator">-</span> oldX <span class="token operator">></span> oldX <span class="token operator">-</span> <span class="token class-name">minPot <span class="token punctuation">?</span></span> minPot <span class="token punctuation">:</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToLarger<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token comment">// 比 X 大的 2N 数值</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">case</span> EPotMode<span class="token punctuation">.</span>ToSmaller<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token comment">// 比 X 小的 2N 数值</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">return</span> minPot<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 出问题了？</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> oldX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bool字节对齐"><a class="anchor" href="#bool字节对齐">#</a> Bool 字节对齐</h2><p>在重构代码，以使枚举可以更方便支持 WPF 数据绑定时，我采用了扩展函数的形式，并对数据进行了缓存。</p><p>由于定义的结构体，特意注意了一下字节对齐，发现 1 个 bool 变量 + 2 个指针变量是 24 个字节</p><p>再增加一个 bool 变量也是 24 个字节，但加到 3 个就不对了，变成了 32 个字节。</p><p>然后就单独分析了下，直接调用  <code>sizeof</code>  确实是 1 个字节，但放结构体使用  <code>Marshal.SizeOf</code>  就变成 4 个字节了：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">bool</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">></span> <span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">CacheData</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>     <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> IsAddFirstName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">></span> Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CacheData</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">4</span></pre></td></tr></table></figure><p>其实，不只是放结构体， <code>Marshal.SizeOf</code>  直接获取到的大小就是 4 个字节：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">bool</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">4</span></pre></td></tr></table></figure><p>其它比如  <code>Char</code>  类型，sizeof=2，Marshal.SizeOf=1</p><p>以前还没注意到，这里需要注意下。</p><h2 id="可空类型泛型模板需要返回-null-值问题"><a class="anchor" href="#可空类型泛型模板需要返回-null-值问题">#</a> 可空类型泛型模板需要返回 Null 值问题</h2><p>在扩展枚举之后，又有一个新的需求：因为 ImageSharp 中的自动检测设置采用的可空类型，若类型为空则自动检测。</p><p>为了顺应同样的规则，Wrap 设置我也一样定义为了可空类型</p><p>然后我有一个函数，可以将下标转枚举，第一位是后期加上的一个字符串名字『自动』，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_2137b911f5a7d60bdeb9c66a43c9851e_r.png" alt="" /></p><p>这个『自动』并非枚举中的值，当使用者选择『自动』时，我会将对应枚举变量设置为空 —— 因此就有了一个问题：可空类型的模板方法，如何返回空值？</p><p>直接  <code>return null</code>  会报错并提示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_ae323d03b08e0f2c2a61e9553a364efc_r.png" alt="" /></p><p>解决方式很简单 (虽然花了点时间)</p><p>顺应可空了类型本身的实现原理去分析了下：我们都知道可空类型本身是  <code>Nullable</code>  的二次封装，那么是否可以返回  <code>Nullable</code>  类型以解决这个问题？</p><p>如果想要  <code>return new Nullable&lt;T&gt;()</code> ，泛型约束必须加上  <code>struct</code> ，如下所示：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">IndexToEnumNullable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAddFirstName <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> addFirstName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span><span class="token punctuation">,</span> <span class="token class-name">Enum</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">CacheData</span> data <span class="token operator">=</span> <span class="token function">GetCacheNames</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> isAddFirstName<span class="token punctuation">,</span> addFirstName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Names<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Nullable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试了下，外部接收者可空类型枚举确实变成  <code>null</code>  了</p><p>然后我又试了下，其实加上  <code>struct</code>  的泛型约束后，直接返回  <code>null</code>  也是可以的。</p><h1 id="最后"><a class="anchor" href="#最后">#</a> 最后</h1><p>现在是 2023 年 1 月 21 日，春节的前一天，除夕。这两天断断续续把最后的多线程批量处理功能加上去了，第一版暂且就这样了：</p><p><img data-src="/blogimages/2023/2023-01-21/Snipaste_2023-01-21_19-51-37.jpg" alt="" /></p><p>对比了一下起初自己提到的各个需求，除了偏移功能，应该也都完成了：</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true" /><label for="cbx_0"> 批量处理图片</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true" /><label for="cbx_1"> 直接缩放图片，完全将旧图缩放至新分辨率，不拉伸，不足处使用透明度填充</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true" /><label for="cbx_2"> 基于宽度或高度缩放图片，不足处裁剪</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true" /><label for="cbx_3"> 基于图片当前分辨率，缩放至最接近的 2N 次方分辨率，可选是否将宽高缩放至一致，不足以透明度填充</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true" /><label for="cbx_4"> 可以设定 X、Y 偏移量，丢弃偏移量之前的像素</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked="true" disabled="true" /><label for="cbx_5"> 可以直接选择最终存储格式，使其可以当做一个格式转换器使用</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" checked="true" disabled="true" /><label for="cbx_6"> 可以事先预览各个选项造成的结果</label></li></ul><p>另外批量处理图片采用多线程处理 —— 同时开启处理量取决于 CPU 核心数目，以后也会会加个自定义数量？</p><hr /><p>在开始弄之前，可没想到会花这么长时间 —— 其实大多数时间都花在搞 UI 上去了... 做实际处理逻辑的功能虽然也花时间，但相比下来就不算什么了。</p><p>今年也没回家，今天已经是除夕了，先把功能收尾了。暂且这样吧，后边自己试用过后再看有没有想完善的再完善下。</p><p>最后，项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvQmF0Y2hUZXh0dXJlTW9kaWZpZXIuZ2l0">GitHub</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;想做这个的原因有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unity 的各项压缩格式，除 RGB 不压缩及 ASTC，基本都只支持 POT 分辨率的图，但是美术给的图相当不</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://wangjiaying.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>使用WPF开发时问题记录</title>
    <link href="https://wangjiaying.top/2023/01/21/%E4%BD%BF%E7%94%A8WPF%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangjiaying.top/2023/01/21/%E4%BD%BF%E7%94%A8WPF%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-21T11:37:04.000Z</published>
    <updated>2023-01-22T03:54:34.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>之前本来是跟 开发一个批量图片处理工具 写一块的，用于记录使用 WPF 开发那个工具时，过程中碰到的各种问题，后来发现越记录越多，还是新开一个文档记录了。</p><h1 id="问题记录"><a class="anchor" href="#问题记录">#</a> 问题记录</h1><p>说实话，UI 问题反而是最多的</p><h2 id="枚举文件"><a class="anchor" href="#枚举文件">#</a> 枚举文件</h2><p>使用  <code>Directory.EnumerateFiles</code>  比  <code>Directory.GetFiles</code>  更好，包括内存及可开始处理的时间，因为前者通过迭代器返回，后者必须一次性全部搜集完成才能返回值。</p><p>例如目录下有 1000 个文件，我们实际上只需要取其中一个，枚举的方式就可以在取得之后直接返回，避免多余的消耗。</p><p>更多测试结果见：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL1RpcHMvNTI5ODQzOS9CYXRjaC1Qcm9jZXNzaW5nLXdpdGgtRGlyZWN0b3J5LUVudW1lcmF0ZUZpbGVz">Batch-Processing-with-Directory-EnumerateFiles</span></p><p>需要注意的是使用  <code>SearchOption</code>  会导致把无权限的文件也取出来，因此最好是配合  <code>EnumerationOptions</code>  使用。</p><h2 id="searchpattern-不支持多个匹配"><a class="anchor" href="#searchpattern-不支持多个匹配">#</a> searchPattern 不支持多个匹配</h2><p>由于图片格式是多样的，第一次碰到需要过滤多个后缀文件的情况，正常情况下  <code>*.jpg</code>  这种就行了。</p><p>以前一直以为可以用： <code>*.jpg||*.png</code> —— 实际上并不支持这种功能，要真传入这种格式直接就抛异常了，网上竟然还有说可以用这种方式的文章，不清楚怎么回事。</p><p>需要自己实现，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pattern <span class="token keyword">in</span> Filter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> Directory<span class="token punctuation">.</span><span class="token function">EnumerateFiles</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> item<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="wpf-netcore-如何调取打开目录界面"><a class="anchor" href="#wpf-netcore-如何调取打开目录界面">#</a> WPF .NetCore 如何调取打开目录界面？</h2><p>见 <a href="https://blog.csdn.net/weixin_39305029/article/details/111877602">.net core 3.1 WPF 使用 FolderBrowserDialog 对象打开文件资源管理器选择文件夹<br /></a><br />项目增加  <code>&lt;UseWindowsForms&gt;true&lt;/UseWindowsForms&gt;</code>  引用后，按照正常代码使用  <code>FolderBrowserDialog</code>  即可：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FolderBrowserDialog</span> folderDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FolderBrowserDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>folderDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    TexturesOriginPathText<span class="token punctuation">.</span>Text <span class="token operator">=</span> folderDialog<span class="token punctuation">.</span>SelectedPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打开文件则直接调用  <code>OpenFileDialog</code> ：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span> fileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>fileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    TexturesOriginPathText<span class="token punctuation">.</span>Text <span class="token operator">=</span> fileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="降低-tooltip-显示时间"><a class="anchor" href="#降低-tooltip-显示时间">#</a> 降低 ToolTip 显示时间</h2><p>在目标前添加  <code>ToolTipService.InitialShowDelay=&quot;0&quot;</code></p><p>且 ToolTip 可以支持多行：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label.ToolTip</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Label.ToolTip</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="普通组件也是可以添加事件的"><a class="anchor" href="#普通组件也是可以添加事件的">#</a> 普通组件也是可以添加事件的</h2><p>开始想将 Button 表现上设置成 Text 的样子，结果很麻烦，各种自定义样式。后来发现 Text 实际上就可以直接添加点击事件...</p><h2 id="窗口右上角按钮"><a class="anchor" href="#窗口右上角按钮">#</a> 窗口右上角按钮</h2><p>例如去掉最大化功能，在 Title 添加： <code>ResizeMode=&quot;CanMinimize&quot;</code></p><h2 id="限制只能输入数字"><a class="anchor" href="#限制只能输入数字">#</a> 限制只能输入数字</h2><p>TextBox 使用  <code>PreviewTextInput=&quot;OnPreviewTextInputLimitNumber</code>  事件：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPreviewTextInputLimitNumber</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">TextCompositionEventArgs</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>e<span class="token punctuation">.</span>Handled <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>不过这种方式只能限制英文键盘，对中文键盘就无效了... 只能说聊胜于无，这种简单的功能 WPF 都没提供吗？总感觉以前写界面的时候好像也用过，难道记错了。</p><hr /><p>最后在做输入改变时，在对应事件给代码的长宽赋值时，发现其实直接在  <code>TextChanged</code>  事件处理一次也行，例如不合法直接清空：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/// 检测 TextBox 输入是否是纯数字</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/// &lt;param name="text">&lt;/param></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CheckTextNumberInput</span><span class="token punctuation">(</span><span class="token class-name">TextBox</span> text<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>ScaleHeight<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token keyword">out</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请输入数字！"</span><span class="token punctuation">,</span> <span class="token string">"输入不合法"</span><span class="token punctuation">,</span> MessageBoxButton<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxImage<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        ScaleHeight<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>注：期间还发现有个  <code>InputScope=&quot;Number&quot;</code>  的属性，然而其实完全没什么用，不是限制输入内容的。</p><h2 id="检测目录权限"><a class="anchor" href="#检测目录权限">#</a> 检测目录权限</h2><p>.NetCore 可以通过如下方式调用  <code>GetAccessControl</code> :</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>AccessControl<span class="token punctuation">.</span>DirectorySecurity</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>folderDialog<span class="token punctuation">.</span>SelectedPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAccessControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>主要是因为  <code>Directory.EnumerateFiles</code>  枚举文件时，会把无权限的隐藏文件也给枚举出来，结果这个安全检测也不好用，改成  <code>EnumerationOptions</code>  去取文件了。</p><h2 id="bitmapimage-不支持重复利用"><a class="anchor" href="#bitmapimage-不支持重复利用">#</a> BitmapImage 不支持重复利用</h2><p>只能初始化一次，调用已添加过图片的  <code>BeginInit</code>  会直接抛出异常，也就是每次显示图片都必须重新创建一个对象。</p><p>同时  <code>BitmapImage.StreamSource</code>  对象被释放也会导致  <code>Image</code>  显示不出来。</p><h2 id="ui特性问题多"><a class="anchor" href="#ui特性问题多">#</a> UI 特性问题多</h2><p>问题真的很多，简单使用还行，要实现复杂的 UI 效果，<s>查半天都没个能用的...</s></p><p>比如数据绑定，我想把一个 TextBox 组件与类中的一个变量绑定起来，使得修改 TextBox 值对应相当于修改变量 —— 我 Unity 直接写，<s>这都是些啥跟啥，查出来的使用方式也都是要么过时、要么根本不能用的 (虽然也可能跟我版本是 WPF .NetCore 有关)。</s></p><p>感觉可能需要把流程先学习下，直接上手撸，做简单功能还行，想做点高级的特性就力不从心了。</p><p><s>下次要么就把这东西学习流程走一遍再说，要么用 WinForm，做点小东西 WPF 感觉比不上 WinForm 效率好。记得当年用 WinForm 写 Demo 速度刷刷的。</s></p><hr /><h2 id="与代码双向数据绑定"><a class="anchor" href="#与代码双向数据绑定">#</a> 与代码双向数据绑定</h2><p>昨晚回家看了下系统教程，数据与自定义类中的字段做双向 <code>数据绑定</code> 其实很简单，而且还直接支持  <code>TextBox</code>  与  <code>数值</code>  绑定，绑定后虽然不会做输入检测，不过不合法会直接在输入框外显示  <code>红框</code></p><ol><li>首先为  <code>DataContext</code>  赋值</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>DataContext <span class="token operator">=</span> _helper<span class="token punctuation">.</span>ConvertData<span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="2"><li>在  <code>ConvertData</code>  实现  <code>System.ComponentModel.INotifyPropertyChanged</code>  接口：</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TestWidth</pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            <span class="token keyword">get</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token keyword">return</span> Width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">set</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                Width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                PropertyChanged<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">"TestWidth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">event</span> <span class="token return-type class-name">PropertyChangedEventHandler<span class="token punctuation">?</span></span> INotifyPropertyChanged<span class="token punctuation">.</span>PropertyChanged</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">add</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                PropertyChanged <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">remove</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                PropertyChanged <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol start="3"><li>Xaml 处直接绑定</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ScaleWidth<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding TestWidth&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>  <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">PreviewTextInput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OnPreviewTextInputLimitNumber<span class="token punctuation">"</span></span> <span class="token attr-name">InputScope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Number<span class="token punctuation">"</span></span> <span class="token attr-name">TextChanged</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ScaleWidth_TextChanged<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr></table></figure><p>感觉还是挺好用的，了解了方法后，像之前通过主动的事件绑定实现的方式，就可以直接改成数据绑定 + 通知的模式了，而且感觉确实方便不少。<br />于是简单重构了一波代码，分离成  <code>数据+Controller+界面</code>  这种形式。</p><h2 id="格式化绑定"><a class="anchor" href="#格式化绑定">#</a> 格式化绑定</h2><p>TextBox  <code>Text</code>  使用  <code>StringFormat</code> <br />Label  <code>Content</code>  使用  <code>ContentStringFormat</code></p><p>多数据源绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MultiBinding</span> <span class="token attr-name">StringFormat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#125;啦啦啦&#123;0&#125;x啦啦啦&#123;1&#125;啦啦啦&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Width<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Height<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MultiBinding</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>但是默认提供的只支持 TextBox，其它的类型得实现  <code>IMultiValueConverter</code>  来做。</p><p>步骤如下：</p><ol><li>定义一个实现了  <code>IMultiValueConverter</code>  接口的类:</li></ol><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/// 支持非 Text 的多数据源绑定</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiContentConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiValueConverter</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token return-type class-name"><span class="token keyword">object</span></span> IMultiValueConverter<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">try</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">return</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token return-type class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> IMultiValueConverter<span class="token punctuation">.</span><span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> targetTypes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol start="2"><li>在  <code>MainWindow.xaml</code>  顶部定义  <code>Window.Resources</code> :</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>MultiContentConverter</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MultiContentConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ol start="3"><li>通过  <code>MultiBinding</code>  的  <code>Converter(转换器)</code>  及  <code>ConverterParameter(参数)</code>  指定：</li></ol><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MultiBinding</span>  <span class="token attr-name">Converter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource MultiContentConverter&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">ConverterParameter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>啦啦啦&#123;0&#125;x啦啦啦&#123;1&#125;啦啦啦<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Width<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Binding</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Height<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MultiBinding</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Label</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="与组件数据绑定"><a class="anchor" href="#与组件数据绑定">#</a> 与组件数据绑定</h2><p>与父节点绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre>Width="&#123;Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=DockPanel&#125;, Path=ActualWidth&#125;"</pre></td></tr></table></figure><p>与指定 Name 的节点绑定：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre>Width="&#123;Binding ElementName=ScaleWidth,Path=ActualWidth&#125;</pre></td></tr></table></figure><h2 id="数据绑定中进行计算"><a class="anchor" href="#数据绑定中进行计算">#</a> 数据绑定中进行计算</h2><p>这个需要用到一个插件： <code>CalcBinding</code></p><p>直接  <code>NuGet</code>  搜索就有了，有了这个就可以直接在绑定中进行计算，方便了很多。</p><p>下载后，在  <code>MainWindow.xaml</code>  最前面加上  <code>xmlns:c=&quot;clr-namespace:CalcBinding;assembly=CalcBinding&quot;</code> ，然后就可以使用  <code>c:Binding</code>  进行计算了。</p><p>例如上面组件绑定方法，如果想取自身宽度为父容器的一半，就可以这样写：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GroupBox</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>原图<span class="token punctuation">"</span></span>  <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;c:Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=DockPanel&#125;, Path=ActualWidth/2-10&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,5,5,5<span class="token punctuation">"</span></span> <span class="token attr-name">BorderThickness</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1,1,1,1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></pre></td></tr></table></figure><p>另外它还支持直接  <code>Bool</code>  变量转  <code>Visibility</code> ，例如我这有个需求是：CheckBox 勾选后隐藏另外一个组件，否则显示，就可以这样实现：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StayInputFormatToggle<span class="token punctuation">"</span></span> <span class="token attr-name">IsChecked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保留原格式<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span> <span class="token attr-name">ToolTipService.InitialShowDelay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ToolTip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在处理完毕后，保存的图片与输入格式保持一致。例如修改前是 *.png，修改后也是 *.png。<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComboBox</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OutputFormatComboBox<span class="token punctuation">"</span></span> <span class="token attr-name">Visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;c:Binding ElementName=StayInputFormatToggle,Path=!IsChecked,FalseToVisibility=Collapsed&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0,0,0<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></pre></td></tr></table></figure><p>更多操作可以看这篇文章，写得挺不错的：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxpbmRleGkuY29tL3Bvc3QvV1BGLSVFNSU5QyVBOCVFNyVCQiU5MSVFNSVBRSU5QSVFOCVBMSVBOCVFOCVCRSVCRSVFNSVCQyU4RiVFNiVCNyVCQiVFNSU4QSVBMCVFOCVBRSVBMSVFNyVBRSU5Ny5odG1s">在绑定表达式添加计算</span></p><h2 id="激活最小化后的窗口"><a class="anchor" href="#激活最小化后的窗口">#</a> 激活最小化后的窗口</h2><p>我增加了一个新窗口用于显示『更大』的图片对比效果，这个新界面只有一个作用：左边显示原图、右边显示修改后的图。</p><p>然后有个需求就是：没有打开的情况下，直接创建新窗口打开，不过已经打开的情况下，点击按钮应该是将这个界面激活至最上层。</p><p>然后就发现正常情况下  <code>Window.Activate()</code>  可以正常激活，但要是窗口已经被最小化了，那么就不行。</p><p>查了下是 WindowState 参数问题，最简单是激活前先设置为  <code>WindowState= WindowState.Normal</code>  即可。</p><p>不过这样的话，如果之前是最大化状态，重新激活后就会还原。</p><p>要是想记录原先的状态，则可以通过注册  <code>Window.StateChanged</code>  简单这样做:</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>_imageCompareView<span class="token punctuation">.</span>StateChanged <span class="token operator">+=</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=></span> _imageCompareViewState <span class="token operator">=</span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> <span class="token class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WindowState <span class="token operator">==</span> <span class="token class-name">WindowState<span class="token punctuation">.</span>Minimized <span class="token punctuation">?</span></span> _imageCompareViewState <span class="token punctuation">:</span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> <span class="token class-name">Window</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WindowState<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="dockpanel-自动拉伸对齐方式"><a class="anchor" href="#dockpanel-自动拉伸对齐方式">#</a> DockPanel 自动拉伸对齐方式</h2><p>DockPanel 默认情况下的作用是：自动排版，最后一个元素会拉伸填满剩余空间</p><p><code>剩余空间</code>  的定义其实不止是顺序排版的情况，如果对元素设置过  <code>DockPanel.Dock</code> ，那么就以设置过的元素停靠为准，最后一个元素填满剩余空间。</p><p>如下所示：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DockPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">DockPanel.Dock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">DockPanel.Dock</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DockPanel</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>如上所示，第三个  <code>StackPanel</code>  不设置  <code>DockPanel.Dock</code> ，并放在最后，那么就会直接填满中间区域。<br />(注：必须放在设置过  <code>DockPanel.Dock</code>  的最后)</p><p>上面也是我采用的方法，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-21/m_346cc0f1b5433465987b9175723976af_r.png" alt="" /></p><p>最后的  <code>关于</code>  说明靠下，设置靠上，中间对比元素则填满中间空隙。</p><h2 id="集合数据绑定"><a class="anchor" href="#集合数据绑定">#</a> 集合数据绑定</h2><p>列表类型的组件元素，不能直接绑定通用的  <code>List</code>  容器 —— 我就尝试了下，就发现当  <code>List</code>  发生变动时，绑定 UI 根本不会同时发生改变。</p><p>经过研究发现像  <code>ListBox、ListView、DataGrid</code>  这种容器类组件元素，绑定的数据源必须是 <code>可监听</code> 的，例如  <code>ObservableCollection</code>  才能正确接收集合改变时的通知。</p><h2 id="子窗口初始位置"><a class="anchor" href="#子窗口初始位置">#</a> 子窗口初始位置</h2><p>可以通过  <code>WindowStartupLocation</code>  进行控制</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">BatchProgressView</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BatchProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>view<span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>view<span class="token punctuation">.</span>WindowStartupLocation <span class="token operator">=</span> WindowStartupLocation<span class="token punctuation">.</span>CenterOwner<span class="token punctuation">;</span></pre></td></tr></table></figure><p>需要注意的是  <code>CenterOwner</code>  选项的情况下，必须设置  <code>Owner</code>  才有效，否则也是满屏乱飞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前本来是跟 开发一个批量图片处理工具 写一块的，用于记录使用 WPF 开发那个工具时，过程中碰到的各种问题，后来发现越记录越多，还是新开一个文档记录了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="工具" scheme="https://wangjiaying.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="问题记录" scheme="https://wangjiaying.top/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="WPF" scheme="https://wangjiaying.top/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>关于Shoka图床又挂了这件事</title>
    <link href="https://wangjiaying.top/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://wangjiaying.top/2023/01/01/%E5%85%B3%E4%BA%8EShoka%E5%9B%BE%E5%BA%8A%E6%8C%82%E4%BA%86%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2023-01-01T11:09:08.000Z</published>
    <updated>2023-01-02T08:33:32.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。</p><p>目前的情况是，本地调试可以，但一旦发布，那边直接就阻止访问了 —— 本地右键 -&gt; 转到 直接取访问一样会被 403 阻止，如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_19-17-32.jpg" alt="" /></p><p>不信点一点：<span class="exturl" data-url="aHR0cHM6Ly90dmEzLnNpbmFpbWcuY29tL2xhcmdlLzY4MzM5MzlibHkxZ2lwZXVpYms5ZmoyMHprMG04YXkyLmpwZw==">我也忘了这是哪张图了</span></p><p>估计被整了域名白名单之类的东西。</p><p>Shoka 随机图片的 API 使用的是 Gimhoy 提供的图床，实际上依赖于 Sina 的服务器，而且 —— 这个功能貌似是开发者自己开发的，听说是依赖于新浪微博的相册啥功能弄的，网上搜索了一下 —— 所以其实貌似根本没有『新浪图床』这么个东西，都是玩家自己整的。</p><p>而且早在 2019 年就有文章提到这个被屏蔽了，虽然不知道为啥前几天 (大概 2022 年 12 月 28 号左右) 才又挂掉 —— 反正等了几天之后，现在还是依然是挂掉的情况，满屏 403，没啥变正常的反应。</p><p>看着没办法了，想着恐怕只能放 GitPages 一块了。</p><p>还好 Shoka 是懒加载，理论上讲就算图片慢不至于影响网页本身加载速度。</p><h1 id="下载备份"><a class="anchor" href="#下载备份">#</a> 下载备份</h1><p>因为目前本地还是可以访问『新浪图床』的，这个可能也是官方留给目前白嫖图床的各位一个备份图片的机会 —— 也会后面啥时候没准也会屏蔽这个接口。</p><p>所以趁本地还能拉图片，就想着把那批图片先拉下来。</p><p>一开始想着用 js 下载，搞了半天没整好... 后边想着不如用 C# 写个小工具，顶多可能需要在请求头模仿一下  <code>http://localhost</code>  的情况。</p><p>然后试了下其实没那么麻烦 —— 随便一个本地的申请接口就是可以下载的，都不需要改什么请求头，于是简单利用  <code>HttpClient</code>  直接在 Unity 里边写了个下载代码，通过读取  <code>images.yml</code>  把里面配置的所有图片都下载下来：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">HttpClient</span> HttpRequest</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> _request<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DownloadTextures/Download"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"D:\MyOthers\JavaScripts\WebSite1\HexoBlog\Hexo\source\_data\images.yml"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 大图</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 小图</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">await</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> <span class="token string">"mw690"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoad</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> resPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"../Downloads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> localPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resPath<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 下载</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> nameList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"请求下载："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">await</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token function">GetUrl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> localPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">DownLoadFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> localPath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> HttpRequest<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsByteArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name"><span class="token keyword">string</span></span> downPicPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>localPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>downPicPath<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"==>OK："</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUrl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"https://tva"</span> <span class="token operator">+</span> randomServer <span class="token operator">+</span> <span class="token string">".sinaimg.cn/"</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token char">'/'</span> <span class="token operator">+</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> randomServer</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">get</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token keyword">return</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这些图片前几天刚失效就下载下来了，等了两天，没看到其它谁修复的 —— 网上其它使用 Shoka 主题的基本都还是满屏 403，唯一看到一个正常的还是使用的自己的 CDN。</p><p>毕竟是微博直接屏蔽了接口，觉得这次可能是真挂了。</p><h1 id="裁剪与压缩"><a class="anchor" href="#裁剪与压缩">#</a> 裁剪与压缩</h1><p>没办法，少了这些随机的背景图，就觉得缺了不少东西，加上现在感觉 GitPages 速度也还算可以，所以决定先直接放 GitPages 算了。</p><p>不过，毕竟图片不是使用 CDN 了，能减少一点最好就减少一点，免得真卡网的时候半天都在加载，也是糟糕的体验。</p><p>于是研究了下如何把这一堆图的大小尽量减少。</p><h2 id="分辨率分析"><a class="anchor" href="#分辨率分析">#</a> 分辨率分析</h2><p>目前页面上的 cover —— 即每个文章的图片分辨率通过审查元素查出来大约是  <code>643x224</code> ，实际上从新浪图床下载下来的图片，mw690 大小的至少也有  <code>690x400</code> 。</p><p>所以我们看到的图，实际能显示出来都是被『截取』过一半的，大约就只显示中间部分。</p><p>如图所示：</p><p><img data-src="/blogimages/2023/2023-01-01/Snipaste_2023-01-01_20-08-44.jpg" alt="" /></p><p>所以在分辨率这一块，应该是可以手动截取，减少原图大小的。</p><p>由于涉及到图片操作，我选择直接在 Unity 里面搞，毕竟这边有完整的操作接口，以前也有用过。</p><p>同时，有部分图片如果显示上半部分效果比较好，有的图片则显示中间部分比较好：虽然目前没有作处理的情况下，都是显示的中间部分，不过既然都做处理了，为何不手动调整一下？</p><p>于是简单写了两个接口：一个接取图片上半部分、一个截取图片中间部分。</p><p>当然最终实际分辨率都会是： <code>643x224</code> <br /><font color=red>注：其实不一定得要这种分辨率，审查元素查出来的分辨率其实也会跟随页面大小发生变化，只要这种比例就行了，网页显示时，宽度或高度任一不足都会被放大显示</font></p><p>代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesTop"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 截取以上半部分为准</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Textures/CutTexturesCenter"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTesturesCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 截取以中间部分为准</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutTestures</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> isCenter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> width <span class="token operator">=</span> <span class="token number">643</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> height <span class="token operator">=</span> <span class="token number">224</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> offsetHight <span class="token operator">=</span> isCenter <span class="token punctuation">?</span> height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFolderPanel</span><span class="token punctuation">(</span><span class="token string">"选择一个待处理文件夹"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"*.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token class-name">Texture2D</span> texOrigin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token class-name">Texture2D</span> texResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"_CutResult_CenterPixel_"</span> <span class="token operator">+</span> isCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> texPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> texNum <span class="token operator">=</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> texNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        texPath <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"处理中："</span> <span class="token operator">+</span> texPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>texNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        texOrigin<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">SetPixels</span><span class="token punctuation">(</span>texOrigin<span class="token punctuation">.</span><span class="token function">GetPixels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isCenter <span class="token punctuation">?</span> texOrigin<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> texOrigin<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> offsetHight<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        texResult<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        bytes <span class="token operator">=</span> texResult<span class="token punctuation">.</span><span class="token function">EncodeToJPG</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>texPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>毕竟只是临时随便用用，能用就行了，就没有花时间去处理可能的异常了。</p><p>另外，重新导出的 jpg 质量我选择了 95%，要是超过这个数，体积会增加不少，特别是 100% 质量的情况下，比不截取的图也小不了多少了。</p><p>导出然后挑挑拣拣把合适的放一块合并起来，就形成最后的结果了。</p><h2 id="转化-webp"><a class="anchor" href="#转化-webp">#</a> 转化 WebP</h2><p>jpg 转为 WebP 之后，大小确实还可以进一步压缩，于是找了相关工具：竟然很少有离线软件。</p><p>基本都是在线的工具。</p><p>最后在这找到一个：<span class="exturl" data-url="aHR0cDovL3d3dy53aW53aW43LmNvbS9zb2Z0LzM2NzYzLmh0bWwjeGlhemFp">Webp 转换工具绿色版</span></p><h2 id="删除与图片随机算法修改"><a class="anchor" href="#删除与图片随机算法修改">#</a> 删除与图片随机算法修改</h2><p>因为没了图床加速，考虑了下还是决定把一部分删掉。</p><p>然后就有了一个新的问题：随机图片实际上也是在我们图片列表中随机，列表中图片减少，就意味着在同一个页面之中，出现同一张重复图片的概率会变得更高！</p><p>为了解决这个问题，我在主题随机代码上又进行了修改，以避免同一张图片随机在同一个页面。</p><p>具体随机方法在  <code>engine.js</code>  中的  <code>_cover</code>  里边，稍微修改了一下，做了个简单的缓存：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> cacheList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_cover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> statics<span class="token punctuation">,</span> js<span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>photos<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_image_url</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>photos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">let</span> bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 总图片数量大于 10，并且是文章图片才判断是否重复，num>1 表示页面头部图片吧，那个就不用处理了</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token keyword">undefined</span><span class="token operator">||</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 图片列表走过最低页数随机后，也就是基本上全部走过一轮才允许重复随机</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">let</span> maxCheckNum<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>image_list<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Math.min(30,image_list.length);</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span>length<span class="token operator">>=</span>maxCheckNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        cacheList<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">while</span><span class="token punctuation">(</span>cacheList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        bg<span class="token operator">=</span><span class="token function">randomBG</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> image_server<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      cacheList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> bg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>本来只是想试一下，没想到定义在方法块外边的缓存变量真有效，那就这样了。</p><h2 id="模糊"><a class="anchor" href="#模糊">#</a> 模糊</h2><p>一通压缩操作下来，感觉图片质量就不大行了... 加点模糊效果吧，CSS 还挺简单的，例如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#header</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">#imgs</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>1.5px<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>压缩处理步骤：</p><ol><li>降低分辨率，图片实际大小与实际使用分辨率保持一致，避免无谓浪费</li><li>降低部分质量，例如截取后存储质量我选择  <code>95%</code></li><li>WebP 化</li><li>利用 <span class="exturl" data-url="aHR0cHM6Ly90aW55cG5nLmNvbQ==">TinyPng</span> 再压一遍 (注：最后实测发现转 WebP 时压缩率高了实际上 TinyPng 也压不动了)</li><li>质量不行就用模糊什么的挡一下</li></ol><p>总之，就是在尽量『能看』的情况下，减少传输数据量，毕竟 GitPages 的速度... 谁知道什么时候快慢呢...</p><p>这么就几个步骤下来，基本上可以减少到极致了 (也许还有其它再减少大小的处理方式？如果有知道的务必留言提醒！)</p><p>今天是 <s>2023 年 1 月 1 日</s> 2023 年 1 月 2 日，我竟然在研究如何优化博客... 图片怎么处理...😥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;真的是... 前几天我才换成 Shoka 主题，这随机的图片功能还没体验两天呢，前天突然发现这 API 就挂了... 真是有点一波三折的意思。&lt;/p&gt;
&lt;p&gt;目前的</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://wangjiaying.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Mesh渲染优化与批处理</title>
    <link href="https://wangjiaying.top/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/"/>
    <id>https://wangjiaying.top/2022/12/30/Mesh%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E4%B8%8E%E6%89%B9%E5%A4%84%E7%90%86/</id>
    <published>2022-12-30T10:19:07.000Z</published>
    <updated>2023-01-01T04:25:38.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。</p><p>理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一下，方向感觉就变成 合批、优化 这块去了，于是本篇文章直接就先整理一下这一块。</p><p>首先，我们都知道由于 CPU 和 GPU 是两个不同的执行对象，所以一般问题都出在两者『数据交换』，由于 GPU 并行结构设计，通常情况都是 GPU 等待 CPU，而 CPU 干事情得一件件做，渲染一个对象就要先把一个对象的属性 (切换材质、切换贴图、设置材质属性等) 准备好，然后通知 GPU 渲染该对象，这中间通常就存在空挡。</p><p>CPU 准备数据越多，最终渲染一帧消耗时间就越长 —— 所以优化的时候，通常提到了减少 DrawCall ，也就是 CPU 去通知 GPU 渲染一个对象前这块的『准备消耗』，DrawCall 命令本身消耗不能算很高，高的是在这之前的一系列准备操作。所以说是『优化 DrawCall』这个也不决对，但是通常减少 DrawCall 确实是最明显的优化。</p><p>其它例如减少带宽、减少中间切换次数、减少向 GPU 上载数据理论上应该都可以算作减少『渲染』消耗这一块的优化 (应该)。</p><h2 id="unity-drawcall"><a class="anchor" href="#unity-drawcall">#</a> Unity DrawCall</h2><p>在 Unity 中，可以主要关注两个数据：</p><ul><li>SetPass Call<ul><li>在我们 Sahder 中可能会存在有多个 Pass，例如阴影就是单独一个 Pass 处理</li></ul></li><li>Batches<ul><li>提交一次数据并执行绘制</li></ul></li></ul><p>在 Unity 中 Batches 可以看做实际的 DrawCall。</p><p>为什么一般优化 DrawCall 是提升效率的手段？</p><p>因为上述工作原理，CPU 和 GPU 处于两个不同的硬件结构，两个硬件的数据交换是存在等待机制的，两者频繁数据交换就会导致要么你等我，要么我等你这种情况，浪费大量效率。</p><p>例如有 100 个对象需要绘制，分别每提交一个对象的材质、模型等数据就发起一次调用，就有 100 次通知 GPU 渲染的调用。<br />将 100 个对象属性一次性设置，然后统一提交再申请绘制，就只需要一次。</p><p>效率就上来了 —— 当然也会带来一些其它问题，例如剔除精度降低。</p><p>Unity 会将一些可以合并渲染命令合成一个 『Batches』， SetPass Call 可以看做渲染状态改变次数 (不同材质导致必须的渲染切换数量)，在 Unity 中 Batches 可以看做实际的 DrawCall—— 减少 Batches 不一定减少 SetPass Call，不过一般减少 SetPass Call 的都伴随着 Batches 减少。</p><h2 id="实际操作"><a class="anchor" href="#实际操作">#</a> 实际操作</h2><p>因此在实际中，一般渲染优化追求的是在 GPU 工作能力内，尽可能一次性让其绘制。</p><p>体现出来就叫做 『批处理』。</p><p>在 Unity 中，目前引擎存在的批处理通常有  <code>动态</code> 、 <code>静态</code> 、 <code>GPU Instancing</code> 、 <code>SRP Batcher</code> ，其它的例如 UGUI 也有特有的合批规则。</p><p>由于合批操作通常都有指定限制，因此平时也得注意避免出现合批中断情况。</p><p>例如，像是一些单个物体材质属性操作，就可能导致合批中断：</p><ul><li>renderer.material：调用时会创建并返回一个新的材质 (不推荐)。</li><li>renderer.sharedMaterial：材质引用，修改的话所有引用该材质对象都会受到改变。</li></ul><h3 id="materialpropertyblock"><a class="anchor" href="#materialpropertyblock">#</a> MaterialPropertyBlock</h3><p>为解决 sharedMaterial 的缺点，Unity 提供了 MaterialPropertyBlock。</p><p>这个东西可以做到跟 sharedMaterial 一样不创建成新材质对象的情况下，单独修改某个对象材质属性 (而不影响其它同材质对象)。</p><p>使用方式也很简单，直接可以在 MaterialPropertyBlock 设置与材质上同样的变量与值，然后赋值给材质。</p><p>简单使用代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MeshRenderer</span> renderrender <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">MaterialPropertyBlock</span> mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>官方称内置地形系统的树，渲染方式就是这样的，通过这种方式修改每棵树的材质属性，产生不同的颜色、缩放和风力系数等。</p><p><font color=red>注：MaterialPropertyBlock 与 URP 的 SRP Batcher 会有冲突，URP 就不要用了。</font></p><h4 id="不再受到材质属性修改影响"><a class="anchor" href="#不再受到材质属性修改影响">#</a> 不再受到材质属性修改影响</h4><p>通过这种方式设置材质参数后，将不再受到材质本身属性修改的影响，如图：</p><p><img data-src="/blogimages/2022/2022-12-30/m_bf8cd0c6fb721f2ea29f53d5fdaddfed_r.png" alt="" /></p><p>材质本身的值将始终被 MaterialPropertyBlock 属性覆盖，此时再去修改材质，材质属性的改变不再影响这个对象了。</p><h4 id="合批被打断"><a class="anchor" href="#合批被打断">#</a> 合批被打断</h4><p>经过测试，通过 MaterialPropertyBlock 设置材质属性虽然不会导致创建新的材质实例，但是却会打断合批：</p><p><img data-src="/blogimages/2022/2022-12-30/m_c84f4c09265700b27e66a030d5110323_r.png" alt="" /></p><p>经过测试，无论动态合批、静态合批，都会被打断。<br /><font color=red>注：除非设置的是同一个颜色，倒是依然能够合批</font></p><p>例如，上述是 3 个 Cube，静态合批被打断情况：设置前 -&gt; 设置后</p><p>SetPass Call 及 Batches 都增加了两个：说明 MaterialPropertyBlock 参数不同的话，依然会造成渲染状态改变。</p><h4 id="materialpropertyblock-只是一个参数携带者"><a class="anchor" href="#materialpropertyblock-只是一个参数携带者">#</a> MaterialPropertyBlock 只是一个参数携带者</h4><p>使用如下代码，仅使用一个 MaterialPropertyBlock 对象</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Renderer</span> render <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponentInChildren</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mpb <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    mpb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaterialPropertyBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>mpb<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> _color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>render<span class="token punctuation">.</span><span class="token function">SetPropertyBlock</span><span class="token punctuation">(</span>mpb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以成功『分别』设置各个对象的『不同』颜色属性，而 MaterialPropertyBlock 是一个类，说明在调用 SetPropertyBlock 底层会生成一份当前类的临时参数数据，并覆盖掉材质上的本来设置。</p><h3 id="gpu-instancing"><a class="anchor" href="#gpu-instancing">#</a> GPU Instancing</h3><p>上述采用 MaterialPropertyBlock 修改材质属性后，会打断 静态 / 动态 合批功能。</p><p>如果想进一步优化，可以采用 GPU Instancing 技术。</p><p>GPU Instancing 也有限制：</p><ul><li>只能用于 Mesh</li><li>同一个 Mesh 才能一次性绘制</li></ul><p>需要注意的是：虽然 StandardShader 有勾选 Enable GPU Instancing 选项，勾选之后也能用，但是却没法跟 MaterialPropertyBlock 配合 —— 实测设置 MaterialPropertyBlock 后 GPU Instancing 依然都会被打断。</p><p>自定义 Shader ：</p><ol><li>增加： <code>#pragma multi_compile_instancing</code>  预定义后，材质面板会出现对应的  <code>Enable GPU Instancing</code>  选项</li><li>顶点数据接收结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>顶点转片段  <code>v2f</code>  结构体定义  <code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></li><li>使用  <code>UNITY_INSTANCING_BUFFER_START</code>  定义可以进行修改的参数，例如我们修改颜色：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>float4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="5"><li>顶点处理函数中，在正常计算之前执行 Unity 提供的预定义：</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_TRANSFER_INSTANCE_ID</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 正常必须的顶点转换处理</span></pre></td></tr><tr><td data-num="5"></td><td><pre>o<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="6"><li>片段函数中，执行设置，然后获取</li></ol><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Unity 提供的预定义函数，对该对象进行设置</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UNITY_SETUP_INSTANCE_ID</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 从列表中获取该对象应当设置的属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fixed4 color <span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">return</span> color<span class="token punctuation">;</span></pre></td></tr></table></figure><p>该项对于『纯自定义 (Unlit Shader)』Shader 可能会繁琐一点，但  <code>SurfaceShader</code>  就简单些了，因为逻辑类似，这里直接上完整的  <code>SurfaceShader</code> ，也好可以做个对比：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>Shader <span class="token string">"Custom/GPUInstancingSurfaceShader"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Properties</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> <span class="token number">2</span>D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Tags <span class="token punctuation">&#123;</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        LOD <span class="token number">200</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        CGPROGRAM</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// Physically based Standard lighting model, and enable shadows on all light types</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">surface surf Standard fullforwardshadows</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// Use shader model 3.0 target, to get nicer looking lighting</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">target <span class="token number">3.0</span></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        sampler2D _MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">struct</span> <span class="token class-name">Input</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            float2 uv_MainTex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        half _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        half _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">//fixed4 _Color;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// #pragma instancing_options assumeuniformscaling</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// put more per-instance properties here</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">UNITY_DEFINE_INSTANCED_PROP</span><span class="token punctuation">(</span>fixed4<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token comment">//UNITY_SETUP_INSTANCE_ID(IN);</span></pre></td></tr><tr><td data-num="44"></td><td><pre> fixed4 realColor<span class="token operator">=</span> <span class="token function">UNITY_ACCESS_INSTANCED_PROP</span><span class="token punctuation">(</span>Props<span class="token punctuation">,</span> _Color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// Albedo comes from a texture tinted by color</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> realColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token comment">// Metallic and smoothness come from slider variables</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ENDCG</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    FallBack <span class="token string">"Diffuse"</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里 SurfaceShader 只需要两个步骤：</p><ol><li>将对应需要修改的属性值定义到使用 UNITY_DEFINE_INSTANCED_PROP 定义在对应预定义块中，这点与 UnlitShader 一样</li><li>在片段着色方法中 通过 UNITY_ACCESS_INSTANCED_PROP 取值</li></ol><p>就这么简单！其它的预定义 SurfaceShader 都已经帮忙处理好了。</p><p>效果：</p><p><img data-src="/blogimages/2022/2022-12-30/m_4a96aecd4cbe95fc91e76c956ca3e0b8_r.png" alt="" /></p><p>Instancing 中三个不同颜色的 Cube 只占用了一个 DrawCall</p><h4 id="问题为什么-standarsahder-设置颜色后会破坏合批"><a class="anchor" href="#问题为什么-standarsahder-设置颜色后会破坏合批">#</a> 问题：为什么 StandarSahder 设置颜色后会破坏合批？</h4><p>原因是：</p><blockquote><p>Unity’s Standard and StandardSpecular shaders have instancing support by default, but with no per-instance properties other than the transform.</p></blockquote><p>即 —— 虽然它支持 GPU Instancing，但实际上除了变换之外之外的属性都没有写入实例化处理。所以如果想支持其它属性的变化，需要自定义 Shader 才行。</p><p><font color=red>注 1：GPU Instancing 优先级在 SRPBatcher 及 静态合批 之后。</font><br /><font color=red>注 2：缩放为负也会打断 GPU Instancing 合批。</font><br /><font color=red>注 3：常量缓冲区不同设备可能大小不一样，因此一次性绘制也有上限。</font><br /><font color=red>注 4：GPU Instancing 只支持一个平行光，多放一个点光源就会导致多渲染 3 次 (每个对象分别一次)。(以上述  <code>SurfaceShadaer</code>  测试)</font><br /><img data-src="/blogimages/2022/2022-12-30/m_71c1a43f78bed26b6972397ca7dabe28_r.png" alt="" /><br />3 个 Cube、两个点光源：总共 7 个 DrawCall，3 个合批一次，然后分别渲染 2 次</p><h3 id="扩展"><a class="anchor" href="#扩展">#</a> 扩展</h3><p>GPU Instancing 只支持同一个模型，不支持带动画 SkinMeshRender，那么是否可以配合 GPU 动画 实现大批量动画模型绘制？</p><p>感觉理论上是可行的，后面再试试看。</p><h3 id="srpbatcher"><a class="anchor" href="#srpbatcher">#</a> SRPBatcher</h3><p>在 SRP 中，Unity 又提供了一种新的合批方式：SRPBatcher</p><p>这种方式的原理与 GPU Instancing 类似，都是需要在 Shader 中先定义受影响的属性值，Unity 渲染时先将这些值放进 GPU 的缓冲区，对象渲染时直接去取。但是它支持不同的材质和模型 —— 只要变体一致就行了。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>批处理顺序：静态合批 -&gt;SRPBatcher-&gt;GPU Instancing-&gt; 动态合批</p><p>静态合批优先级最高，相当于会与其它合批有冲突。<br />例如：个人测试中，GPU Instancing 和 静态合批 会有冲突，静态合批后使用 MaterialPropertyBlock  修改依然不会进入 GPU Instancing，也就是说 —— 直接勾选静态又去修改了材质参数反而降低效率。</p><p>前三者更有效，至于动态合批由于限制过多，而且本身就是 CPU 换 CPU，因此感觉也不用过多追求。像最新 HDRP 都去掉了动态合批功能 (当然 URP 还是有保留着的)。</p><p>参考文档：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0RyYXdDYWxsQmF0Y2hpbmcuaHRtbA==">DrawCallBatching</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9uamEtdHV0b3JpYWxzLmNvbS9wb3N0LzA0OC1tYXRlcmlhbC1wcm9wZXJ0eS1ibG9ja3M=">material-property-blocks</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuL2N1cnJlbnQvTWFudWFsL0dQVUluc3RhbmNpbmcuaHRtbA==">GPUInstancing</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前分别整理了 图片 和 音效 相关设置与影响，接下来应该轮到模型了。&lt;/p&gt;
&lt;p&gt;理论上来说应该先写一篇关于 Mesh 各个设置详细功能、影响相关的，不过写了一</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/categories/Unity3D/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>新冠感染记录</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-28T13:02:46.000Z</published>
    <updated>2023-01-01T11:18:27.400Z</updated>
    
    <content type="html"><![CDATA[<ol><li>第一天 (2022 年 12 月 19 日 周一)：<br />咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。</li><li>第二天 (2022 年 12 月 20 日 周二)：<br />办公室咳嗽声感觉更多了，也比较想喝水 —— 吃饭时也是暴露的情况。晚餐直接带回家吃的，不过感觉胃口相对没那么好了，回家后还感觉喉咙有点不舒，不过还没有更明显的症状。心跳较快。</li><li>第三天 (2022 年 12 月 21 日 周三)：<br />早上起来感觉喉咙症状比较明显，8 点去医院做了一次核酸，由于有工作没处理完还是去上班了，中午把盒饭拿到走廊上出去吃的，下午开始感觉头晕，脑袋胀痛。晚餐带回家吃 —— 简单吃了一点，几乎没有胃口了。晚上早早上传睡觉，感觉很煎熬，发冷、发昏，开着空调都冷。心跳极快。</li><li>第四天 (2022 年 12 月 22 日 周四)：<br />早上刚起来咽喉痛，头胀痛 (晃一下脑袋更加强烈)，身上酸痛，特别是右手臂举着都痛。所以请假了，同时昨天的核酸结果出来了：显示阴性。这么明显的症状不可能阴性，于是上午又去做了一次。整天状态都不大好。开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。心跳极快。</li><li>第五天 (2022 年 12 月 23 日 周五)：<br />早上刚起来咽喉痛，头胀痛，身上酸痛。相比昨天稍微好一点，还是难受。而且照镜子感觉脸色蜡黄 —— 甚至让人怀疑是不是脏都出了问题，下午核酸结果出来显示阳性。开了空调，特别怕冷，稍微移动就起鸡皮疙瘩。没有胃口，中午强行简单吃了点炒菜心，感觉反胃。晚上喝了点稀饭粥。心跳极快。</li><li>第六天 (2022 年 12 月 24 日 周六)：<br />早上刚起来咽喉痛，头胀痛，脖子肩膀痛。偶尔嘴巴会混合血丝，鼻子感觉有堵塞，中午想睡觉躺下去也睡不着。状态相比昨天稍微好一点，还是难受。特别怕冷，开了一天空调，特别怕冷，稍微移动就起鸡皮疙瘩。早上去买菜发现好又多超市看着都快倒闭了，卖的东西快清干净了。路口买了三根莴笋 —— 中午没胃口也没吃，喝了点稀饭粥。晚上煮了饭本来也没胃口的，但是感觉不好处理，还是炒了一根，吃了一半。晚上开始流清鼻涕了。心跳速度好了点，不过还是比较快。</li><li>第七天 (2022 年 12 月 25 日 周日)：<br />咽喉还是痛，早上醒来时特别明显，晚上特别厉害。鼻子也堵，早上鼻孔实在堵塞厉害，去 bilibili 找到了一个 mandell 的通鼻孔教程照着做，弄出了几坨浓血块和痰组成的东西。早上鼻涕转浓 —— 同时白天鼻孔也堵起来了，呼吸比较难。身体疼痛好些了，心跳速度也好了点。声音完全变了，之前喝水都是苦的，今天喝水不苦了，下午喝了不少水，但是胃那边感觉很不舒服，像有什么东西顶在里面。自从上午跑下去拿了快递后，就一直感觉明显。</li><li>第八天 (2022 年 12 月 26 日 周一)：<br />鼻孔堵塞得厉害，躺床上基本就一个鼻孔了，早上咽喉还是痛，同时会吸出一些血吐出来，中午躺床上没睡着，下午依然能吸出血吐出来。心跳感觉相对正常了。</li><li>第九天 (2022 年 12 月 27 日 周二)：<br />鼻孔还是堵塞，躺床上基本就一个鼻孔了，早上咽喉还是痛，不过比昨天好点。还是能吸出一些血丝。开始有点胃口了，中午把前几天买的莴笋吃了，睡了个午觉，一觉起来快 4 点了吧，午睡后鼻孔堵塞、咽喉都有改善，然后出去想买菜，发现好又多超市完全关门了，在路边买了娃娃菜吃。偶尔忍不住会咳嗽。</li><li>第十天 (2022 年 12 月 28 日 周三)：<br />早上刚起床咽喉微痛，鼻孔微堵。中午把昨天买的娃娃菜吃完了，晚上吃了冻菜包。偶尔感觉喉咙痒忍不住会咳嗽。到晚上时除了感觉喉咙偶尔有东西外，至少过于明显的症状已经快没了，今天也是最后一天病假。</li></ol><h3 id="无"><a class="anchor" href="#无">#</a> 无</h3><p>感觉放太开了，完全不知道为什么突然之间，什么都不管了。<br />说好的『逐步』放开呢？就算建立免疫屏障，也不是让所有人都走一轮吧... 我这次本来还坚挺了一个星期，直到确实感染的同事们陆续带病上班，然后感觉就被强行感染 —— 办公室咳嗽一片，这种都是完全没人管的。<br />这个病毒肯定是比重感冒严重的，按照有症状到恢复，至少需要一个星期。在严重那两天基本上很难做什么。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;第一天 (2022 年 12 月 19 日 周一)：&lt;br /&gt;
咳嗽的同事们陆续返工，暂无明显症状，只是比较想喝水 —— 吃饭时也是暴露的情况。心跳较快。&lt;/li&gt;
&lt;li&gt;第二天 (2022 年 12 月 20 日 周二)：&lt;br /&gt;
办公室咳嗽声感觉更多</summary>
      
    
    
    
    <category term="其它" scheme="https://wangjiaying.top/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="阳了" scheme="https://wangjiaying.top/tags/%E9%98%B3%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>揭秘Unity的黑盒世界-笔记</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%8F%AD%E7%A7%98Unity%E7%9A%84%E9%BB%91%E7%9B%92%E4%B8%96%E7%95%8C-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T07:34:25.000Z</published>
    <updated>2022-12-28T11:54:27.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="native-mamery"><a class="anchor" href="#native-mamery">#</a> Native Mamery</h3><p>Unity 如何分配内存？</p><p><img data-src="/blogimages/2022/2022-12-28/note2_1.jpg" alt="" /></p><ul><li>New/Malloc：<ul><li>一个是函数一个是操作符，原理上讲 操作符 快于 函数</li><li>分配失败 New 会抛出 Exception，Malloc 返回 null</li><li>Malloc 实现都类似，New 各有不同<ul><li>例如构造函数，New/Delete 会调用对象的 构造函数 / 析构函数 以完成对象的 构造 / 析构。而 Malloc/Free 则不会</li><li>但是 New 并不代表是 Malloc + 构造函数</li></ul></li><li>New 内存分配于 FreeStore (自由存储区【C++ 基于 new 操作符的一个抽象概念】)，Malloc 会分配于 Heap 上<ul><li>New/Delete 时，是否分配或释放内存，New 可以由自己决定，Malloc/Free 一定会返还系统</li></ul></li><li>所以严格讲两者根本不是一个东西，其实没有关系</li></ul></li></ul><p>Unity 不会直接通过 New/Malloc 进行操作，而是自己通过宏实现了一套内存分配机制，比如  <code>UNITY_MALLOC</code> ，分配内存时，会给内存一个标识符 ( <code>Memery Label</code> )，提交到 Memery Manager 进行分配。</p><ul><li>像 Profiler 中 Take Sample ，用以区分运行时每块内存所属，就是通过 Memery Label 区分。</li><li>Memery Label 同时也可以帮助 Memery Manager 做一个筛选，区分应该通过哪种内存分配器策略分配内存</li><li>主要内存分配器：<ul><li><code>Stack Allocator</code> ：快速、容量小、临时对象分配器<br /><img data-src="/blogimages/2022/2022-12-28/note2_2.jpg" alt="" /><br /> <code>注：图上的 Heap 是内存对象的 Heap，Stack Allocator 指先进后出结构</code><ul><li><code>快</code> ：对于栈内存，默认就会预分配一块，然后通过栈顶指针在内存块中移动，此时不会真的重新申请内存，所以快 —— 官方测试比动态堆分配器大概快 3~5 倍</li><li><code>小</code> ：分配多了很可能会被浪费，而且申请后就不会释放，是永远占用的</li><li><code>临时</code> ：上述机制也代表栈顶不可能长时间不动，快速收缩膨胀，高效重复利用。所以常驻对象不大行。<ul><li>在我们想要分配内存时，Unity 会分配两块内存：Header (记录如 (1) 是否使用 (2) User 大小 (3) 前一块是谁)+User<ul><li>所以会有额外消耗，例如自己想分配 16 字节内存，可能最终会有 32 字节大小</li></ul></li><li>回收中间对象时，Header 直接置为 『已删除』</li><li>栈顶指针回弹时，会检测回弹指针位置对象是否已经 『已删除』，若是则再次往上移动，直到一个没有被标记为删除的块，或挪到了整个 Block 头</li><li>栈结构分配虽然快，但是若栈顶对象未释放，中间内存即使回收也无法复用<ul><li>它必须等待栈顶指针对象被释放，才能回弹检测连续内存</li><li>所以无法快速重用中间已释放内存</li></ul></li><li>栈内存大小有限制 (虽然会进行拓展)<ul><li>Editor：主线程有 16M，Woker 线程 256KB</li><li>Runtime：主线程 128KB~1MB，Woker 线程 64KB</li></ul></li><li>栈内存爆了之后：Memery.FallbackAllocation，Fallback 至主堆分配器，会慢很多，造成卡顿<ul><li>分帧处理</li><li>有源码加大堆栈内存</li></ul></li></ul></li></ul></li><li><code>Batch Allocator</code> ：SRP</li><li><code>DynamicHeapAllocator</code> ：主分配器</li><li>...15~20 种不同的分配器，每一种适用的场景不同</li></ul></li></ul><h3 id="managed-memery"><a class="anchor" href="#managed-memery">#</a> Managed Memery</h3><ul><li>Mono：保留内存不会返给系统</li><li>Il2CPP：保留内存可能返给系统 —— 在同一个『页』6 次 GC 都没有被触及到的情况，很难 (注意不是对象，是内存管理单位)，Unity 确实设置了这一个机制，但是很难达成。</li><li>注意内存碎片化带来的保留内存上升</li><li>Unity 使用 Boehm GC (保守式 GC)：<br /><img data-src="/blogimages/2022/2022-12-28/note2_3.jpg" alt="" /><ul><li><p><code>一级列表</code> ：将对象分为不同类型（如 PTRFREE (无指针类型)、Normal (一般类型)、不可回收类型 (回收器自己用)）</p></li><li><p><code>二级列表</code> ：表明当前类型下的内存块大小 (16 字节增量，最多到 2K)</p></li><li><p>二层 <code>链表</code> ：每一个大小内存块为一个链表，逻辑链接起来</p><ul><li>当用户需求分配一个内存对象，就会拿出指定大小的第一个块返给用户</li><li>若用户需要分配大小小于最低大小，会返回最低大小的一个 Block (例如最小 16 字节，用户需求 8 字节，返回的就是 16 字节的内存块，会造成浪费)</li><li>若所需大小不足，则向更高级取：然后将高级大小分拆分为两半，一半返回用户、另一半链到低级链表上</li><li>同时进行回收时，若两个节点物理地址连接，则其会试图将两者合并，挂到更大的节点下，从而尽量减少整体碎片化 —— 注意不是移动内存，而是直接挂指针</li></ul></li><li><p>回收一个 Object 内存块时，会尝试找到这个内存卡块下所有指针指向地址，并且标记为引用<br />以一个不可回收对象 ObjectA 为例，需要同时标记其引用对象也不可回收。但是在内存层次上因为已经没有 class 信息，无法确认对象地址存储的是值还是指针，靠『猜测 (pattern)』判断，因此叫『潜在指针』<br /><img data-src="/blogimages/2022/2022-12-28/note2_4.jpg" alt="" /></p><ul><li>因此它总是假设给定值是指针，并且将相关联的对象标记为存活状态：<ul><li>若指向对象，则将对象也标记为不可回收</li><li>若正好指向不相干的对象，不相干的对象也会被标记为不可回收 (不相干的对象指恰好被分配到这个地址上的对象，与其无实际依赖关系)</li><li>若正好指向空白内存，空白内存地址将会加入黑名单，下次分配时若刚好踩到该地址，将不可分配内存</li></ul></li></ul></li></ul></li><li>Boehm GC 问题：<ul><li>不分代、不合并 (整理内存)，容易导致内存碎片<ul><li>例如当我们保留内存还剩很多，但是突然又被分了一大块就是这种情况</li></ul></li><li>非精准回收<ul><li>已分配内存在无人引用时，不一定能收回</li><li>没有分配使用的内存，当想要分配使用时不一定能使用</li></ul></li></ul></li><li>其它：<ul><li>GC 回收方式有：Boehm GC (保守式)、S-Gen GC (分代式)、引用式 GC (Java)</li><li>Unity 继续使用保守式 Boehm GC，也有觉得移动平台再额外花费 CPU 去整理内存是不合算的事情缘故<ul><li>当然，由于没有实装 S-Gen GC 来对比，具体性能差异当然是不可而知了</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;native-mamery&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-mamery&quot;&gt;#&lt;/a&gt; Native Mamery&lt;/h3&gt;
&lt;p&gt;Unity 如何分配内存？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/blogimages/2</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://wangjiaying.top/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Unity内存管理-笔记</title>
    <link href="https://wangjiaying.top/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangjiaying.top/2022/12/28/%E6%B5%85%E8%B0%88Unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-28T04:40:26.000Z</published>
    <updated>2022-12-28T05:28:26.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是内存"><a class="anchor" href="#什么是内存">#</a> 什么是内存？</h2><h3 id="物理内存"><a class="anchor" href="#物理内存">#</a> 物理内存</h3><h4 id="cpu访问内存"><a class="anchor" href="#cpu访问内存">#</a> CPU 访问内存：</h4><ul><li>CPU 访问内存是一个慢速的过程</li><li>CPU 想要访问一块内存时，并不是立即走系统总线访问内存，而是先向 L1、L2、L3 Cache 查询。当三个 Cache 全部 Miss 以后，才会去主内存中拿一段连续的指令回到 Cache。当下一次需要的时候，依然是先向 Cache 查询。</li><li>这样如果我们的内存、指令不是连续的，就会导致大量内存到 Cache 的交换，浪费大量时间在内存读取上</li><li><img data-src="/blogimages/2022/2022-12-28/image.jpg" alt="" /></li><li>(CPU 上 Cahce 的核心面积一般占用都是很大的)</li><li>(Unity ECS DOTS 就是为了优化这一点，将数据组建为连续内存块，以期减少 Cache Miss)</li></ul><h4 id="pc-和-移动设备内存架构差异"><a class="anchor" href="#pc-和-移动设备内存架构差异">#</a> PC 和 移动设备内存架构差异：</h4><ul><li>移动设备没有独立显卡</li><li>移动设备没有独立显存<ul><li>所以移动设备上我们关注的 <code>内存</code> ，也即是 <code>显存</code></li></ul></li><li>CPU 核心更小，缓存级数和大小也更小</li></ul><h3 id="虚拟内存"><a class="anchor" href="#虚拟内存">#</a> 虚拟内存</h3><ul><li><p>PC：<br />交换内存，当我们内存不足时，它会尝试将不使用的内存交换到硬盘上，以节省出更多的物理内存给当前系统比较活跃的进程使用</p></li><li><p>IOS：<br />IOS 可以进行压缩，将不活跃的内存压缩起来移动到内存中特定空间，节省出物理内存给活跃的应用使用</p></li><li><p>Android：一般是没有的 (虽然有部分手机支持交换内存)</p></li></ul><h3 id="内存寻址范围"><a class="anchor" href="#内存寻址范围">#</a> 内存寻址范围</h3><ul><li>32 位 CPU 和 64 位 CPU</li><li>控制其寻址范围的是 MCU，一般与 CPU 位数对应</li></ul><h2 id="安卓内存管理"><a class="anchor" href="#安卓内存管理">#</a> 安卓内存管理：</h2><p>内存基本单位：Page，没有经过设置一般为 4K，分配和回收以 Page 为单位 (并不意味所有数据都是 4K 对齐)</p><ul><li>分用户态和内核态，用户访问内核态 (如 Native 分配) 会错误</li></ul><p>内存杀手：low memery killer</p><ul><li>杀顺序：缓存 -&gt; 前一个应用 -&gt;Home-&gt;Service-&gt;Perceptible-&gt;Foreground-&gt;Persistent (前台驻留内存，杀掉前台还在的)-&gt;System (重启)</li></ul><p>内存指标：</p><ul><li>Resident Set Size (RSS)：当前应用所用掉的所有内存 (包括调用公共库导致的内存分配)</li><li>Proportional Set Size (PSS)：当前应用内存 + 均分公共库内存 (公共库被调用者均分 -- 内存公摊)</li><li>Unique Set Size (USS)：只有应用自己分配的内存，我们能做到的就是优化这一块内存，并避免在 PSS 上造成更多压力<ul><li>procrank 命令查看内存分配</li></ul></li></ul><h2 id="unity-内存"><a class="anchor" href="#unity-内存">#</a> Unity 内存</h2><ul><li>类型：<ul><li>Native Memery<ul><li>重载了所有内存分配符，每一个操作符 (Allocator) 被使用时要求一个额外参数：MemeryLable，指当前这一块内存要分配到哪个内存池，Profiler 查看时那些名字就是这个统计</li></ul></li><li>Managed Memery</li><li>引擎管理内存</li><li>用户管理内存</li></ul></li><li>Unity 检测不到用户分配的 Native 内存、Lua 内存也是无法被 Unity 直接统计到的</li></ul><h3 id="native-内存"><a class="anchor" href="#native-内存">#</a> Native 内存</h3><h4 id="scene"><a class="anchor" href="#scene">#</a> Scene</h4><ul><li>场景中的对象，GameObject</li><li>当我们创建一个 GameObject 时，Unity 底层会构建一个或多个 Object 存储其信息 (因为其内部还可能存在多个 Component)<ul><li>也因此当场景有过多 GameObject 时，Native 内存会有显著增长</li><li>通过 Profiler 发现 Native 内存大量上升时，可以检查该项</li></ul></li></ul><h4 id="audio"><a class="anchor" href="#audio">#</a> Audio</h4><ul><li>DSP Buffer：填充满了才会向 CPU 发送指令，过大会导致声音延迟，太小会导致 CPU 负担上升</li><li>Force To Mono</li><li>Format：是否硬解支持，IOS 对 MP3 有硬解支持<ul><li>MP3 比 Vorbis 更大，但是比 ADPCM 更小</li></ul></li><li>Compression Format</li></ul><h4 id="code-size"><a class="anchor" href="#code-size">#</a> Code Size</h4><ul><li>模板泛型滥用，IL2CPP 会被展开编译成静态代码，不同的泛型参数会导致排列组合形成代码膨胀</li></ul><h4 id="assetbundle"><a class="anchor" href="#assetbundle">#</a> AssetBundle</h4><ul><li>Type Tree：当前版本序列化字段形成一张对应表，如果换了一个版本反序列化，没有的字段可以直接采用默认值，避免出错。<ul><li>确认不会对兼容性造成影响 (跨版本打热更？)，就可以关掉。关掉可以 (1) 减小内存、(1) 减小包体大小，(3) Build 和运行时会变快。</li><li>若存在 Type Tree，会进行两次序列化 (反序列化)，第一步先反序列化出 Type Tree，第二步再反序列化出实际内容</li></ul></li><li>LZ4：推荐，但是压缩率会比 LZMA 平均差 30%，速度快 10 倍以上 (官方称)，基于 ChunkBase ，可以一块一块解压<ul><li>例如，一个文件是从第 5 块～10 块，会从第五块开始，5 块、6 块、分别解压，并重用之前内存，可以减少内存峰值</li></ul></li><li>LZMA：官方很不推荐，因为解压和读取速度都很慢，另外会占大量内存，因为不是 ChunkBase 而是 Stream，需要一次性读取全解压。</li><li>Size &amp; Count：每个 Bundle 包含资源数量，没有定论，需要平衡</li></ul><h4 id="resources-目录"><a class="anchor" href="#resources-目录">#</a> Resources 目录</h4><ul><li>这个目录在打进包的时候，会生成一个红黑树，用于帮助检索资源位置，这棵树在刚开始游戏就会加载进内存且不可卸载，造成持续内存压力。并且会拖慢游戏启动速度：没有分析生成完毕，游戏不会正式启动。</li><li>官方极不推荐：建议最多 Debug 环境使用，正式环境直接删掉。</li></ul><h4 id="texture"><a class="anchor" href="#texture">#</a> Texture</h4><ul><li>upload buffer：也可以设置，与声音的 DSP Buffer 有点像，就是填满多大向 GPU Push 一次</li><li>Read/Write：正常情况下，一张图读进内存，然后提交到 upload buffer 后就会直接 Delete 掉。检测到开启该选项就不会 Delete，显存内存各一份。手游显存和内存通用，就会导致 Unique Memery  存在两份。</li><li>Mipmap：UI 之类都不用开，如 3D 模型的贴图，涉及 3D 相机变化，才可能需要开启 (需要一个平衡，会增加大概 30% 内存占用，减轻渲染消耗)。</li></ul><h4 id="mesh"><a class="anchor" href="#mesh">#</a> Mesh</h4><ul><li>Read/Write：与图片一样</li><li>Compression：压缩，减少文件大小，对内存没帮助，使用时还是解压 (而且有可能会导致内存占用更多)</li></ul><h4 id="assets"><a class="anchor" href="#assets">#</a> Assets</h4><ul><li>资源管理方式</li></ul><h3 id="unity-managed-memery"><a class="anchor" href="#unity-managed-memery">#</a> Unity Managed Memery</h3><ul><li>VM 内存池<ul><li>以 Block 进行管理，当一个 Block 连续 6 次未被 GC 访问，会返还系统 (所以这种情况基本上看不到)</li><li>不会频繁分配 reserved 内存，一次性分配一大块，每次当接近一个阈值会按照一个比例乘出来</li></ul></li><li>GC 机制<ul><li>Unity Mono 使用 Boehm<ul><li>不分带的</li><li>非压缩，不整理内存</li><li>为何没升级 Mono GC：要交版税，以及后来转向 IL2CPP，自己实现升级了渐进式 GC</li></ul></li><li>下一代 GC<ul><li>Incremental GC (渐进试 GC)、<ul><li>正常 GC 会暂停主线程，进行 GC 操作，会造成主线程卡顿</li><li>该项将暂停主线程操作分帧做，GC 总体时间不会变，减少的峰值消耗</li><li>IL2CPP 为 Unity 自己实现的 GC 机制，升级版 Boehm</li></ul></li></ul></li></ul></li><li>为什么内存下降了，总体内存池上升？<ul><li>Memery Fragmentation (内存碎片化)：分配的新内存已经插不进去了 (虽然碎片加起来可能远远满足需求)，造成严重浪费 —— 这些碎片可能再也用不了了。</li><li>高密度加载释放，先操作大内存，再操作小内存</li><li>Zombie Memery (僵尸内存)<ul><li>并非内存泄露 (无人可以访问和管理)</li><li>无用内存、没有释放</li><li>通过代码管理和性能工具分析</li></ul></li></ul></li><li>推荐做法<ul><li>Class (长生命周期) 和 Struct (短生命周期)</li><li>内存池，高频使用的小对象</li><li>闭包和匿名函数：闭包和匿名函数全被创建为 Class</li><li>协程：轮询模式，即使是局部变量，在协程未结束之前也会一直占用，以 Class 形式。所以推荐用的时候生产，用完释放</li><li>配置表：是否有庞大配置表，不要全部一次性扔内存</li><li>单例：慎用</li></ul></li><li>问题<ul><li>GameObject.SetActive：内部有大量操作，特别是 UI 会产生 额外 GC，激活一个 UI 时还会递归子 UI 初始化。建议这一块比较影响的话，将其移动至屏幕外</li></ul></li></ul><p>内存最佳实践：<br /><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi51bml0eS5jb20vdHV0b3JpYWwvbWVtb3J5LW1hbmFnZW1lbnQtaW4tdW5pdHkj">https://learn.unity.com/tutorial/memory-management-in-unity#</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是内存&quot;&gt;#&lt;/a&gt; 什么是内存？&lt;/h2&gt;
&lt;h3 id=&quot;物理内存&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#物理内存&quot;&gt;#&lt;/a&gt; 物理内存&lt;/h3&gt;
&lt;h4 id=&quot;cpu访问内</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="内存" scheme="https://wangjiaying.top/categories/Unity3D/%E5%86%85%E5%AD%98/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>修复 Shoka 主题的一点小问题</title>
    <link href="https://wangjiaying.top/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://wangjiaying.top/2022/12/23/%E4%BF%AE%E5%A4%8DShoka%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-23T02:40:28.000Z</published>
    <updated>2022-12-23T12:17:21.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>后续又发现两个问题：</p><ol><li>当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹</li><li>页面百分比进度显示不大准确</li></ol><h1 id="标签页回弹问题"><a class="anchor" href="#标签页回弹问题">#</a> 标签页回弹问题</h1><p>回家预览了下，发现页面内容高度不足会有显示问题，例如标签页会变得比较鬼畜：页面无法拉到底，底部的评论及网站底部一闪一闪的：</p><p><img data-src="/blogimages/2022/2022-12-17/GIF2022-12-1921-01-23.gif" alt="" /></p><p>调试了一下，找到了  <code>global.js</code>  中的  <code>scrollHandle</code>  方法中计算导致的。</p><p>它会为  <code>sidebar</code>  增加一个  <code>affix</code>  的 class，存在时会显示页面下方的元素，否则就会隐藏。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>affix<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>不知道为啥在我这反复横跳，造成了这种闪烁的结果。</p><p>其对应代码如下：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>看判断条件，结合实际情况，宽度因素可以排除：那么就是恐怕就是这个高度判断出了啥问题吧？</p><ul><li>window.pageYOffset = 当前页面相对于窗口垂直方向滚动的像素</li><li>headerHight=header 高度 + waves 高度 (就那个波纹特效高度)</li></ul><p>这里的逻辑估计是想：如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)。</p><p><s>所以不知道这个具体用来处理啥情况的，但毕竟我这出问题了，只能减小该值。改成  <code>window.pageYOffset &gt; headerHightInner</code>  就好了。</s></p><p>这样改是不对的， <code>过了两天</code>  发现不行，单纯修改这个高度判断，换一个分辨率又炸了。</p><p>又研究了下，觉得它主要问题还是  <code>window.pageYOffset &gt; headerHight</code>  计算问题，这里相当于只判断了  <code>当前页面滑动高度</code>  是否大于  <code>标题图像高度</code> ，但是并没判断要是整个文档区域的高度都比 标题图像高度 低的情况。这样 当前页面滑动高度 可能就划不过去了。</p><ul><li>注 1： <code>sideBar</code>  其实是我们显示的头像那个组件，不知道为啥还会影响到底部区域的显示，有 affix class 底部才能显示，删掉就会导致隐藏。</li><li>注 2： <code>document.body.offsetWidth &gt; 991</code>  代表的是会导致排版切换为手机类型排版的最低宽度，切换为手机排版后  <code>sideBar affix class</code>  也不产生影响</li></ul><h1 id="页面百分比计算不一致问题"><a class="anchor" href="#页面百分比计算不一致问题">#</a> 页面百分比计算不一致问题</h1><p>在修改上面标签页问题时，发现页面的 百分比 进度显示也不对劲 —— 跟实际页面滑动过的百分比不一致。</p><p>感觉原来的计算方式，仅计算百分比就不大对劲： <code>当前滑动高度/可显示区域高度</code></p><p>而  <code>当前滑动高度</code>  肯定会比  <code>可显示区域高度</code>  更大的，这种计算方式就感觉比较奇怪，然后在其它页面试了试，并特意去作者的博客看了下，显示上都不大对的上号。</p><p>于是把百分比计算和显示与否判断都改了：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">scrollHandle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> winHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> docHeight <span class="token operator">=</span> <span class="token function">getDocHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// var contentVisibilityHeight = docHeight > winHeight ? docHeight - winHeight : document.body.scrollHeight - winHeight;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">var</span> contentVisibilityHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight <span class="token operator">-</span> winHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> <span class="token constant">SHOW</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHightInner<span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> startScroll <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SHOW</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#FFF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">changeMetaTheme</span><span class="token punctuation">(</span><span class="token string">'#222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  toolBtn<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  siteBrand<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> startScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 如果滚动高度超过整个页面的头部，那就显示底部区域，否则隐藏 (实际上元素只是看不见而已，东西还是在原地的)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// sideBar.toggleClass('affix', window.pageYOffset > headerHight &amp;&amp; document.body.offsetWidth > 991);</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 所以不清楚具体用来处理啥，单纯 window.pageYOffset > headerHight 判断可能导致底部最近评论闪烁问题</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">//scrollAction.y = Container.scrollTop;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token comment">//var diffX = scrollAction.x - Container.scrollLeft;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  diffY <span class="token operator">=</span> scrollAction<span class="token punctuation">.</span>y <span class="token operator">-</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">//if (diffX &lt; 0) &#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// Scroll right</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">//&#125; else if (diffX > 0) &#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// Scroll left</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token comment">//&#125; else</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// Scroll down</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>diffY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// Scroll up</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    siteNav<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">,</span> <span class="token constant">SHOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// First scroll event</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">//scrollAction.x = Container.scrollLeft;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  scrollAction<span class="token punctuation">.</span>y <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// var scrollPercent = Math.round(Math.min(100 * window.pageYOffset / contentVisibilityHeight, 100)) + '%';</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token comment">// 上面的计算方式感觉对不上，这个改着试试</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token keyword">var</span> scrollPercent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">/</span><span class="token punctuation">(</span>contentVisibilityHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  backToTop<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> scrollPercent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.percent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span>scrollPercent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>暂时算是好了，不知道还有没有其它问题。后续如果发现问题再看了。</p><h1 id="果然出现新的问题了"><a class="anchor" href="#果然出现新的问题了">#</a> 果然出现新的问题了</h1><p>头像组件会浮动至页面顶端去 —— 终于也明白  <code>affix</code>  用来判断什么的了，有这个标记时可以浮动，否则不行。</p><p>感觉造成闪烁的原因，最大的问题是 docHeight 取出来的值不一样，会产生变化。</p><p>最终又改了下，改成要是实际高度比页顶图片那块还低，那么判断标准就取  <code>docHeight/2</code> ：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>sideBar<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'affix'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">></span> headerHight <span class="token operator">||</span><span class="token punctuation">(</span>docHeight<span class="token operator">&lt;</span>headerHight<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">></span>docHeight<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth <span class="token operator">></span> <span class="token number">991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这样修改虽然不会闪烁，但要是 实际内容高度比页顶图片那块还低，滑动时头像组件进入浮动模式后，还是可能跑到页顶图片上去。</p><p>如果想彻底解决，得研究下为什么  <code>affix</code>  会导致下方对象看不见，然后再针对『消失』问题作处理 —— 而不是在这里改此处代码，因为理论上在这种情况下应该始终显示才对。</p><p>至于为什么会导致下方对象看不见了？估计跟 CSS 排版那边有关系，不想看了，再研究下去花的时间就太多了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;后续又发现两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当整个页面内容高度不足，往下拖动时页面底部会闪烁回弹&lt;/li&gt;
&lt;li&gt;页面百分比进度显示不大准确&lt;/li&gt;
&lt;/o</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://wangjiaying.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于我又把博客主题换成 Shoka 的事</title>
    <link href="https://wangjiaying.top/2022/12/19/%E5%85%B3%E4%BA%8E%E6%88%91%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E6%88%90Shoka%E7%9A%84%E4%BA%8B/"/>
    <id>https://wangjiaying.top/2022/12/19/%E5%85%B3%E4%BA%8E%E6%88%91%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E6%88%90Shoka%E7%9A%84%E4%BA%8B/</id>
    <published>2022-12-19T03:14:43.000Z</published>
    <updated>2022-12-23T12:38:04.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>怎么说呢... 一开始根本没想花这么多时间去换主题的。</p><p>一开始我只是单纯想给老主题 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tsdWdqby9oZXhvLXRoZW1lLWFub2R5bmU=">anodyne</span> 加一个『目录』的功能罢了...</p><p>看到一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FyZ3ZjaHMvaGV4by10aGVtZS1wYXJ0aWNsZXg=">hexo-theme-particlex</span> ，感觉不错。<br />又看到一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYS5naXQ=">hexo-theme-shoka</span>，感觉也挺可以，Shoka 主题记得一开始是看的<br />再看一个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bwb2ZmaWNlL2hleG8tdGhlbWUtaWNhcnVz">hexo-theme-icarus</span>，感觉也不错啊 (✧◡✧)。</p><p>一顿操作后，越看越觉得自己的主题太简洁了。</p><p>对比了下几个主题，icarus 也是简洁风。而 Particlex 和 Shoka 都差不多类似类型，一开始想换成 Particlex。不过 Particlex 自定义的字体集有点大... 整个主题几十兆大半容量都在字体集上了。尝试去掉字体就变得难看起来，默认设置白茫茫地也不好看... 感觉头像 widget 还有点歪，主页文章列表内容预览截取字符没有处理标题以后的逻辑 (开始就是『前言』标题的话就空白了)，而且也没有目录功能，换过去又改一次是吧？</p><p>于是对比了解了下，最终决定换 Shoka—— 感觉一定能省不少事（不会说是因为看重随机背景图片好看且方便 —— 简直是选择困难症的福音）<br />(虽然最后依然花了挺多时间研究去结合自己的改动)</p><h1 id="过程"><a class="anchor" href="#过程">#</a> 过程</h1><h2 id="最新评论-随机文章数量修改"><a class="anchor" href="#最新评论-随机文章数量修改">#</a> 最新评论、随机文章数量修改</h2><p>一开始本来不想展示这个的，后面又仔细一想：我这博客也没个评论提示，最近的留言不是正好可以当做一个提示吗？看到最近留言就可以知道谁谁加了评论 (虽然我觉得这个冷清的博客不大可能会有啥评论)，不过多一个提示也是好的。</p><p>但是又感觉这个主题页面下面的随机文章和最近评论太长了：作者两者默认都是写死的 10 条，想减少一点。<br />随机文章还好说，直接改主题代码就行了</p><p>在 _config.shoka.yml 里边加了一个 count 的配置：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">widgets</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment"># if true, will show random posts</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">random_posts</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment"># if true, will show recent comments</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token key atrule">recent_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">3</span></pre></td></tr></table></figure><p>然后找到 widgets.njk 加入对数量参数的解析：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 注意少了个取参的花括号，因为不知道为啥位于代码块也会被转义掉</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"leancloud-recent-comment count_&#123; theme.widgets.count &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr></table></figure><p>然而最近评论的数量改起来就比较麻烦了，因为功能是直接写死在 MiniValine 的代码里的，没有支持自定义的功能。<br />如果想要减少，得改源码才行。<br />由于该主题的 js 是代码动态加载，并且在配置路径上说千万不要动：除非知道在干什么！<br />看起来，原因是作者对加速脚本做了合并处理，然后我调试了一下，感觉 MiniValine 并没有处于合并列表，相当于还是单个加载的。<br />于是就想着一下，fork 了一个工程，先在本地改着试试。</p><p>拉下来后，覆盖 vendors.js.valine 路径设置：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">vendors</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">js</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">valine</span><span class="token punctuation">:</span> /MiniValine/dist/MiniValine.min.js <span class="token comment">#gh/amehime/MiniValine@4.2.2-beta10/dist/MiniValine.min.js</span></pre></td></tr></table></figure><p>本地调试了下，感觉没什么大问题。</p><p>于是准备开改。</p><p>第一步就是编译 MiniValine ，因为没在 Readme 上看到编译方式，就自己研究了下，发现『可能』是用的 webpack。</p><p>于是尝试  <code>npm i webpack</code>  安装重新试，又缺失  <code>webpack-cli</code> ...... 一波安装下去，缺失 Python 都来了 —— 也不知道哪个依赖包需要 Python 编译。</p><p>现在这个电脑还没安装过 py，于是下载了最新版：编译确实开始了，结果又报新的错误。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> path E:<span class="token punctuation">\</span>项目<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>HexoBlog<span class="token punctuation">\</span>MiniValine<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>fibers</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> failed</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>cmd.exe /d /s /c <span class="token function">node</span> build.js <span class="token operator">||</span> nodejs build.js</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info it worked <span class="token keyword">if</span> it ends with ok</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info using node-gyp@3.8.0</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp info using node@18.12.1 <span class="token operator">|</span> win32 <span class="token operator">|</span> x64</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> configure error</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack Error: Command failed: C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CWHIS<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Programs<span class="token punctuation">\</span>Python<span class="token punctuation">\</span>Python311<span class="token punctuation">\</span>python.EXE <span class="token parameter variable">-c</span> <span class="token function">import</span> sys<span class="token punctuation">;</span> print <span class="token string">"%s.%s.%s"</span> % sys.version_info<span class="token punctuation">[</span>:3<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack   File <span class="token string">"&lt;string>"</span>, line <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     <span class="token function">import</span> sys<span class="token punctuation">;</span> print <span class="token string">"%s.%s.%s"</span> % sys.version_info<span class="token punctuation">[</span>:3<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack SyntaxError: Missing parentheses <span class="token keyword">in</span> call to <span class="token string">'print'</span><span class="token builtin class-name">.</span> Did you mean print<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>?</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess.exithandler <span class="token punctuation">(</span>node:child_process:412:12<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess.emit <span class="token punctuation">(</span>node:events:513:28<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at maybeClose <span class="token punctuation">(</span>node:internal/child_process:1091:16<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> stack     at ChildProcess._handle.onexit <span class="token punctuation">(</span>node:internal/child_process:302:5<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> System Windows_NT <span class="token number">10.0</span>.22621</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token string">"D:<span class="token entity" title="\\">\\</span>Solfware<span class="token entity" title="\\">\\</span>GreenSolfware<span class="token entity" title="\\">\\</span>node-v18.12.1-win-x64<span class="token entity" title="\\">\\</span>node.exe"</span> <span class="token string">"E:<span class="token entity" title="\\">\\</span>项目<span class="token entity" title="\\">\\</span>Blog<span class="token entity" title="\\">\\</span>HexoBlog<span class="token entity" title="\\">\\</span>MiniValine<span class="token entity" title="\\">\\</span>node_modules<span class="token entity" title="\\">\\</span>node-gyp<span class="token entity" title="\\">\\</span>bin<span class="token entity" title="\\">\\</span>node-gyp.js"</span> <span class="token string">"rebuild"</span> <span class="token string">"--release"</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> cwd E:<span class="token punctuation">\</span>项目<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>HexoBlog<span class="token punctuation">\</span>MiniValine<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>fibers</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> <span class="token function">node</span> <span class="token parameter variable">-v</span> v18.12.1</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> node-gyp <span class="token parameter variable">-v</span> v3.8.0</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> gyp ERR<span class="token operator">!</span> not ok</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> node-gyp exited with code: <span class="token number">1</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Please <span class="token function">make</span> sure you are using a supported platform and <span class="token function">node</span> version. If you</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> would like to compile fibers on this machine please <span class="token function">make</span> sure you have setup your</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> build environment--</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Windows + OS X instructions here: https://github.com/nodejs/node-gyp</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Ubuntu <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++ build-essential<span class="token variable">`</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> RHEL <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span>yum <span class="token function">install</span> gcc-c++<span class="token variable">`</span></span> and <span class="token variable"><span class="token variable">`</span>yum groupinstall <span class="token string">'Development Tools'</span><span class="token variable">`</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> Alpine <span class="token function">users</span> please run: <span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> apk <span class="token function">add</span> python <span class="token function">make</span> g++<span class="token variable">`</span></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token string">'nodejs'</span> �����ڲ����ⲿ���Ҳ���ǿ����еĳ���</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token function">npm</span> ERR<span class="token operator">!</span> ���������ļ���</pre></td></tr></table></figure><p>看着就像是 python 版本过高，依赖包还在用老版本的语法？</p><p>这已经是反复安装和卸载 npm 包管理尝试后了<br />毕竟我不是专业的... 这时候已经花了不少时间了 —— 就换个主题... 加个小功能而已，我还有更重要的东西要做，怎么能在这里费这么大功夫，干脆直接在  <code>MiniValine.min.js</code>  基础上修改算了。</p><p>于是打开控制台要网页调试窗口，下了个断点，很快就把  <code>count_数量</code>  这个配置解析成查询数量上限值了。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> recentCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>t <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"count_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        recentCount <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>很简单的一行代码。</p><p>不过由于需要拉取工程改 MiniValine，如果有需要的话可以直接用我改好的 (... 如果真的还有人需要的话)：</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">vendors</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">js</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">valine</span><span class="token punctuation">:</span> gh/CWHISME/MiniValine/dist/MiniValine.min.js <span class="token comment">#gh/amehime/MiniValine@4.2.2-beta10/dist/MiniValine.min.js</span></pre></td></tr></table></figure><p>以及改过的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvaGV4by10aGVtZS1zaG9rYS5naXQ=">Shoka</span> 地址。</p><h2 id="标题显示开头显示成-号"><a class="anchor" href="#标题显示开头显示成-号">#</a> 标题显示开头显示成 # 号</h2><p>最开始发现的是，文章目录标题不像作者那样显示 H1、H2 之类的，而是『#』号开头，比如：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-17_15-59-47.png" alt="" /></p><p>对比了下作者和其它主题使用者的情况，发现是这个 markdownIt-Anchor class 的问题，手动将其改成 anchor 就正常了。</p><p>知道原因，就得找为什么会这样？<br />安装过程也是按照要求操作的，为何 anchor 变成了 markdownIt-Anchor？</p><p>于是先后经历了反复 安装、卸载，查询依赖包版本等等操作...... 检查得怀疑人生！<br />结果最后才发现：是安装说明中的 hexo-renderer-multi-markdown-it 配置没有沾下来！</p><p>主题自带的 _config.yml 并没有关于这个的默认配置，必须手动粘贴进自己的 _config.yml 然后我之前安装的时候估计漏了，然后就变成这样了... 😭</p><h2 id="头像"><a class="anchor" href="#头像">#</a> 头像</h2><p>看到作者在关于页面写的自设，并留下了一个 <span class="exturl" data-url="aHR0cHM6Ly9waWNyZXcubWUv">Picrew</span> 的链接，点进去试了下，感觉还意外的不错。</p><p>于是把自己的上古头像也换了。</p><h2 id="页顶图片添加网格蒙版"><a class="anchor" href="#页顶图片添加网格蒙版">#</a> 页顶图片添加网格蒙版</h2><p>因为感觉有时候放大太糊了，参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8zOTI4OTY2Mjg3Lw==">Lavender</span> 的文章，增加了网格效果。</p><p>作者是直接修改的  <code>themes\shoka\source\css\_common\outline\header\header.styl</code></p><p>其实在  <code>source/_data/</code>  目录建立一个  <code>custom.styl</code>  自定义样式也是可以的。</p><p>并且因为我没有把图改成全屏，所以代码有所差异：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#header</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">&amp;::before</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/dot.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 70vh<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">z-index</span><span class="token punctuation">:</span> -4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 50vh<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0rem .2rem .3rem <span class="token function">alpha</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--header-text-color<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>相当于只是在 Shoka 本来基础上加了一个网格蒙版效果。</p><hr /><p>后边想着把普通 cover 也加了一个，不过降低了透明度。</p><p>说道这个，GIMP 中的颜色模式，就算黑白色也不能采用灰度，还是得 RGB 颜色才行。</p><p>想着减少大小 (其实根本没必要) 试了下感觉蒙版格子都不对味了。</p><h2 id="音乐播放器"><a class="anchor" href="#音乐播放器">#</a> 音乐播放器</h2><p>注意 QQ 音乐的链接必须带 .html 后缀，否则音乐播放器会坏掉的。</p><p>筛选使用的正则表达式规则如下：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*song.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*album.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*artist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*playlist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token string">'music.163.com.*discover/toplist.*id=(\\d+)'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*song/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*album/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*singer/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*playsquare/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token string">'y.qq.com.*playlist/(\\w+).html'</span><span class="token punctuation">,</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*song/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*album/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*artist/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'artist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token string">'xiami.com.*collect/(\\w+)'</span><span class="token punctuation">,</span> <span class="token string">'xiami'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr></table></figure><h3 id="歌单更换后错位问题"><a class="anchor" href="#歌单更换后错位问题">#</a> 歌单更换后错位问题</h3><p>自定义的音乐，更换了音乐列表音乐需要手动清空一下 loacalStorage，因为作者为了优化，每个歌单数据拉取一次后都是直接存储本地的。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 例如 utils.parse 返回数据</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'tencent'</span><span class="token punctuation">,</span> <span class="token string">'playlist'</span><span class="token punctuation">,</span> <span class="token string">'8733616535'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 本地有就取本地，否则解析存储本地</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> meta <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>meta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> skey <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> playlist <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>playlist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>playlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.i-meto.com/meting/api?server='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;type='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;id='</span><span class="token operator">+</span>meta<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;r='</span><span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这样要是实时在另外一边更换了歌单中的歌曲就会出问题：比如歌曲错位啊、名字不对、播放失败之类的。</p><p>似乎访问一次后，歌单记录下来变不了了 (对访问者来说)，因为貌似没有看到删除的地方...</p><h2 id="自定义脚本执行时机问题"><a class="anchor" href="#自定义脚本执行时机问题">#</a> 自定义脚本执行时机问题</h2><p>想把之前显示文章『多少天』前的脚本放进来，不过一时间没找到可以配置的地方。</p><p>最后还是直接改的主题代码，在 layout.njk 导入 app.js 主题代码之后添加自定义的脚本。</p><p>其中有个问题是，这个点击进去另外的页面貌似做了优化的，不会重新请求所有页面数据，因此导入脚本若是想每次页面发送改变执行，就不能直接用老方式了。</p><p>目前 Shoka 加载流程是：</p><ol><li>页面初始化，绑定 DOMContentLoaded siteInit 事件</li><li>在该方法中绑定动态事件，例如 pjax 动态成功加载了新页面的处理 siteRefresh 函数</li><li>在该方法中调用一次 siteRefresh 执行一次手动刷新</li><li>siteRefresh 中进行实际页面的刷新处理</li></ol><p>所以关键点就在于 pjax:success 绑定的 siteRefresh 函数了。</p><p>主题里面的代码肯定是不好去改动的，于是尝试在自己导入的脚本中绑定 pjax:success 事件：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//shoka 版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">refreshDateTimeOfDay</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">var</span> dateNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">var</span> dayCount <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dateNow <span class="token operator">-</span> date<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">var</span> finalStr <span class="token operator">=</span> dayCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> nowStr <span class="token operator">:</span> dayCount <span class="token operator">+</span> dayStr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        x<span class="token punctuation">.</span>innerText <span class="token operator">=</span> x<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">,</span> finalStr<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pjax:success'</span><span class="token punctuation">,</span> refreshDateTimeOfDay<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">refreshDateTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>试了下可以用：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-18_17-09-05.jpg" alt="" /></p><p>那就先这样了。</p><p>引用 live2d 的方式也差不多，之前我已经完全分离了 live2d 库，只需要引用脚本就行了。</p><p>—— 不过由于 live2d 之前 ui 使用的是 FontAwesome 图标，导致显示不出来。</p><p>不可能为了 live2d 专门再导入一个 FontAwesome 库的...... 从 shoka 已有的 Iconfont 图标里找了几个替换一下吧。</p><h2 id="html-标签没有被解析"><a class="anchor" href="#html-标签没有被解析">#</a> HTML 标签没有被解析</h2><p>以前使用默认 markdown 渲染器的时候，因为没有修改字体颜色功能，都是直接采用 html 标签如  <code>&lt;font color=red&gt; 静态对象的所有直接光照、间接光照、阴影均烘焙 &lt;/font&gt;</code>  这种方式实现的。</p><p>然后就发现 shoka 没有解析了，直接被当做纯文本给显示出来。</p><p>查了并试了下，是由于 hexo-renderer-multi-markdown-it 渲染器的配置问题，markdown.render.html 字段需要设置为 true—— 作者默认给出的模板是 false，所以作为纯文本显示了。</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">markdown</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">render</span><span class="token punctuation">:</span> <span class="token comment"># 渲染器设置</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 过滤 HTML 标签 ----- true 表示会转义 html 标签，否则作为纯文本</span></pre></td></tr></table></figure><h2 id="压缩插件问题"><a class="anchor" href="#压缩插件问题">#</a> 压缩插件问题</h2><p>我这边 hexo-renderer-multi-markdown-it 自带压缩插件用起来有点问题，压缩自己的代码跟 Shoka 的竟然还产生了随机方法名的冲突，换回 hexo-all-minifier 了。</p><h2 id="引入自定义脚本增加配置功能"><a class="anchor" href="#引入自定义脚本增加配置功能">#</a> 引入自定义脚本增加配置功能</h2><p>上面直接通过直接修改主题模板引入了自定义脚本代码，不过感觉可以将这个修改转移到配置中。<br />于是仿照 已有的渲染方式，在  <code>主题 _config.yml(_config.shoka.yml)</code>  增加  <code>customJs</code>  配置，例如</p><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">customJs</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">-</span> /js/DateTimeAfeterCalc.js</pre></td></tr></table></figure><p>然后在  <code>asset.js</code>  注册方法：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_custom_js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> customJs <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">.</span>customJs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>customJs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> customJs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    str<span class="token operator">+=</span> <span class="token function">htmlTag</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">src</span><span class="token operator">:</span>  customJs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>最后在  <code>layout.njk</code>  调用：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token function">_vendor_js</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token function">_js</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span><span class="token function">_custom_js</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如此后续要是还有引用自己的脚本，只需要改  <code>_config.shoka.yml</code>  配置，不会动到主题本身代码这边了。</p><h2 id="搜索"><a class="anchor" href="#搜索">#</a> 搜索</h2><p>最后是 algolia 搜索，这个没什么改的，虽然之前也没用过，安装好 hexo-algoliasearch，然后注册一个账号按照建议来<s>就行了</s> —— 需要注意的是，algolia 配置必须配置到 Hexo 根目录的  <code>_config.yml</code>  中，如果配到了主题如  <code>_config.shoka.yml</code>  配置里边是不行的。</p><p>刚开始我就按照惯例配置在  <code>_config.shoka.yml</code>  内，结果发现没什么效果 —— 点按钮也没反应，查了代码发现发现实际是取的 config 配置。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> theme <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>algolia<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  siteConfig<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">appID</span>    <span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>appId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">apiKey</span>   <span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>apiKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">indexName</span><span class="token operator">:</span> config<span class="token punctuation">.</span>algolia<span class="token punctuation">.</span>indexName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">hits</span>     <span class="token operator">:</span> theme<span class="token punctuation">.</span>search<span class="token punctuation">.</span>hits</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>改到全局配置里就可以了。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>本来只是想：</p><ol><li>为旧主题加个目录</li><li>想让目录 (目录同级头像不变) 可以跟随页面移动]</li><li>研究如何处理手机端兼容性问题</li><li>感觉主题不好看</li><li>换</li><li>换哪个？</li><li>研究 ing</li><li>换 Shoka 吧</li><li>研究 ing</li><li>自定义</li><li>研究功能如何实现的</li><li>解决问题</li><li>终于完成了，周末都过去了......</li></ol><p>何况之前就早在看，只是周末才开始在实际动手而已，本来打算搞完周末补一下 Unity 内存知识的，现在已经是<s>周日晚上 10 点多</s> <s>周一</s> 周二了！</p><p>花了这么多时间，算是对主题基本框架都有了个认识... 比如：</p><ul><li>作者预留了很多自定义的口子： <code>source/_data/</code>  目录创建对应 yml 或 styl 就可以覆盖主题本来配置和样式 (images.yml 配置也可以在这覆盖)</li><li>动态加载功能使用 pjax 实现，自己加脚本想页面初始化执行需要绑对应事件</li><li>测试音乐播放器注意歌单缓存问题</li><li>引用自定义脚本</li></ul><p>虽然自信下一次想改什么肯定能更快找到该改哪里，但忙活这么久，乍一看似乎像是又没改到啥的样子，还是感觉有点惨了。</p><p><s>处理一下收尾该睡觉了，本来总结还打算再写点什么的，算了算了。</s></p><p>弄完搜索和拖动问题，再看了下页面，突然又想把 cover 图片也加上一点蒙版，不过肯定需要降低透明度 —— 虽然 CSS 自带透明度调整，但是一开始我竟然意图通过编辑图片来控制...(ﾉД`)，不熟悉的东西就是这样。另外发现使用  <code>background-attachment</code>  css 属性会导致在 cover 上 repeat 不正常，去掉就好了。</p><p>再看一眼老博客的样子：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-20_10-28-08.jpg" alt="" /></p><p>最后，添加了最近评论及自定义脚本配置的： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvaGV4by10aGVtZS1zaG9rYS5naXQ=">Shoka</span><br /> 添加解析 class='count_数量 ' 为最近评论数量功能的： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NXSElTTUUvTWluaVZhbGluZS5naXQ=">MiniValine</span> (只改了 *.min.js 那一个解析的地方)</p><p>后面再整理一下老文章的标签和分类，这次应该就真搞差不多了。</p><h1 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h1><p>出现个疑问，而且没研究出来问题：指定随机的图片是如何实现的？</p><p>因为 Hexo 是静态的，只可能是后期修改。</p><p>然后却又没找到除了  <code>engine.js</code>  生成博客时调用  <code>images.yml</code>  随机图片的接口。也就是说，这个在生成时就应该已经被固定了，而且研究半天，发现动态刷新页面时查询相关接口的数据 (图片链接) 就已经变了。</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-23_14-58-37.jpg" alt="Imgs 与之前的不一样了" /></p><p>所以要么这个功能是作者放在了其它的已合并的公共脚本中？但是又没发现哪里指定的  <code>images.yml</code>  中的配置图片值。</p><p>总不能由 Hexo 动态随机出来的吧？想不通。</p><hr /><p>经过多方面研究，破案了 —— 这东西还真是实时生成的！</p><p>测试方法是给  <code>hexo.extend.helper</code>  多绑一个计算时间的：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_date'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">language</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后在生成图片那给加上去：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> data<span class="token operator">-</span>background<span class="token operator">-</span>image<span class="token operator">=</span><span class="token string">"&#123; image &#125;"</span> date<span class="token operator">=</span><span class="token string">"&#123; _date() &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr></table></figure><p>运行时，这个时间一直在变化：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-23_15-31-04.jpg" alt="" /></p><p>说明不是静态的！Hexo 什么时候支持这种动态执行生成页面的方法了？</p><p>然而我们生成后上传的东的确又是纯静态的东西... 想不明白。</p><hr /><p>上传的东西确实变成静态的了... 这个随机图片仅限于本地调试的时候。一旦上传就全部固定了...</p><p>原来如此，还以为一直随机呢... 花这么多时间来找原因，本地图片实时随机真是让人误会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;怎么说呢... 一开始根本没想花这么多时间去换主题的。&lt;/p&gt;
&lt;p&gt;一开始我只是单纯想给老主题 &lt;span class=&quot;exturl&quot; data-url=&quot;aH</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://wangjiaying.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>为 Anodyne 主题增加目录表现</title>
    <link href="https://wangjiaying.top/2022/12/17/%E4%B8%BAAnodyne%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E7%9B%AE%E5%BD%95%E8%A1%A8%E7%8E%B0/"/>
    <id>https://wangjiaying.top/2022/12/17/%E4%B8%BAAnodyne%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E7%9B%AE%E5%BD%95%E8%A1%A8%E7%8E%B0/</id>
    <published>2022-12-17T07:38:52.000Z</published>
    <updated>2022-12-19T12:21:07.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>不知道哪里的想法，想给文章加个目录，方便预览：可能因为 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tsdWdqby9oZXhvLXRoZW1lLWFub2R5bmU=">anodyne</span> 主题本身的排版显示，让人有点分不清标题子级？(指一级标题、二级标题这种)</p><p>于是想找一个有目录的主题看看，能不能参考下：于是就开始搜索 『Hexo 主题』</p><h1 id="研究"><a class="anchor" href="#研究">#</a> 研究</h1><h2 id="目录跟随效果"><a class="anchor" href="#目录跟随效果">#</a> 目录跟随效果</h2><p>开始吭吭哧哧改自己的老主题，用 toc 加上目录后，感觉目录应该根据页面滑动而浮动，但是由于目录处于整个右侧界面的子级，现在的需求是：</p><blockquote><p>widget 不能动，只有当页面滑动超出 toc 起始范围时，仅 toc 跟随页面滑动</p></blockquote><p>基本表现如下：</p><p><img data-src="/blogimages/2022/2022-12-17/Snipaste_2022-12-19_14-58-46.jpg" alt="表现" /></p><p>现在的大概结构如下：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widget<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>toc 就是目录</p><p>且不说组件跟文章不是一个框架，用 fixed 之类的属性只能一直固定在一个位置，难道改这个我还要写 js 代码动态去设置 css 节点属性么？</p><p>于是开始 面向搜索编程😊 ，找了下，先是找到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZW5vbmcuY29tLzY3OTQwMDAv">关于 CSS：固定位置，但相对于容器</span>，得知了  <code>position sticky</code>  这条属性，它的作用是：在概念上类似于 position: fixed。区别在于，具有 position: sticky 的元素在其父级中的行为类似于 position: relative，直到在视口中满足给定的偏移阈值为止。</p><p>现在需求可以做了，那么余下的问题就是：让 toc 容器大小与 content 一致 —— 所以 widget 大小也必须与 content 一致，否则 widget 实际高度多少就是多少，页面就算 1000 个高度， widget 可能也还是 200 个高度。</p><p>因为整个页面主要靠 content 撑起来的，不管是设置 toc 还是 widget，都没法让另外一边的自适应 content。</p><p>然后又找到一个文章 <a href="https://blog.csdn.net/ltmtianming/article/details/109588841">css 实现 div 的高度随着另一个 div 的高度改变<br /></a></p><p>先是参考上面的设置，将 widget 设置为  <code>position: absolute</code> ，容器大小保持与整个页面高度一至，toc 设置为  <code>position sticky</code></p><p>结果不行，于是继续研究：最后得出结论是 parent 是默认静态的，即  <code>position: static</code> 。</p><blockquote><p>static，静态定位，HTML 元素的默认值，即没有定位，元素出现在正常的流中。 静态定位的元素不会受到 top, bottom, left, right, z-index 影响。</p></blockquote><p>于是又是一通改，成功解决。</p><h2 id="手机端错位问题"><a class="anchor" href="#手机端错位问题">#</a> 手机端错位问题</h2><p>感觉没什么问题，上传服务器。</p><p>不过很快就发现：手机端预览又有问题了。</p><p>由于已经修复了，现在也看不到截图，不过也可以想象：</p><ul><li>parent relative</li><li>widget absolute</li></ul><p>那么在 content 与 widget 宽度不足以同时显示的时候，他们就没法自动排版了。于是两者挤在了一块，相当于叠加了起来。</p><p>总之看着挺糟糕的，于是想想要不算了吧，目录也不要浮动定位了，这需求<s>我其实没那么强烈</s>。</p><p>下来后想着想着又不大甘心，于是再次一通研究，发现了 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2ZsZXg=">flex</span> 这个自定定位排版的容器属性。立刻惊为天人，马上用起来，解决了目录问题。</p><h1 id="想换新主题了"><a class="anchor" href="#想换新主题了">#</a> 想换新主题了！</h1><p>然后在这个过程中，看着其它的主题样式，突然就觉得自己的博客主题也太... 简洁了 —— 虽然这个简洁也是以前我觉得挺好看的，现在却想再加点什么。</p><p>比如看着 Shoka 的随机背景，于是又了解到了 随机二次元图片 接口这回事，于是想要..... 整一个。</p><p>找了下资料，例如用这种方式就可以取得一个随机图片：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">fetch</span> <span class="token punctuation">(</span><span class="token string">"https://www.dmoe.cc/random.php?return=json"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>imgurl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>于是再在自己的主题上，找个合适的位置贴上去，就可以随机展示图片了对吧？稍微研究了一下下..... 没完没了了是吧！(摔 (ﾉ｀⊿´)ﾉ)</p><p>这样不如... 直接把主题换了？</p><p>特别是看着自己主题的代码样式、Markdown 解析显示的样式，虽然以前感觉简洁也不错... 现在怎么看怎么感觉不香了。</p><hr /><p>所以...?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;不知道哪里的想法，想给文章加个目录，方便预览：可能因为 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29</summary>
      
    
    
    
    <category term="博客" scheme="https://wangjiaying.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>协变和逆变</title>
    <link href="https://wangjiaying.top/2022/12/10/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>https://wangjiaying.top/2022/12/10/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/</id>
    <published>2022-12-10T09:06:56.000Z</published>
    <updated>2022-12-22T03:29:48.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>关于协变和逆变，早在前些日子就在想整理一下了，不过由于前几天研究了下 <a href="">Unity 的阴影与光照烘焙</a> ，所以一直放在心上却没有实施，都忘了之前是准备想怎么写开头了... 也忘了作笔记，只能现在重新想一想。</p><p>逆变 和 协变其实是对面向对象的一个补充，在 C# 中通过 in 标识逆变，out 标识 协变，如果没有标识，那么默认就是 『不变』。</p><p>之前想思考了好些天了，感觉有些地方还是有点没想透彻，这次整理的同时进行更多的试验，确定自己的想法对不对。</p><h2 id="描述"><a class="anchor" href="#描述">#</a> 描述</h2><p>变体仅针对引用类型，且只有 数组 (隐式协变)、泛型委托、泛型接口 可以使用。</p><p><font color=red>注：对于同一泛型参数，逆变和协变不能同时存在。</font></p><p>正常来说，根据里氏替换原则：子类型（subtype）必须能够替换掉他们的基类型（base type）</p><p>我们通常在写代码的时候，也会不自觉地用到这一点：例如派生出多个子类的父类，可以作为一个『统一的方法参数』接受子类传递然后处理：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">Parent</span> pt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Child</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">ChildBoy</span> childBoy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childBoy<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们可以说一个类是另一个类的基类，但是一个接口、一个委托正常是没有这种关系的，所以当包裹一层 (委托、接口) 后就不行了 —— 理论上它们并没有子类指向父类的关系。</p><p>泛型是对类型系统的进一步抽象，上面的变化映射至 (数组、泛型委托、泛型接口) 就是逆变与协变的概念。</p><p>从简单表现上来看：</p><ul><li>协变用于隐式将返回参数 (容器) 的子类转为父类</li><li>逆变用于隐式将传入参数 (容器) 的父类转为子类</li></ul><p>想想看：</p><ul><li>协 —— 子类指向父类的关系符合原始的关系转换方向</li><li>逆 —— 父类转子类</li></ul><h2 id="测试"><a class="anchor" href="#测试">#</a> 测试</h2><h3 id="测试协变"><a class="anchor" href="#测试协变">#</a> 测试协变</h3><h4 id="1-数组"><a class="anchor" href="#1-数组">#</a> (1) 数组</h4><p>数组的协变相信大多数人都不自觉使用过，例如：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> objects <span class="token operator">=</span> strings<span class="token punctuation">;</span></pre></td></tr></table></figure><p>上述代码就是数组隐式支持的协变：我们可以把子类数组直接赋值给定义的基类数组。</p><p>上面已经解释过，协变用于 『返回值隐式转换为父类』</p><blockquote><p>因为不管如何从数组中取值：strings [index] 都可以转为 object</p></blockquote><p>符合 『子类指向父类的关系』，协变成立。</p><h4 id="2-接口"><a class="anchor" href="#2-接口">#</a> (2) 接口</h4><p>接口的协变以 C# 内置 IReadOnlyList 接口为例，该接口标记了 out，List 就实现了该接口。</p><p>首先定义两个有父子关系的引用对象：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Parent：父类"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Parent</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Child：子类"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后进行调用测试：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//==== 报错 ==== 列表是普通类，没有也不支持协变功能</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//List&lt;Parent> parentList = childList;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 正常赋值，协变使得声明子类的接口可隐式转为父类</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> baseList <span class="token operator">=</span> childList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>baseList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Test (0.008s)---Child：子类</code></pre><p>可能在这里还会有点不明白发生了什么，再以 List 实现的另一个接口  <code>IList&lt;T&gt;</code>  为例，IList 接口并未做标识，因此它是『不变』的，如果我们想这样赋值：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 报错，提示无法隐式转换 List&lt;Child>->IList&lt;Panret></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">IList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> list <span class="token operator">=</span> childList<span class="token punctuation">;</span></pre></td></tr></table></figure><p>作为『不变』的泛型接口，想要将泛型子类赋值泛型父类就会得到报错。</p><p>现在应该大概有点感觉了 —— 特别是当拥有多个子类，我们想统一接收的时候，拥有协变就可以直接这样写：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>ChildBoy<span class="token punctuation">></span></span> childList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ChildBoy<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">List<span class="token punctuation">&lt;</span>ChildGirl<span class="token punctuation">></span></span> childList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ChildGirl<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChildGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">Log</span><span class="token punctuation">(</span>childList3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> baseList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>baseList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Test (0.009s)---Child：子类ChildBoy：子类ChildGirl：子类</code></pre><blockquote><p>当我们调用 childList [0] 可以得到一个 Child<br /> 当我们调用 childList2 [0] 可以得到一个 ChildBoy<br /> 当我们调用 childList3 [0] 可以得到一个 ChildGirl</p></blockquote><p>最后从接口得到的这个对象，都可以安全转为 Parent<br /> 符合 『子类指向父类的关系』，协变成立。</p><h4 id="3-委托"><a class="anchor" href="#3-委托">#</a> (3) 委托</h4><p>除此之外，还有接触最多的  <code>TResult Func&lt;out TResult&gt;</code>  委托，它的返回值也是支持协变的：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Func<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> parentFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Func<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>parentFunc <span class="token operator">=</span> childFunc<span class="token punctuation">;</span></pre></td></tr></table></figure><p>上面已经解释过，协变用于 『返回值隐式转换为父类』：因为 Child 可以转为 Parent，所以 <code>Func&lt;Child&gt;</code>  也可以安全转为  <code>Func&lt;Parent&gt;</code> .</p><blockquote><p>当我们调用 childFunc () 可以得到一个 子类<br />当我们调用 parentFunc () 可以得到一个 父类<br />当 parentFunc=childFunc 调用可以得到一个 父类</p></blockquote><p>符合 『子类指向父类的关系』，协变成立。</p><h3 id="测试逆变"><a class="anchor" href="#测试逆变">#</a> 测试逆变</h3><p>协变标识返回值，逆变标识参数。</p><p>虽然听起来差不多，不过协变看着其实更符合思考，因为基于接口、委托的执行返回值我们可以更加直观地得出结论，逆变可能就没那么容易理解了。</p><p>还是先以 C# 内置 IComparable 接口为例，该接口标记了逆变，我们定义两个类：Parent 和 Child，并使 Parent 实现该接口。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">IComparable<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> ip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">IComparable<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> iChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//==== 报错 ====</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ip <span class="token operator">=</span> iChild<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 正常赋值，逆变使得声明父类接口隐式转为声明子类接口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>iChild <span class="token operator">=</span> ip<span class="token punctuation">;</span></pre></td></tr></table></figure><p>在上述代码中，反而是 Child 接口能够接受 Parent 接口对象，第一个地方将 iChild (子类接口) 赋值 ip (父类接口) 为什么会报错呢？</p><p>在上面我们已经测试过协变了，协变得出的结论是最终返回结果的类型一定是符合转换规则的，那么这里应该也可以先从执行结果上考虑：</p><blockquote><p>若执行  <code>IComparable&lt;Parent&gt;</code>  接口，需要接受 Parent 或 Child 参数<br />若执行  <code>IComparable&lt;Child&gt;</code>  接口，只能接受 Child 参数</p></blockquote><ul><li>如果我们把 ip 赋值给 iChild，那么在参数中就变成只能接受 Child 类型了。</li><li>但是如果把 iChild 赋值给 ip，那么参数中种就变成也可以接受 Parent 类型了。</li></ul><p>所以，区别是什么？</p><p>区别在于：<font color=red>(1) ip 本来是接受父类型，变成只能接受子类型，是合理的。(2) iChild 本来只能接受子类型，如果变成接受父类型参数则不合理。</font></p><p>想一想，一个方法的参数接受的是子类，但是把父类传进去，是不是只有强制类型转换？但是强制类型转换是不是又涉及到这个『父类实际上装的并不是这个子类』问题呢？</p><p>说实话，逆变确实感觉更绕，但从结果上来看，又能感觉确实应当如此。</p><p>泛型委托也是一样的道理：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action<span class="token punctuation">&lt;</span>Parent<span class="token punctuation">></span></span> parentAction <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Action<span class="token punctuation">&lt;</span>Child<span class="token punctuation">></span></span> childAction <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 报错，因为如果赋值成功，调用 parentAction (childAction) 就可以传入父类型了</span></pre></td></tr><tr><td data-num="4"></td><td><pre>parentAction <span class="token operator">=</span> childAction<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 正常赋值，childAction 只能接受 Child 类型，parentAction 接受 Child 类型符合父类指向子类的关系</span></pre></td></tr><tr><td data-num="6"></td><td><pre>childAction <span class="token operator">=</span> parentAction<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>协变 (out) 逆变 (in）：数组是协变的 - 子类数组可以隐式转为父类数组使用，只能用于『数组、泛型委托、泛型接口』，协变用于返回值隐式转为父类 (容器)，逆变用于传入值可以被隐式转为子类 (容器)(当然在调用时类型就变成确定了)，不变：不可互转，变体仅适用于引用类型。</p><ul><li>逆变常见是 Action &lt;子类&gt;=Action &lt; 父类 &gt;，参数为父类的委托赋值给参数子类的委托，调用时必须传入子类对象，根据面向对象规则子类一定包含父类字段或方法，可以正常调用</li><li>协变常见的比如 List 实现的 IEnumerable，正常情况下 List &lt;子类型&gt; 无法赋值给 List &lt; 父类型 &gt;，这个接口就标记了协变，使得可以声明 IEnumerabl &lt; 父类型 &gt; = List &lt; 子类型 &gt;</li><li>也可以简单记为：协变可以使得声明为父类的泛型可以装载子类，逆变使得声明子类的泛型可以可装载父类，其最终执行的返回值、参数符合里氏替换原则。</li></ul><p>对于这两者，从表现上来看：</p><ul><li>协变：声明的泛型容器子类可以赋值父类</li><li>逆变：声明的泛型容器父类可以赋值子类</li></ul><p>从调用结果上来看：</p><ul><li>协变：返回结果符合里氏替换原则，返回值为父类型的方法也可以返回子类型</li><li>逆变：接收参数符合里氏替换原则，参数为父类型的方法可以接受子类型的参数</li></ul><p>所以回到前面的一个问题：对于同一个模板参数 T ，协变和逆变不能同时存在，为什么呢？</p><blockquote><p>仔细考虑一下，如果一个接口参数同时支持协变和逆变，那么上述测试的赋值方式就必须同时双向支持，这样就会导致出现『参数为子类型的接口，可以传入父类型』，这是不合法的。<br />反之亦然，返回参数为子类型的接口，返回了实际为父类型的对象，也是不合法的。</p></blockquote><p>C# 中常见的自带协变逆变的接口或委托：</p><ul><li><code>IEnumerable&lt;out T&gt;</code></li><li><code>IEnumerator&lt;out T&gt;</code></li><li><code>System.Linq.IQueryable&lt;out T&gt;</code></li><li><code>IComparer&lt;in T&gt;</code></li><li><code>IComparable&lt;in T&gt;</code></li><li><code>IEqualityComparer&lt;in T&gt;</code></li><li><code>IReadOnlyList&lt;out T&gt;</code></li><li><code>TResult Func&lt;in T, out TResult&gt;(T arg) 等</code></li><li><code>void Action&lt;in T&gt;(T obj) 等</code></li><li>数组默认协变</li></ul><p>—————————————————————————————————————————</p><blockquote><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9zdGFuZGFyZC9nZW5lcmljcy9jb3ZhcmlhbmNlLWFuZC1jb250cmF2YXJpYW5jZQ==">covariance-and-contravariance</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVlZTdHVkeS9wLzExNDA0MzAwLmh0bWw=">C# - 协变、逆变 看完这篇就懂了</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQ0xSMDEwL3AvMzI3NDMxMC5odG1s">逆变与协变详解 </span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTmlucHV0ZXIvYXJjaGl2ZS8yMDA4LzExLzIyL2dlbmVyaWNfY292YXJpYW50Lmh0bWw=">.NET 4.0 中的泛型协变和反变</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;关于协变和逆变，早在前些日子就在想整理一下了，不过由于前几天研究了下 &lt;a href=&quot;&quot;&gt;Unity 的阴影与光照烘焙&lt;/a&gt; ，所以一直放在心上却没有实施，都忘</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity 的阴影与光照烘焙</title>
    <link href="https://wangjiaying.top/2022/12/06/Unity%E7%9A%84%E9%98%B4%E5%BD%B1%E4%B8%8E%E5%85%89%E7%85%A7%E7%83%98%E7%84%99/"/>
    <id>https://wangjiaying.top/2022/12/06/Unity%E7%9A%84%E9%98%B4%E5%BD%B1%E4%B8%8E%E5%85%89%E7%85%A7%E7%83%98%E7%84%99/</id>
    <published>2022-12-06T10:32:41.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>前几天跟同事讨论 Unity Lightmap ，在 Shader (自定义) 中是怎么取的，然后我说 Unity 在 Shader 中直接会给数据，调用 Unity 提弄函数直接采样就行了。</p><p>同事表示说，这个光照贴图 UV 呢？哪里取。</p><p>当时也是回答说是 Unity 直接提供的，虽说实际也差不多，不过后面下来又想了想，细节方面也已经记不清了。</p><p>再想到过去研究光照这块，早已经是多年前的事了，于是重新实际试了试，直接把光照烘焙这块都重新了解了下，简单做个记录。</p><p>主要使用工具有：</p><ul><li>Unity3D 2021.3.6f1</li><li>默认渲染管线</li><li>Forward RenderPath</li><li>Standard Shader</li></ul><h2 id="lightmapping-数据"><a class="anchor" href="#lightmapping-数据">#</a> LightMapping 数据</h2><p>首先回到上面那个问题，光照烘焙后，会为场景生成对应光照贴图，贴图数据本身位于场景同名同级的子目录中，Lighting 设置中 LightMaps 会自动被设置上去，此时直接在同场景对应静态物体上也能预览：</p><p><img data-src="/blogimages/2022/2022-12-06/m_40890511256b2a6d713c9161123984d2_r.png" alt="" /></p><p>默认情况下， Lightmap Index、TilingX、TilingY、OffsetX、OffsetY 这类参数虽然看起来是直接记录在场景对象上的，实际并不是，最简单的测试方法就是将该对象存储为 Prefab (或者复制一份)，就会发现 Prefab 上的 LightMap 信息已经丢失 —— 再放回去也是丢失状态 (可能是为了避免污染 Prefab)。<br />当然此时也可以通过记录 Render.lightmapIndex 之类的，通过脚本给还原。</p><p>动态加载 Lightmap 一般都该是通过这种方式进行：先给 LightmapSettings.lightmaps 赋值对应的 Lightmap 数据、贴图，然后给场景静态物体 Render 设置上对应的 lightmapIndex 等数据，Shader 中就能通过 Unity 提供的函数识别然后采样。</p><p>注 1：烘焙光照贴图 Shader 中通过 TEXCOORD1 采样：</p><blockquote><p>Unity stores baked lightmap UVs in its mesh in the Mesh.uv2 channel. This channel maps to the TEXCOORD1 shader semantic, and is commonly called “UV1”.</p></blockquote><p>注 2：实时光照贴图 Shader 中通过 TEXCOORD2 采样（勾选 Lighting-&gt;Realtime Lighting 生效）：</p><blockquote><p>Unity can use data in the Mesh.uv3 channel as input for the real-time lightmap UV calculations. Mesh.uv3 maps to the TEXCOORD2 shader semantic, and is commonly called “UV2”.</p></blockquote><h2 id="光源与阴影"><a class="anchor" href="#光源与阴影">#</a> 光源与阴影</h2><p>每一个光源，若光源是实时的，对于动态物体至少是双倍消耗，对于静态物体也一样。</p><p>消耗点主要在于动态阴影上，在 Forwardbase Render Path 中，绘制阴影分为两部分：自己接收阴影以及投射阴影，MeshRender 上也可以单独在 Lighting 选项设置开关。</p><ul><li>是否有阴影跟三个条件有关：<ul><li>(1) Shader 中的 接收投射阴影 Pass</li><li>(2) Render 上的接收投射开关</li><li>(3) 光源是否设置阴影</li></ul></li></ul><p>投射阴影的 Pass 是特有的一个，它会将自身到光源的方向渲染至一张深度图，投射及采样的大概步骤如下：</p><ul><li><p>Shader 中阴影投射 Pass 必须：</p><ul><li>打 Tags {&quot;LightMode&quot;:&quot;ShadowCaster&quot;}，标记该 Pass 专用于阴影投射</li><li>增加预编译指令 #pragma multi_compile_shadowcaster</li><li>在顶点、片段中调用 Unity 提供的预定义进行处理：V2F_SHADOW_CASTER、TRANSFER_SHADOW_CASTER_NORMALOFFSET、SHADOW_CASTER_FRAGMENT<ul><li>V2F_SHADOW_CASTER：顶点到片段数据变量，直接在 v2f 定义即可</li><li>TRANSFER_SHADOW_CASTER_NORMALOFFSET：在顶点 Shader 函数中计算了 物体顶点世界坐标 -(减) 光源坐标，即当前顶点到光源向量</li><li>SHADOW_CASTER_FRAGMENT：在片段 Shader 函数中将顶点到光源向量转长度，计算深度 (光源设置的 shadowbias 就在这里用的：UnityEncodeCubeShadowDepth ((长度 + unity_Light_ShadowBias.x)*_LightPositionRange.w))</li></ul></li></ul></li><li><p>Shader 中阴影接收 Pass 必须：</p><ul><li>打 Tags {&quot;LightMode&quot;:&quot;ForwardBase&quot;}，标记该 Pass 为向前渲染</li><li>增加预编译指令 #pragma multi_compile_fwdbase</li><li>在顶点、片段中调用 Unity 提供的预定义进行处理：<ul><li>SHADOWCOORDS (ID)：v2f 结构体使用，ID 是个数值，表示使用的 TEXCOORD+ID，保存顶点函数通过 ComputeScreenPos (o.pos) 计算的 showCoord 以传入片元着色函数 (定义的 ID 要避免与其它 TEXCOORD 产生冲突)</li><li>TRANFER_SHADOW (o)：通过顶点 clip 裁剪空间坐标计算屏幕空间阴影采样坐标内部调用的是：ComputeScreenPos (o.pos)</li><li>SHADOW_ATTENUATION (i)：根据 showCoord 采样阴影颜色，返回叠加的阴影强度值。</li></ul></li></ul></li></ul><p>其中投射 Pass 是必须的一个单独 Pass，导致了额外 DrawCall 消耗。接收 Pass 则可以与正常 Pass 一块处理对颜色进行叠加。</p><p>在 Standard Shader 中，开启实时阴影的情况下一个普通的 Sphere 对象甚至产生了 3 个 DrawCall：</p><p><img data-src="/blogimages/2022/2022-12-06/m_919aead0b6648620444cd393ee1c38f0_r.png" alt="" /></p><p>1 个渲染深度<br /> 1 个渲染物体到光源向量<br /> 1 个渲染物体本身</p><p>理论上加上阴影的话，不是只会增加一个 ShadowCaster DrawCall 吗？为什么多渲染了 2 次？渲染深度是为了什么？</p><p>从上面 FrameDebugger 截图的信息中显示，额外的一个深度渲染依然是由 ShadowCaster 发起的，但是为什么呢？</p><p>其实，这是因为在 PC 平台的原因。</p><p>Unity Standard Shader 会判断对应平台，如果是手机平台，才会使用上述传统的 Shadowcaster 方式绘制阴影，而 PC 平台则会另外使用 『屏幕空间阴影』，因此才多额外一个 DrawCall 渲染物体的深度。</p><p>屏幕空间阴影原本应该是延迟渲染路径采用的方法，Unity 在默认渲染管线下，对支持的平台的前向渲染路径也采用相同方式，可以减少 OverDraw 但是会增加 DrawCall。</p><p>切换至 Adnroid 平台，再利用 FrameDebugger 查看：</p><p><img data-src="/blogimages/2022/2022-12-06/m_0ac8f9f53256d5e74b1ff0d17f2b99cc_r.png" alt="" /></p><p>1 个渲染物体到光源向量<br /> 1 个渲染物体本身</p><p>对上号了。</p><h2 id="烘焙"><a class="anchor" href="#烘焙">#</a> 烘焙</h2><p>烘焙只用于静态物体，可以让静态物体单独采样烘焙好的贴图，而非实时光源，减少计算。</p><p>烘焙后的效果 —— 离线渲染自然也会比实时渲染效果好。</p><p>Light Probe Group：根据官方文档及经过测试表明，该组件使得已烘焙的间接光照效果可以施加于动态物体上，更多是对内存消耗。（烘焙静态物体不使用，查看静态对象面板，烘焙后的 Light Probe 选项是置灰 Off 无法修改的）</p><p>Reflection Probe：对动态、静态对象都有影响，配合 Light Probe Group 效果更好。</p><p>对于烘焙的三个模式，官方文档解释有：</p><blockquote><ul><li>Baked Indirect 模式将实时直接光照与烘焙间接光照结合在一起，提供实时阴影。这种光照模式提供逼真的光照和合理的阴影保真度，适用于中档硬件。</li></ul></blockquote><ul><li>Shadowmask 模式将实时直接光照与烘焙间接光照结合在一起，为远处的游戏对象启用烘焙阴影，并将烘焙阴影与实时阴影自动融合。这是最真实但也是最耗费资源的光照模式。您可以使用质量设置 (Quality Settings) 来配置其性能和视觉保真度。这种光照模式适用于高端或中档硬件。</li><li>Subtractive 模式提供烘焙的直射和间接光照，仅针对一个方向光渲染直接实时阴影。这种光照模式不能提供特别逼真的光照效果，适合于风格化的艺术效果或低端硬件。</li></ul><h3 id="mixlighting"><a class="anchor" href="#mixlighting">#</a> MixLighting</h3><ul><li>！混合灯光会大量 (相比 Baked 模式) 增加 Batches、顶点数量，它对静态物体也会产生 Baches ，如果不是一定需求阴影最好还是用纯 Baked</li></ul><p>测试场景为：</p><ul><li>一个平行光 + 一个点光源</li><li>10 个静态物体，2 个动态物体</li></ul><h4 id="backed-indirect"><a class="anchor" href="#backed-indirect">#</a> Backed Indirect</h4><ul><li>Backed Indirect：只烘焙间接光，灯光效果、阴影必须设置为 Backed 才会真的被烘焙，否则 (Mixed) 静态物体都会直接走实时计算。（消耗很高）</li></ul><blockquote><p>Shadow Distance：范围内的值使用实时阴影，超过此距离则不再渲染阴影。<br /><font color=red>注：Mixed 点光源在 Shadow Distance 内对所有物体产生阴影，因为是实时的。</font></p></blockquote><p>如图所示，烘焙后开启灯光 + 隐藏灯光：<br /><img data-src="/blogimages/2022/2022-12-06/m_8f9e6b0a707f474dc2616ee926fad357_r.png" alt="" /></p><h4 id="subtractive"><a class="anchor" href="#subtractive">#</a> Subtractive</h4><ul><li>Subtractive：Mixed 设置的灯光直接光和间接光都会被烘焙，被烘焙的静态物体在运行时不占用实时光计算，动态物体则单独走实时计算。</li></ul><blockquote><p>Shadow Distance：范围内的值动态对象使用实时阴影，超过此距离则不再渲染阴影。<br /><font color=red>注：Mixed 点光源对动态物体不产生阴影。</font></p></blockquote><p>如图所示，烘焙后开启灯光 + 隐藏灯光：<br /><img data-src="/blogimages/2022/2022-12-06/m_b350fc47c8c1ea6da34cb43acd1634cb_r.png" alt="" /><br />从上图可以看出，点光源并未对物体形成阴影，只有平行光的阴影。</p><h4 id="shadowmask"><a class="anchor" href="#shadowmask">#</a> Shadowmask</h4><ul><li>Shadowmask：根据设置决定显示，这个选项可以配合 Setting-&gt;Quality-&gt;Shadows 使用</li></ul><blockquote><p>Shadow Distance：范围内的值使用实时阴影，超过此距离则使用烘焙阴影。<br />ShadowMask：静态物体使用烘焙阴影。<br />Shadow Cascades：阴影级联数量，官方文档解释说级联数量越多质量越高，性能消耗越大。但是经过测试，开启后阴影变硬，性能消耗是感觉到了，质量上反而觉得更难看。<br /><font color=red>注：Mixed 点光源在 Shadow Distance 内对所有物体产生阴影，因为是实时的。</font></p></blockquote><ul><li>Mixed 设置的灯光必须存在场景中才能生效，烘焙后隐藏 Light 就 (对静态物体也) 无效了。具体表现取决于 Quality Shadowmask Mode 设置。<br />两种设置模式中：<ul><li>Shadow Distance：在范围内静态物体也是实时光，范围外烘焙光，<s>当 Distance 设置为 0 时与 Shadowmask 消耗一致</s> (静态物体均使用烘焙阴影)—— 比 Shadowmask 消耗还低，因为... 没有动态物体的实时阴影了，但是这样不如直接用 Subtractive 消耗更低。</li><li>Shadowmask：静态物体始终使用烘焙阴影，动态物体使用实时阴影。</li></ul></li></ul><p>烘焙后相比 Backed Indirect 多了一张 Shadowmask 贴图，实际测试近距离下同一个场景效果及 Batches 与 Backed Indirect 基本一致（因为 Shadow Distance 都是实时阴影）</p><p>如图所示，烘焙后 ShadowDistance+ShadowMask 模式：</p><p><img data-src="/blogimages/2022/2022-12-06/m_b20be5022100021ace39a857015451aa_r.png" alt="" /></p><h3 id="shader-使用-lightmap"><a class="anchor" href="#shader-使用-lightmap">#</a> Shader 使用 Lightmap</h3><p>大致上分为四步：</p><ul><li>顶点着色器接收参数结构 定义 float2 texcoord1 : TEXCOORD1 以接收 Unity 传入的光照 uv</li><li>顶点着色器为 uv 做一次转换： v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw</li><li>片段着色器调用内置函数 DecodeLightmap 对 unity_Lightmap 采样颜色</li><li>与物体像素本来颜色叠加混合</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p><s>目前测试下来，唯一的问题就是在 Forward RenderPath 下，烘焙光照中，仅平行光能被烘焙为静态对象的阴影，点光源只能用实时阴影。<br />表现情况是：点光源设置为 Baked 模式，仅光源颜色信息被烘焙至光照贴图，阴影却没有。</s></p><p>上述结论为错误操作导致！<br />Point Light 和 Directional Light 均有 『Baked Shadow Radius』和『Baked Shadow Angle』，合适的值可以让阴影被烘焙得更加柔和，但两者参数范围是完全是不同的，若光源设置过大，会导致直接丢失阴影 —— 可能在测试过程中不小心动到，导致了上述错误的结论。</p><p>经过测试，可以确定 Subtractive 消耗最低，Backed Indirect 和 Shadowmask 消耗都不少，按照消耗多少可以排序为：</p><ul><li>Shadowmask(Shadow Distance Mode)-&gt;Backed Indirect-&gt;Shadowmask(Shadowmask Mode)-&gt;Subtractive</li></ul><p>对比：</p><ul><li>Shadowmask：<font color=red>烘焙间接光照、最多四个光源的 shadowmask</font>(超出会直接将阴影及光照烘焙至光照贴图上，降级与 Subtractive 差不多)，所有对象均为实时直接光照。(比另外两种多了一张 Shadowmask 贴图)，动态与静态阴影可以存在融合。<ul><li>Shadow Distance Mode：范围内静态、动态均为实时直接光照、阴影，范围外静态对象为烘焙阴影。</li><li>Shadowmask Mode：静态对象使用 实时直接光照、烘焙间接光照、阴影、范围内动态对象为实时阴影 (同上比另外两种多了一张 Shadowmask 贴图，最多可存 4 个灯光的 shadowmask，可与动态物体阴影混合)。</li></ul></li><li>Backed Indirect：<font color=red>仅烘焙间接光</font>，范围内静态、动态均为实时直接光照、阴影，范围外无阴影。</li><li>Subtractive：<font color=red>静态对象的所有直接光照、间接光照、阴影均烘焙</font>、范围内动态对象为实时阴影，范围外无阴影。Mixed 点光源对动态物体无阴影 (这次应该没错了吧？)。静态物体无高光效果 (使用 Reflection Probe 会有改善)。</li></ul><p>其它重要设置：</p><ul><li>Shadow Distance：范围内采用实时阴影，实际情况合理设置，在 Shadow Resolution 阴影分辨率不变的情况下，Shadow Distance 越大，显示质量反而可能降低。</li><li>Shadow Cascades：只对方向光有效，可以将阴影的渲染划分成对应的几块区域，提升近处阴影的分辨率占用，减轻近处阴影的锯齿感，当然也会产生更多性能消耗。经过实测开启后阴影会变得更加清晰 (更硬)。</li><li>Shadow Projection：默认为 Stable Fit，整体阴影分辨率不变的情况下 Close Fit 可以进一步的提高近处物件的阴影分辨率，同时也有更高的开销</li><li>光照贴图 UV 可以在模型设置上启用 Generate Lightmap UVs 自动生成。</li><li>Direction Mode：设置为 Direction 会多烘焙一张光源方向贴图，可用于模型法线计算。</li><li>Lightmap Resolution (像素 / 单位)：光照图占用像素的全局值，设置越大越精细烘焙越久，当占用量超出 MaxLightMapSize 就会导致烘焙出多份光照贴图的情况。</li><li>Scale in Lightmap (物体对象上的设置)：影响烘焙此物体在光照图上占用的精度。</li></ul><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuLzIwMjEuMy9NYW51YWwvTGlnaHRpbmdHaVV2cy5odG1s">LightingGiUvs</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuLzIwMjEuMy9Eb2N1bWVudGF0aW9uL01hbnVhbC9saWdodGluZy1tb2RlLmh0bWw=">lighting-mode</span></li><li><span class="exturl" data-url="aHR0cDovL21hLXlpZG9uZy5jb20vMjAxNy8wOS8wMi9taXhlZC1saWdodGluZy1saWdodG1hcC1zaGFkZXItaW4tdW5pdHkv">mixed-lighting-lightmap-shader-in-unity</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3plbmdqdW5qaWU1OS9hcnRpY2xlL2RldGFpbHMvMTExMzU2NjM2">Unity 接收阴影</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80Nzg0MzE2NzE=">Unity 中的混合光照</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODg0MTk1Mg==">Unity 移动平台下的光照烘焙及优化</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4OTYyMTY2Ng==">Unity 为什么使用 screen space shadow</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;前几天跟同事讨论 Unity Lightmap ，在 Shader (自定义) 中是怎么取的，然后我说 Unity 在 Shader 中直接会给数据，调用 Unit</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="Shader" scheme="https://wangjiaying.top/categories/Unity3D/Shader/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="图形学" scheme="https://wangjiaying.top/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="Shader" scheme="https://wangjiaying.top/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>打包 AssetBundle 的基础规则整理</title>
    <link href="https://wangjiaying.top/2022/11/23/%E6%89%93%E5%8C%85AssetBundle%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86/"/>
    <id>https://wangjiaying.top/2022/11/23/%E6%89%93%E5%8C%85AssetBundle%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86/</id>
    <published>2022-11-23T10:12:11.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>之前其实有写一篇 『<a href="">AssetBundle 的实际测试与总结</a>』的文章，不过现在看了下，感觉漏了一些，而且不够完善。</p><p>但是感觉改又不好改了，于是新建了一篇文章，重新整理一下。</p><p>主要使用工具有：</p><ul><li>Unity3D 2018.4.36f1</li><li>Unity3D 2021.3.6f1</li><li>Microsoft Visual Studio 2022</li><li>Unity 工具：AssetBundles-Browser-1.7.0</li></ul><h2 id="功能简介"><a class="anchor" href="#功能简介">#</a> 功能简介</h2><p>已知目前 Unity 主要提供了两种方式打 AssetBundle 包</p><ul><li>一种是全打，根据整个项目资源的 AssetBundleName 标记自动生成，该过程全自动化，只有设置 AssetBundleName 这个步骤可以人为控制</li><li>另一种是单打，根据传入的资源路径、指定的 AssetBundleName 单独生成指定资源的 AssetBundle 包</li></ul><p>均为一个接口的两个重载：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 全打接口，根据项目已设置 AssetBundleName 的资源</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 传入参数为 整个输出路径、打包选项及打包平台</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AssetBundleManifest</span> <span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> outputPath<span class="token punctuation">,</span> <span class="token class-name">BuildAssetBundleOptions</span> assetBundleOptions<span class="token punctuation">,</span> <span class="token class-name">BuildTarget</span> targetPlatform<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 单打接口，可以传入一个『需要打包』的资源列表、打包选项及打包平台</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AssetBundleManifest</span> <span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> outputPath<span class="token punctuation">,</span> <span class="token class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> builds<span class="token punctuation">,</span> <span class="token class-name">BuildAssetBundleOptions</span> assetBundleOptions<span class="token punctuation">,</span> <span class="token class-name">BuildTarget</span> targetPlatform<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="公共参数"><a class="anchor" href="#公共参数">#</a> 公共参数</h3><p>其中公共参数为：</p><ul><li>BuildAssetBundleOptions</li><li>BuildTarget</li></ul><h4 id="buildtarget"><a class="anchor" href="#buildtarget">#</a> BuildTarget</h4><p>BuildTarget 就像名字一样很简单，主要是具体为哪个平台打的资源包，最简单的方式是直接使用  <code>EditorUserBuildSettings.activeBuildTarget</code>  即可。</p><p>或者利用预定义：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">if</span> UNITY_STANDALONE_WIN</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//BuildTarget.StandaloneWindows64</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">elif</span> UNITY_IPHONE</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//BuildTarget.iOS</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">elif</span> UNITY_ANDROID</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//BuildTarget.Android</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>单独分平台判断也可以 (用预定义的话，有必要的情况下这里还可以做些其它操作)。</p><h4 id="buildassetbundleoptions"><a class="anchor" href="#buildassetbundleoptions">#</a> BuildAssetBundleOptions</h4><p>默认情况下 AssetBundle 压缩格式为 LZMA，这个选项可以额外选择设置为 不压缩 或者 LZ4 压缩格式：</p><pre><code>BuildAssetBundleOptions.UncompressedAssetBundleBuildAssetBundleOptions.ChunkBasedCompression</code></pre><p>可能有人会好奇两个同时传入会如何 (比如说我)?</p><p>试了下编辑器会直接报错，提示：</p><blockquote><p><font color=red>Cannot use options UncompressedAssetBundle and ChunkBasedCompression at the same time.</font></p></blockquote><p>其它比较重要的还有：</p><h5 id="1buildassetbundleoptionsdeterministicassetbundle"><a class="anchor" href="#1buildassetbundleoptionsdeterministicassetbundle">#</a> 1）BuildAssetBundleOptions.DeterministicAssetBundle</h5><p><s>这个参数会保证同样的资源每次打出来的 AssetBundle 包二进制一致。</s></p><p>~~ 我的测试方式是：不传入该参数，先全打一次资源备份好，然后删除项目的 Library 再全打一次，就发现新的资源大小虽然跟原本的一样，但是内部二进制就有很大的不同了：<br />~~<br /><s>(以下错误尝试及结论内容已删除)</s></p><p>经过反复尝试，多次试验后得出结果：DeterministicAssetBundle 似乎并非这个作用。<br />之所以第一次删除 Library 后打包得出结果不一致，主要是因为 Library 生成的缓存不一致。在试验中，除了第一次删除试验，之后每次重新删除 Library ，再重新打开，后续工程打出来的 AssetBundle 包对比文件均一致了。</p><p>尝试在一个工程同时打出带 DeterministicAssetBundle 及不带该选项的资源包，结果最终生成的二进制 AssetBundle 资源包同样完全一致：</p><p><img data-src="/blogimages/2022/2022-11-23/m_bc96359133bb56dd0d1223b6639bf8d5_r.png" alt="" /></p><p>只有在单打某个资源时，该选项打出的资源包才会产生差异。</p><p>说明这个选项，至少在同一个环境下全打资源是不会对 AssetBundle 资源包产生任何影响的。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkQXNzZXRCdW5kbGVPcHRpb25zLkRldGVybWluaXN0aWNBc3NldEJ1bmRsZS5odG1s">官方文档说明</span>：</p><blockquote><p>重新构建资源包时，资源包中对象的 ID 将在完成重新构建后 保持不变。<br />从 DeterministicAssetBundle 中加载内容也比一般资源包要慢。</p></blockquote><p>那么这个选项究竟是起什么作用呢？有坏处，却没说明白好处。</p><p>官方的说明文档信息太少了，反复斟酌之后，偶然看到了说明的最后一行文字：</p><blockquote><p>注意：此功能会始终启用。</p></blockquote><p>...... 原来如此？难怪传入不传入，都没有影响。</p><p>后来又经过多方查找后，还看到有说找 Unity 官方确认，确定 Unity5.X 以后的确是默认加入的选项了：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbnN3ZXIudXdhNGQuY29tL3F1ZXN0aW9uLzVhN2E4YjIzODQ3ODAyMjU4YTA2NTAzOA==">https://answer.uwa4d.com/question/5a7a8b23847802258a065038</span></p></blockquote><p>然后后续继续查找资料，在 Unity 官方论坛 <a href="https://forum.unity.com/threads/is-the-deterministic-asset-bundle-option-obsolete.455510/">Is the deterministic asset bundle option obsolete?<br /></a> 帖子也提到了同样的困惑，Unity 官方人员回答说该选项已经无效：</p><blockquote><p>It's a bit of a mess, but yes, it's enabled permanently - the option has no effect.</p></blockquote><p>但是为什么单打时，这个选项针对同一个资源，又会产生影响了？</p><p>测试单打资源显示：</p><pre><code>BuildAssetBundleOptions.None: 54.7 KB (56,036 字节)BuildAssetBundleOptions.DeterministicAssetBundle：54.7 KB (56,039 字节)</code></pre><p>传入 DeterministicAssetBundle 选项时增加了 3 个字节大小，那么是否可以怀疑，单打时依然会有影响，官方说的『始终启用』仅针对全打资源的情况？</p><p>毕竟单打时的引用关系处理，跟全打也是有差异的。</p><p>所以这里可以总结为：该选项主要用于生成确定性 ID 以处理重新打包资源时依赖、引用关系，确保增量打包时没有真实修改的资源不会被重打。目前 Unity 全打接口已默认包含该项，且无论是否传入均不影响，单打资源时才会有影响且导致资源产生差异。</p><h5 id="2buildassetbundleoptionsdisablewritetypetree"><a class="anchor" href="#2buildassetbundleoptionsdisablewritetypetree">#</a> 2）BuildAssetBundleOptions.DisableWriteTypeTree</h5><p>禁用写入类型树。</p><p>根据相关介绍，这个为了给 Unity 跨版本之间做兼容性用的，在真机包出包版本与热更资源都是由一个版本出包情况下，这个选项可以考虑传入以优化性能。</p><p>禁用后可以降低包体和内存并提高加载效率，但是可能会造成 Unity 版本的兼容问题。</p><p>原理是根据序列化的字段进行反序列化，例如我们资源 meta 版本都有 serializedVersion ，以区分各个版本序列化选项情况，不同版本每个选项可能并不一致。</p><p>开启写入类型树时，Unity 在打 AssetBundle 时会先把数据内容的树状结构先写入一遍，然后再写入对应值，这样在加载 AssetBundle 时，先解析出字段的树状结构，然后与真机包包体的解析结构进对比，再解析实际数据值，处理缺失或多余字段，避免反序列化出错 (错位)。</p><p>如果不写入，那就是直接根据顺序去反序列化了，换了 Unity 版本字段可能就会反序列化错位，导致出现问题。</p><p>为了确定上述说法，可以进行一个简单的测试。</p><p>我用 Unity2018.4.36f1 打了两个 Cube.prefab AssetBundle 资源包，分为默认启用以及禁用，压缩模式为 不压缩：</p><p><img data-src="/blogimages/2022/2022-11-23/m_ce296dced15e16733103cfb044033bab_r.png" alt="" /></p><p>然后在 Unity2021.3.6f1 中进行加载测试：</p><p><img data-src="/blogimages/2022/2022-11-23/m_334251ea9573f4af016c1fdf351a5600_r.png" alt="" /></p><p>默认打包模式是可以直接读取的 (虽然按照名字加载失败了)，确实加载到了对应资源。<br />场景中也可以利用  <code>GameObject.Instantiate(x[0] as GameObject);</code>  正确实例化出来。</p><p>而换成加载 『cube2018_disablewritetypetree』则直接报错，提示：</p><blockquote><p>The AssetBundle 'Assets\MyBundles\cube2018_disablewritetypetree' could not be loaded because it contains run-time classes of incompatible version. Rebuild the AssetBundle to fix this error.</p></blockquote><p>对于上述测试，利用 AssetBundles-Browser 也可以直接看出问题，默认的可以预览 Cube 各项属性，DisableWriteTypeTree 的资源版本则报同样错误。</p><p>如图所示：</p><p><img data-src="/blogimages/2022/2022-11-23/m_d2487c01c62a4a665b66a3d1deab67a2_r.png" alt="" /></p><p>当然，这个兼容性也有代价，首先每个 AssetBundle 都得包含额外的 TypeTree 信息，加载 AssetBundle 资源时会先构建这个 TypeTree 结构，然后再解析字段，增加部分 CPU 和 内存消耗。</p><h5 id="3buildassetbundleoptionsforcerebuildassetbundle"><a class="anchor" href="#3buildassetbundleoptionsforcerebuildassetbundle">#</a> 3）BuildAssetBundleOptions.ForceRebuildAssetBundle</h5><p>默认为增量构建，基于上一次的打包结果，对发生变化的资源重新打包，若传入这个参数，会完全重新打一次。<br />经过测试，增量构建的关键点在于 Unity 为每个 AssetBundle 资源同时生成的 .manifest 文件。<br /><font color=red>注 1：删除文件的 .manifest 也会产生同样的效果。<br />注 2：我们项目的 AssetBundle 关系由自己维护，尝试打完了之后删除 .manifest 节省空间，发现会被重新全打一次。<br />注 3：关系总表的 .manifest 对其它资源不产生影响，只删除某个资源的 .manifest 就会导致该资源直接被重打。</font></p><h5 id="4disableloadassetbyfilename-disableloadassetbyfilenamewithextension"><a class="anchor" href="#4disableloadassetbyfilename-disableloadassetbyfilenamewithextension">#</a> 4）DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension</h5><p>禁用使用 名字加载，这两个选项只影响内置的 AssetBundle.LoadAsset 方法。</p><p>如通过 AssetBundle.LoadAllAssets 加载后根据名字判断依然可行。</p><p>文件名 + 扩展名会在加载成功后生成，取决于项目的 AssetBundle 资源具体加载方式，可以传入减少一点点内存占用。例如通过全路径或者 AssetBundleRequest allAssets 自己判断方式。</p><p>例如，我们通常通过 AssetBundle.LoadAllAssets (LoadAllAssetsAsync) 加载全部资源，然后管理，AssetBundle 自带的 LoadAsset 接口是不会使用的，此时就可以禁用名字加载。</p><p>测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">string</span></span> pathDir <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">AssetBundle</span> assetBundle <span class="token operator">=</span> AssetBundle<span class="token punctuation">.</span><span class="token function">LoadFromFile</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">,</span> Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> x <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAllAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Object</span> o <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Cube"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Object</span> o1 <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Cube.prefab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Object</span> o2 <span class="token operator">=</span> assetBundle<span class="token punctuation">.</span><span class="token function">LoadAsset</span><span class="token punctuation">(</span><span class="token string">"Assets/Cube.prefab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OK2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>表现如下：</p><p><img data-src="/blogimages/2022/2022-11-23/m_5b4b541cc358119d2bdfde8bf1e09a6d_r.png" alt="" /></p><p>—————————————————————————————————————————</p><p>最后，简单测试一下各个不同选项打出来资源大小：</p><h5 id="图片"><a class="anchor" href="#图片">#</a> 图片</h5><pre><code>LZMA：tex_default:272 KB (279,003 字节)tex_disablename：272 KB (278,994 字节)tex_disablewritetypetree：271 KB (278,163 字节)tex_disablewritetypetree_and_disablename：271 KB (278,147 字节)Uncompress:tex_default：466 KB (477,968 字节)tex_disablename：466 KB (477,984 字节)tex_disablewritetypetree：466 KB (477,904 字节)tex_disablewritetypetree_and_disablename：466 KB (477,936 字节)LZ4:tex_default：302 KB (309,643 字节)tex_disablename：302 KB (309,653 字节)tex_disablewritetypetree：300 KB (308,172 字节)tex_disablewritetypetree_and_disablename：300 KB (308,183 字节)</code></pre><h5 id="prefab"><a class="anchor" href="#prefab">#</a> Prefab</h5><pre><code>LZMA：tex_default：54.7 KB (56,036 字节)tex_disablename：54.7 KB (56,040 字节)tex_disablewritetypetree：47.6 KB (48,775 字节)tex_disablewritetypetree_and_disablename：47.6 KB (48,789 字节)Uncompress:tex_default：194 KB (198,880 字节)tex_disablename：194 KB (198,896 字节)tex_disablewritetypetree：116 KB (119,168 字节)tex_disablewritetypetree_and_disablename：116 KB (119,200 字节)LZ4:tex_default：80.2 KB (82,141 字节)tex_disablename：80.2 KB (82,148 字节)tex_disablewritetypetree：62.1 KB (63,668 字节)tex_disablewritetypetree_and_disablename：62.1 KB (63,678 字节)</code></pre><p>可以发现实际测试下来，在资源包大小上 DisableWriteTypeTree 影响更大，特别是 Prefab 资源，不压缩减少了 60% 左右、LZ4 模式减少了 25% 左右大小，LZMA 也有 13%。<br />虽然对纯图片资源这种 (其它音效之类一样) 减少不会很明显 —— 差不多就 1KB 的样子，毕竟图片资源的 meta 项本身也不会太多。</p><p>相对来说禁止名字加载对资源包的大小基本就没什么影响了，顶多几个字节的差异 (甚至是增加大小)，不过据说 DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension<br /> 更多是减少运行时内存 —— 这一点在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1NjcmlwdFJlZmVyZW5jZS9CdWlsZEFzc2V0QnVuZGxlT3B0aW9ucy5EaXNhYmxlTG9hZEFzc2V0QnlGaWxlTmFtZS5odG1s">官方文档</span> 也有明确说明，更详细的内存方面的对比，后续我会再进行详细测试。</p><h3 id="全打接口"><a class="anchor" href="#全打接口">#</a> 全打接口</h3><p>关于全打接口，大概可以总结如下基本规则：</p><ol><li><strong>资源与其引用资源都指定了不同的 AssetBunldeName ，会分别分离单打</strong></li><li><strong>没有指定 AssetBunldeName，那么会跟引用它的对象打一个包</strong></li><li><strong>没有指定 AssetBunldeName，存在多个对它的引用就会有多个副本，造成内存冗余</strong></li></ol><p>对于全打接口的工作原理，使用 AssetBundles-Browser 也可以比较清晰看出其关系。</p><p>设置对应的 AseetbundleName 之后，就会展示在 AssetBundles-Browser 中。</p><ol><li>Prefab 和 图片设置不同 AseetbundleName：<br /><img data-src="/blogimages/2022/2022-11-23/m_2bd4afc7e2d136def3d3d0b3c35716bf_r.png" alt="" /></li><li>只设置 Prefab AseetbundleName:<br /><img data-src="/blogimages/2022/2022-11-23/m_06a422a91bf2e0782625afe388a5f7e2_r.png" alt="" /></li><li>不指定 AssetbunldeName，而又有多个对它产生引用的对象，AssetBundles-Browser 都会直接进行提示：<br /><img data-src="/blogimages/2022/2022-11-23/m_26177c9cb01b7f3e654c5b61cfd11c6b_r.png" alt="" /><br />若忽略提示，打包出来结果如下：<br /><img data-src="/blogimages/2022/2022-11-23/m_4b5774781fe0214bc8fa42a0fdae1c72_r.png" alt="" /><br />两个 Assetbunlde 包就分别包含了两份同样的图片资源。</li></ol><p>调用全打接口代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>对于上述设置一，会生成两个分别包含 RawImage (test1) 和 Tex (tex) 的 AssetBundle 资源包</li><li>对于上述设置二，会生成一个同时包含 RawImage 和 Tex 的 AssetBundle 资源包，名字为 『test1』</li><li>对于上述设置三，会生成两个同时包含 Prefab 和 图片的 AssetBundle 资源包，名字为 『test1』、『test2』</li></ul><p>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BlcmZhcmUvQXNzZXRTdHVkaW8=">AssetStudio</span> 进行观察打出的 AssetBundle 资源包，可以验证与上述关系一致。</p><h3 id="单打接口"><a class="anchor" href="#单打接口">#</a> 单打接口</h3><p>单打接口实际规则，跟全打有一点差异。</p><p>总结规则如下：</p><ol><li><strong>若只有主资源存在列表，无论引用资源是否有设置其它 AssetBundleName，其引用资源会自动与主资源打成一个包</strong></li><li><strong>若将主资源及其引用资源都传入，且引用资源有自己的 AssetBundleName ，那么会分别根据各自的 AssetBundleName 单打</strong></li><li><strong><s>若将主资源及其引用资源都传入，但引用资源没有设置自己的 AssetBundleName ，那么引用资源都打入主资源一个包里。</s>(注：此处应当是因为触发了第一项规则)</strong></li></ol><p>与『全打资源』最大的区别，大概要数第一项：无论被引用资源是否设置自己的 AssetBundleName，只要这次单打没有传入引用资源，那么就会被打入主资源包里。</p><p>单打测试代码：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelect(LZMA)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectLZMA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">PackSelect</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelect</span><span class="token punctuation">(</span><span class="token class-name">BuildAssetBundleOptions</span> opt<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> extName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">Object</span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span>activeObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>importer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span> <span class="token punctuation">?</span> importer<span class="token punctuation">.</span>assetBundleName <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> extName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> build <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上述『PackSelect』代码及上述资源为例，为 『RaweImage』『RaweImage2』及『Tex』分别设置不同的 AssetBunldeName，调用 PackSelect 传入各自的 AssetBunldeName 及资源路径分别进行单打操作，结果：<br /><img data-src="/blogimages/2022/2022-11-23/m_24dd53cc74994ba2914dce5568cb0a08_r.png" alt="" /><br />主资源及其引用图片被打进了一个包里。</p><p>对比调用 『PackALL』 全打资源结果：<br /><img data-src="/blogimages/2022/2022-11-23/m_a445e82bab3e8e6d2ae40826775a5bd0_r.png" alt="" /><br />其中 test1、test2 均引用了 tex 资源，从大小上看即可表明单打接口资源是被分别单打的了。</p><p>—————————————————————————————————————————</p><p>若单打资源，同时传入了主资源和引用资源呢？</p><p>稍微修改一下『PackSelect』代码，使其可以单打所有『当前选中』的资源：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelectALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectALL</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFiltered</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Assets<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">AssetBundleBuild<span class="token punctuation">[</span><span class="token punctuation">]</span></span> buildArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">[</span>o<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buildArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> importer<span class="token punctuation">.</span>assetPath <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        buildArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buildArray<span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>刚开始研究这个单打接口，或许会写出这种单打当前选中所有资源的代码，然后总结出错误的结论 (比如说我)：<s>若传入两个没有引用关系的资源，但是都为同一个 assetBundleName，单打会报错，只会生成其中一个资源的 assetBundle 包。</s></p><p>但要是深入一点测试、思考一下，就会发现这种写法是有问题的。</p><p>问题在哪儿呢？</p><p>首先尝试上述代码执行，选中两个设置了同一个 assetBundleName 的资源后，调用结果：</p><blockquote><p><font color=red>Trying to add file F:/Study/AssetbundleTest/Assets/MyBundles/tex.manifest to the list of ouptut files in the build report, but a file at that path has already been added.</font></p></blockquote><p>意思是添加的文件重复了，但明显资源名字是不同的，那问题可能就是在 assetBundleName？</p><p>然后往参数那边看，每一个 AssetBundleBuild 中的 assetNames 参数实际上是一个『数组』，也就是一系列的资源路径，所以对于单打接口，每个 AssetBundleBuild 都是独立的，它不会自动去判断传入的总列表中是否有重复的标签，因此需要我们手动去重：把同一个标签，重复的合并在一个结构中。</p><p>修改后代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AssetBundleTest/PackSelectALL"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackSelectALL</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> o <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFiltered</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Object<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Assets<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">List<span class="token punctuation">&lt;</span>AssetBundleBuild<span class="token punctuation">></span></span> assetBundleBuilds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>AssetBundleBuild<span class="token punctuation">></span></span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">AssetImporter</span> importer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">AssetBundleBuild</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        importer <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 判断是否存在重复</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        index <span class="token operator">=</span> assetBundleBuilds<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>assetBundleName <span class="token operator">==</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssetBundleBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            build<span class="token punctuation">.</span>assetBundleName <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetBundleName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> importer<span class="token punctuation">.</span>assetPath <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            assetBundleBuilds<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// 重复，则添加进去</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            build <span class="token operator">=</span> assetBundleBuilds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> newAssets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>build<span class="token punctuation">.</span>assetNames<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            newAssets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> importer<span class="token punctuation">.</span>assetPath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            System<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>assetNames<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newAssets<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> build<span class="token punctuation">.</span>assetNames<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            build<span class="token punctuation">.</span>assetNames <span class="token operator">=</span> newAssets<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            assetBundleBuilds<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> build<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    BuildPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>dataPath<span class="token punctuation">,</span> <span class="token string">"MyBundles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> assetBundleBuilds<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BuildAssetBundleOptions<span class="token punctuation">.</span>DeterministicAssetBundle<span class="token punctuation">,</span> EditorUserBuildSettings<span class="token punctuation">.</span>activeBuildTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>再次尝试，同一个 AssetBunldeName 没有引用关系的几个资源，顺利被打入同一个 AssetBundle 资源包。</p><h2 id="动画资源"><a class="anchor" href="#动画资源">#</a> 动画资源</h2><p>昨天主程会提到了动画脱壳，简单试一下资源包大小：</p><p><img data-src="/blogimages/2022/2022-11-23/m_0fbdab2ab9986238e383a031a9f9af5e_r.png" alt="" /></p><p>上述分别为：</p><p>anim_off：带 FBX 动画，关闭 Anim.Compression<br />animall：带 FBX 动画，Anim.Compression 为默认的 KeyFramReduction<br />animreopt：不带 FBX 动画，Anim.Compression 为默认的 KeyFramReduction<br />animreduce：不带 FBX 动画，Anim.Compression 为 Optimal</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>调用全打资源接口时：</p><ol><li><strong>资源与其引用资源都指定了不同的 AssetBunldeName ，会分别分离单打</strong></li><li><strong>没有指定 AssetBunldeName，那么会跟引用它的对象打一个包</strong></li><li><strong>没有指定 AssetBunldeName，存在多个对它的引用就会有多个副本，造成内存冗余</strong></li></ol><p>调用单打资源接口时：</p><ol><li><strong>若只有主资源存在列表，无论引用资源是否有设置其它 AssetBundleName，其引用资源会自动与主资源打成一个包</strong></li><li><strong>若将主资源及其引用资源都传入，且引用资源有自己的 AssetBundleName ，那么会分别根据各自的 AssetBundleName 单打</strong></li></ol><p>取决于项目资源加载管理，可采用的优化选项：DisableWriteTypeTree、DisableLoadAssetByFileName、DisableLoadAssetByFileNameWithExtension</p><p>例如，像我们项目通过 AssetBundle.LoadAllAssets (LoadAllAssetsAsync) 加载全部资源，然后管理，AssetBundle 自带的 LoadAsset (Name) 接口是不会使用的，此时就可以禁用名字加载。(正常情况下加载一个资源，一般来说也是使用完整路径的)</p><p>另外，通常出包以及出热更包必然也是同一个 Unity 版本 (应该不可能有 『项目还在线上就去动 release 分支 Unity 版本』的操作吧)，此时可以禁用写入类型树以优化内存及加载。</p><p><font color=red>其它：DeterministicAssetBundle 经测试与多方对比，可以认为全打资源默认始终包含该选项，仅单打资源时该项会对资源产生额外影响。(这大概也是为什么同为『始终启用』的 CollectDependencies 被标记为弃用，但它没有 —— 大概就是因为 DeterministicAssetBundle 对于单打该选项还有效)</font></p><blockquote><p>参考文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkUGlwZWxpbmUuQnVpbGRBc3NldEJ1bmRsZXMuaHRtbA==">BuildPipeline.BuildAssetBundles</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvTWFudWFsL0Fzc2V0QnVuZGxlcy1CdWlsZGluZy5odG1s">AssetBundles-Building</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIudW5pdHkuY24vcHJvamVjdHMvNjE1NjYyMjNlZGJjMmEwMDIxNTU3MzY0">Asset 的一生</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWJnYW1lL3AvMzk3MzE3Ny5odG1s">Unity AssetBundle 爬坑手记</span></li><li><a href="https://answer.uwa4d.com/question/5a7a8b23847802258a065038">AB 增量打包问题<br /></a></li><li><a href="https://forum.unity.com/threads/is-the-deterministic-asset-bundle-option-obsolete.455510/">Is the deterministic asset bundle option obsolete?<br /></a></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5LmNuL2NuL2N1cnJlbnQvU2NyaXB0UmVmZXJlbmNlL0J1aWxkQXNzZXRCdW5kbGVPcHRpb25zLkRldGVybWluaXN0aWNBc3NldEJ1bmRsZS5odG1s">DeterministicAssetBundle</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1NjcmlwdFJlZmVyZW5jZS9CdWlsZEFzc2V0QnVuZGxlT3B0aW9ucy5EaXNhYmxlTG9hZEFzc2V0QnlGaWxlTmFtZS5odG1s">DisableLoadAssetByFileName</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9hc3NldGJ1bmRsZXMtYW5kLWRlcGVuZGVuY2llcy4zNzc3NjAv">assetbundles-and-dependencies</span></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前其实有写一篇 『&lt;a href=&quot;&quot;&gt;AssetBundle 的实际测试与总结&lt;/a&gt;』的文章，不过现在看了下，感觉漏了一些，而且不够完善。&lt;/p&gt;
&lt;p&gt;但是</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="AssetBundle" scheme="https://wangjiaying.top/categories/Unity3D/AssetBundle/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="AssetBundle" scheme="https://wangjiaying.top/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder 扩容规则研究</title>
    <link href="https://wangjiaying.top/2022/11/18/StringBuilder%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99%E7%A0%94%E7%A9%B6/"/>
    <id>https://wangjiaying.top/2022/11/18/StringBuilder%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99%E7%A0%94%E7%A9%B6/</id>
    <published>2022-11-18T09:37:51.000Z</published>
    <updated>2022-12-22T03:29:48.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>在上面 <a href="">对项目字符串性能优化方式及测试</a> 文章中，我查看了 StringBuilder 的源码，并总结出了 StringBuilder 的一般及自动扩容规则：</p><p>容量足够的情况下，通过 unsafe 方法进行指针及直接内存操作：</p><ol><li>获取添加的字符串指针</li><li>获取字符数组待添加下标指针</li><li>调用 Buffer.Memcpy 进行内存拷贝进字符数组</li></ol><p>如果后续容量不够，则进行动态扩容，不过动态扩容不是直接扩容字符数组，而是通过单向链表的方式：</p><p><strong>将当前数据全部转移至『上一个』节点，然后自己创建一个新的字符数组进行处理。</strong></p><p>简单来说，就是创建一个新的 StringBuilder，把自己当前所有数据转移过去，自己创建一个新的数组继续继续处理余下的。</p><p>然后就一直有个疑问：如何做到每次扩容是之前的 2 倍大小的？</p><p>然后现在研究半天发现，都知道实现扩容的具体方法是通过单链表，2 倍扩容的原理其实已经是明面上的规则了：是个非常简单的原理，只是思维上一直没考虑到而已，所以作个记录。</p><p>这里前言先不说具体原理，从试验和测试开始，具体的留到文后总结再写吧。</p><h2 id="扩容测试"><a class="anchor" href="#扩容测试">#</a> 扩容测试</h2><p>StringBuilder 默认容量是 16 个字符，如果测试扩容的话，数量太大容易混淆。</p><p>因此我传设置了默认的容量 1，并依次传入 1、2、3、4、5，并打印每个数值 Append 之后容量大小，测试代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其结果为：</p><pre><code>12448</code></pre><p>可以发现，每次扩容容量都是以 2 倍递增，所以为什么呢？</p><p>用反编译工具对 StringBuilder 的源代码看了又看，有点想不明白。</p><p>想不明白就像试一试，直接上调试大法，断点打到 StringBuilder 里边去：</p><p><img data-src="/blogimages/2022/2022-11-18/m_28c3073b4ee0fe17074da5a4471f73b6_r.png" alt="" /></p><p>上述截图显示的是：当前 StringBuilder 容量为 2，且 Append (3) 的情况。</p><p>盯着这个看了下，计算了一下数值与结果，一个个分析下：</p><ul><li>minBlockCharCount 当前为 1</li><li>当前长度 Length 为 2</li><li>扩容长度为 Max (Length,minBlockCharCount)[8000 是翻倍上限，后续翻倍到这数量级后最多扩容 8000，除非传入字符串剩余字符大于 8000]</li><li>即扩容 Max (2,1)</li></ul><p>而 Length 在这里是个属性，点进 Length 去看：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 当前实际存储字符长度</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Length</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">get</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkOffset <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其由 m_ChunkOffset+m_ChunkLength 构成。</p><p>将代码往上一层的  <code>Append(char* value, int valueCount)</code>  方法移动：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 当空间不足走扩容逻辑时</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 当前剩余容量</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> num3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>num3 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 剩余容量大于 0，就先复制一部分填满</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//m_ChunkLength 设置为字符数组满长度</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 至少扩容长度 = 添加字符串长度 - 剩余已添加字符长度</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token class-name"><span class="token keyword">int</span></span> num4 <span class="token operator">=</span> valueCount <span class="token operator">-</span> num3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 执行扩容</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ExpandByABlock</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 将剩余字符复制进扩容后的字符数组（以前的已经变成链表的上一个节点了）</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkChars<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 设置当前 StringBuilder 已使用长度</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span>m_ChunkLength <span class="token operator">=</span> num4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>从这里可以看出，每次扩容之前，前一个数组必然是被填满的，也就是说：</p><ul><li>m_ChunkLength = 上一个节点实际使用字符长度</li><li>m_ChunkOffset 直接可以在扩容方法中看到，为前面所有节点的 m_ChunkLength (通过 += 赋值的)</li></ul><p>由此可以得出结果：在扩容的时候，Length=this.m_ChunkOffset + this.m_ChunkLength = 所有节点的总长度<br /> (注：只有在扩容的时候才是如此，否则 Capacity [this.m_ChunkChars.Length + this.m_ChunkOffset] 才是就算没装满的所有节点的总容量)</p><p>当依照 所有节点的总长度 创建一个新节点的时候，新节点的字符数组长度即为之前所有节点总和。</p><p>这时候统计的就是新的节点加上以前所有节点长度，两者相加：相当于就扩容了两倍！</p><p>例如旧的所有节点相加为 32，扩容的新节点为 32，那么新的总节点容量就是 64..... 以此类推。</p><p>然后就焕然大悟了，原来这么回事啊。</p><h2 id="性能测试"><a class="anchor" href="#性能测试">#</a> 性能测试</h2><p>现在知道扩容为什么是翻倍的了。</p><p>然后在这个过程中，突然想到插入问题，插入与追加显然是不同的方法：比较单链表的模式，每个链表节点都是一个单独数组，想往前面的数组插入值？</p><p>想想这种模式插入就不大好办，看了下 Insert 代码，插入一次就得创建一个 StringBuilder (除非之前的节点有空闲空间，正常情况下不可能)</p><p>而且，不遵守扩容规则：最大为扩容字符串长度，最小为默认的 16 个字符，然后重连链表结构。</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//MakeRooms：每次调用插入，都会先创建一个 StringBuilder 占位，然后填充数据，一一处理链表节点</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>m_MaxCapacity<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>m_ChunkPrevious<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果插入的下标正好还处于某一个节点字符数据中间，还需要遍历链表通过 CopyTo 移动数据，所以插入操作是比较耗时的。</p><h3 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h3><p>为此我尝试使用 TestRunner 进行测试，分别测试 追加、插入开始、插入中间、插入结束的性能。</p><p>每个操作分别进行 100000 次，测试代码如下：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> TestNum <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppend Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertStart Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertMiddle Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInsertEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestInsertEnd Capacity"</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppendNormalParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppendNormalParams Capacity："</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAppendFormatParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TestNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            builder<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">"X&#123;0&#125;Y"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"TestAppend Capacity："</span> <span class="token operator">+</span> builder<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p><pre><code>TestAppend (0.026s)---TestAppend Capacity104192TestAppendNormalParams (0.030s)---TestAppendNormalParams Capacity：304192TestAppendFormatParams (0.032s)---TestAppend Capacity：304192TestInsertStart (5.795s)---TestInsertStart Capacity100000TestInsertMiddle (2.852s)---TestInsertMiddle Capacity100000TestInsertEnd (0.069s)---TestInsertEnd Capacity100000</code></pre><p>由于插入操作必须对插入节点后续的节点作额外处理，因此插入越靠前消耗越大，可以看出即使是直接插入最后一个节点，也是比追加字符操作更为耗时的，所以使用 StringBuilder 时，尽量不要采用插入操作。</p><p>另外 AppendFormat 采用了与 string.Format 类似的处理方式：遍历字符串找占位符，因此也会造成多余消耗 (这里因为只有一个占位符，因此与普通 3 次追加差距不大，但消耗确实也多了，占位符越多消耗越大)。</p><h3 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h3><p>之前看源码，插入时通过创建一个新的 StringBuilder 插入链表，且默认最小容量为 16。</p><p>但是现在为什么打印出来的 Capacity 容量，这里插入操作的增加反而最小？难道之前分析错了？</p><p>—————————————————————————————————————————</p><p>于是另外写了一份更简单的插入代码，查看链表插入节点信息：</p><p><img data-src="/blogimages/2022/2022-11-18/m_71f1f5a195aab49f88c42ce132b4910e_r.png" alt="" /></p><p><strong>Capacity=this.m_ChunkChars.Length + this.m_ChunkOffset<br />m_ChunkLength = 上一个节点实际使用字符长度<br /> m_ChunkChars.Length = 字符数组长度<br /> m_ChunkOffset = 之前节点实际使用长度总和</strong></p><p>这里插入起始的这个节点，真实容量 Capacity=16<br /> 但是到了后续节点，由于后边节点只统计实际使用长度，后续节点 Capacity=1 + 当前字符数组长度 ，导致只统计了插入字符串实际长度大小，容量就变回去了。</p><p>所以对于插入的节点，测试打印出来的 Capacity 增加很小是个错觉，每个插入的 StringBuilder 依然还是有占用，至少 16 个空字符数组大小。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>最后发现原因就是这么简单：因为是链表结构，扩容的新节点长度等于以前节点总和，所以同样有了倍增的效果。</p><p>不过插入操作则会打乱倍增规律：例如原本 4 个下一次倍增应该为 8，若此时插入一个字符，下一次则扩容为 10。</p><p>另外 AppendFormat 原理与普通 string.Format 类似：遍历字符串找占位符，因此也会造成多余消耗。</p><p>同时顺便测试了下追加与插入等操作的性能，插入原理是创建一个新的、至少 16 个字符容量的 StringBuilder，性能消耗很大，因此得出尽量不要使用插入操作的结论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在上面 &lt;a href=&quot;&quot;&gt;对项目字符串性能优化方式及测试&lt;/a&gt; 文章中，我查看了 StringBuilder 的源码，并总结出了 StringBuilder </summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单测试手动垃圾回收</title>
    <link href="https://wangjiaying.top/2022/11/17/%E6%B5%8B%E8%AF%95%E6%89%8B%E5%8A%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>https://wangjiaying.top/2022/11/17/%E6%B5%8B%E8%AF%95%E6%89%8B%E5%8A%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2022-11-17T08:28:06.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>这两天又复习了下垃圾回收机制，在看到 析构函数 的时候，突然想到：析构函数是在真正垃圾回收时才会执行的，那么是否可以用这个来测试一个对象，什么情况下可以立即被垃圾回收？或者说变成垃圾对象。</p><p>例如，使用完毕后立即赋值为空，它变成垃圾对象了吗？还是其它什么时机才会。</p><p>测试方式为：在不同场景下，调用 GC.Collect ，并查看运行结果：析构函数是否被调用。</p><h2 id="准备"><a class="anchor" href="#准备">#</a> 准备</h2><p>工具：</p><ul><li>VS2022</li><li>.Net6.0</li><li>测试类：</li></ul><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TestClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Doing！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">~</span><span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"被垃圾被回收了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="测试"><a class="anchor" href="#测试">#</a> 测试</h2><h3 id="1情景一方法内部定义对象使用后赋值为空"><a class="anchor" href="#1情景一方法内部定义对象使用后赋值为空">#</a> 1）情景一：方法内部定义对象使用后赋值为空</h3><p>方法内立即调用 GC.Collect ()</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        test <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用。</p><p>将 GC.Collect () 方法调用移动到 DoTest () 方法的 TestMethod () 调用之后：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><p>将  <code>test = null</code>  去掉，依然执行了析构函数。</p><blockquote><h4 id="结论方法块内的代码使用完毕后无论是否赋值为空都不会立即变成垃圾当方法块结束后才会自动成为垃圾对象能够被垃圾回收处理"><a class="anchor" href="#结论方法块内的代码使用完毕后无论是否赋值为空都不会立即变成垃圾当方法块结束后才会自动成为垃圾对象能够被垃圾回收处理">#</a> 结论：方法块内的代码，使用完毕后无论是否赋值为空，都不会立即变成垃圾，当方法块结束后才会自动成为垃圾对象，能够被垃圾回收处理。</h4></blockquote><h3 id="2情景二全局变量方法内部使用后赋值为空"><a class="anchor" href="#2情景二全局变量方法内部使用后赋值为空">#</a> 2）情景二：全局变量方法内部使用后赋值为空</h3><p>方法内立即调用 GC.Collect ()</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">TestClass</span> _test<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        _test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        _test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        _test <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用。</p><p>将 GC.Collect () 方法调用移动到 DoTest () 方法的 TestMethod () 调用之后：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><blockquote><h4 id="结论全局变量方法内部使用后赋值为空在该方法结束后才会变成垃圾对象"><a class="anchor" href="#结论全局变量方法内部使用后赋值为空在该方法结束后才会变成垃圾对象">#</a> 结论：全局变量方法内部使用后赋值为空，在该方法结束后，才会变成垃圾对象。</h4></blockquote><h3 id="3情景三委托方法中包含对象"><a class="anchor" href="#3情景三委托方法中包含对象">#</a> 3）情景三：委托方法中包含对象</h3><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">Action</span> callback <span class="token operator">=</span> TestMethod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        callback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！被垃圾被回收了！</code></pre><p>析构函数被调用了。</p><p>此处改成：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action</span> callback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>结果一致。</p><blockquote><h4 id="结论委托-匿名方法本身新建的局部变量会按照正常的方法调用规则在调用结束后释放"><a class="anchor" href="#结论委托-匿名方法本身新建的局部变量会按照正常的方法调用规则在调用结束后释放">#</a> 结论：委托、匿名方法本身新建的局部变量，会按照正常的方法调用规则在调用结束后释放。</h4></blockquote><h3 id="4情景四匿名方法中包含对象"><a class="anchor" href="#4情景四匿名方法中包含对象">#</a> 4）情景四：匿名方法中包含对象</h3><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token return-type class-name">Action</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">TestClass</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//test.DoSomething();</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> test<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Doing！</code></pre><p>析构函数未被调用，对象生命周期应该变成 DoTest 的了。</p><p>测试方法如下，在调用 DoTest 方法处再进行 GC.Collect 调用：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MainClass</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>main<span class="token punctuation">.</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>则执行了析构函数。</p><p>缓存为类的全局变量：</p><figure class="highlight cs"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Action</span> callback<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/// &lt;summary></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/// 执行测试</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/// &lt;/summary></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        callback <span class="token operator">=</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        callback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>未执行析构函数，除非与上述一样在 DoTest 执行完毕后调用 GC.Collect。</p><blockquote><h4 id="结论匿名方法中引用了局部变量会增加局部变量对象生命周期提升至委托的调用存放级别规则与普通对象一致委托不被置为空变量也会一直存活"><a class="anchor" href="#结论匿名方法中引用了局部变量会增加局部变量对象生命周期提升至委托的调用存放级别规则与普通对象一致委托不被置为空变量也会一直存活">#</a> 结论：匿名方法中引用了局部变量，会增加局部变量对象生命周期，提升至委托的调用 (存放) 级别，规则与普通对象一致 —— 委托不被置为空，变量也会一直存活。</h4></blockquote><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>在方法块内对某个对象赋值为空，不管是全局还是局部变量，该对象并不能立刻成为『垃圾』，至少等该方法块执行完毕后，才可能能够被回收。</p><p>若存在匿名方法使用了局部变量，其生存周期与委托绑定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;这两天又复习了下垃圾回收机制，在看到 析构函数 的时候，突然想到：析构函数是在真正垃圾回收时才会执行的，那么是否可以用这个来测试一个对象，什么情况下可以立即被垃圾回</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="C#" scheme="https://wangjiaying.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>音效资源设置测试与总结</title>
    <link href="https://wangjiaying.top/2022/11/08/%E9%9F%B3%E6%95%88%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>https://wangjiaying.top/2022/11/08/%E9%9F%B3%E6%95%88%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-08T09:25:53.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a class="anchor" href="#0x01-前言">#</a> 0x01 前言</h2><p>之前虽然有用过，但是并没有对其做个人的整理与总结，只大概知道哪个选项会造成什么情况，此处进行一次详尽的实际测试并总结。</p><h2 id="0x02-工具"><a class="anchor" href="#0x02-工具">#</a> 0x02 工具</h2><ul><li>Unity2021.3.6f1</li><li>UnityProfiler</li><li>音效：<img data-src="/blogimages/2022/2022-11-08/m_2c999f422afd7de75758f0b6ae7a97c5_r.png" alt="" /></li></ul><h2 id="0x03-设置选项"><a class="anchor" href="#0x03-设置选项">#</a> 0x03 设置选项</h2><h3 id="1-loadtype"><a class="anchor" href="#1-loadtype">#</a> 1. LoadType</h3><p>分为三个选项，这个选择比较重要：直接决定音效在内存中的大小。</p><h4 id="1-加载即解压decompress-on-load"><a class="anchor" href="#1-加载即解压decompress-on-load">#</a> 1). 加载即解压 (Decompress On Load)</h4><p>性能最好，不过会占用更多内存。</p><p>在内存中的大小至少是选择 PCM 压缩格式在 ImportedSize 的预览大小 —— 因为在选择 Vorbis 后，再选择解压到内存会多一些。</p><p>分别查看设置对应压缩格式后，Imported Size 以及利用 Profiler 查看运行时内存大小。<br />对比如下：</p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.6KB (+3.6KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：310.1KB (+4KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：13.9KB<br /> 运行时内存：343.2KB (+37.2KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：16.6KB<br /> 运行时内存：345.7KB (+39.7KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：22.9KB<br /> 运行时内存：348.1KB (+42KB)</li></ul><p>采样率设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：<br />Imported Size：153.1KB<br /> 运行时内存：156.7KB (+3.6KB)</li><li>ADPCM：<br />Imported Size：43.1KB<br /> 运行时内存：157.1KB (+4KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：7.6KB<br /> 运行时内存：192.9KB (+40KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：9.5KB<br /> 运行时内存：192.9KB (+40KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：12KB<br /> 运行时内存：192.9KB (+40KB)</li></ul><p>Decompress On Load 模式下，在内存中的音效大小与 PCM 的 ImportedSize 显示的大小差不多，其中 PCM 和 ADPCM 在这个基础上多了几 KB，可能是其它数据。</p><p>而当 Vorbis 压缩格式采用 Decompress On Load 则会导致更多的额外内存消耗，平均 40KB 左右。<br /><s>且会随着质量设置越高而增加。</s>，见下方『注 1』，推测为音效源文件 44100Hz 有不一致的地方，手动设置为更低采样率后保存一致。</p><h4 id="2-压缩格式存放在内存compressed-in-memory"><a class="anchor" href="#2-压缩格式存放在内存compressed-in-memory">#</a> 2). 压缩格式存放在内存 (Compressed In Memory)</h4><p>播放时会额外消耗 CPU 解压，内存情况测试如下：</p><p>Original Size：<strong>32.8KB</strong></p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.7KB (+3.7KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：90.7KB (+4.5KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：13.9KB<br /> 运行时内存：39.1KB (+25.2KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：16.6KB<br /> 运行时内存：44.1KB (+27.5KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：22.9KB<br /> 运行时内存：52.9KB (+30KB)</li></ul><p>采样率设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：<br />Imported Size：306KB<br /> 运行时内存：309.7KB (+3.7KB)</li><li>ADPCM：<br />Imported Size：86.2KB<br /> 运行时内存：90.7KB (+4.5KB)</li><li>Vorbis (1% 质量)：<br />Imported Size：7.6KB<br /> 运行时内存：35.3KB (+27.7KB)</li><li>Vorbis (70% 质量)：<br />Imported Size：9.5KB<br /> 运行时内存：37.3KB (+27.7KB)</li><li>Vorbis (100% 质量)：<br />Imported Size：12KB<br /> 运行时内存：39.8KB (+27.7KB)</li></ul><p>通过测试可以看出：</p><p>Compressed In Memory 模式下，PCM 和 ADPCM 下内存占用情况为预览面板的 ImportedSize + 几 KB，总体上差不多。</p><p>Vorbis 压缩模式会额外占用更多内存 (大概多了 30KB 左右)。<br /><s>且会随着质量设置越高而增加。</s>，见下方『注 1』，推测为音效源文件 44100Hz 有不一致的地方，手动设置为更低采样率后保存一致。</p><h4 id="3-流式播放streaming"><a class="anchor" href="#3-流式播放streaming">#</a> 3). 流式播放 (Streaming)</h4><p>流式播放占用内存相对整个文件来说比较少 —— 前提是音效文件本身大于 200KB，根据官方文档介绍，就算小于 200KB 的音效，采用流式播放也会产生 200KB 左右的缓存消耗。</p><p>坏处是播放的时候对 IO、CPU 都会有额外开销。</p><p><img data-src="/blogimages/2022/2022-11-08/m_8a5a8185e25aa508822013b2229e98e0_r.png" alt="" /></p><p>以上述两个音效文件为例，当设置一致 (SampleRateSetting 为 PreserveSampleRate [44100Hz])，并采用流式播放时结果如下：</p><ul><li>PCM：197.7KB</li><li>ADPCM：198KB</li><li>Vorbis (1% 质量)：231.3KB</li><li>Vorbis (70% 质量)：233.8KB</li><li>Vorbis (100% 质量)：236.2KB</li></ul><p>Vorbis 下会多 30KB 左右，且受质量设置影响 (比较小)</p><p>质量影响量太小了，尝试手动设置一下 Sample Rate 为 <strong>44100Hz</strong>：</p><ul><li>PCM：197.7KB</li><li>ADPCM：198KB</li><li>Vorbis (1% 质量)：231.3KB</li><li>Vorbis (70% 质量)：233.8KB</li><li>Vorbis (100% 质量)：236.2KB</li></ul><p>发现同一采样率下，缓存内存占用量没有变化，另外选择 <strong>Optimiz SampleRate</strong> 也是同样的内存占用结果。</p><p>依然以上述两个音效为例，将 Sample Rate 手动设置为 <strong>22050Hz</strong>：</p><ul><li>PCM：163.7KB</li><li>ADPCM：164KB</li><li>Vorbis (1% 质量)：199.9KB</li><li>Vorbis (70% 质量)：199.9KB</li><li>Vorbis (100% 质量)：199.9KB</li></ul><p>可以看到，Vorbis 下依然会多 30KB 左右，但是质量选择已经没有影响了。</p><p>接着缓存 <strong>8000Hz</strong> 的 Sample Rate：</p><ul><li>PCM：141.7KB</li><li>ADPCM：142KB</li><li>Vorbis (1% 质量)：167.9KB</li><li>Vorbis (70% 质量)：167.9KB</li><li>Vorbis (100% 质量)：167.9KB</li></ul><p>可以得出结论：Streaming 播放音效时，至少会产生 140KB (最低 8000Hz 采样率) 左右的内存缓存，Vorbis 压缩格式下会额外增加 30KB 左右的消耗。</p><p>采样率 (越低内存占用越低)、强制单声道也会统一影响到三种设置在流式的缓存占用)，</p><p><font color=red>注 1：上述 <strong>44100Hz</strong> 采样率时，Vorbis 压缩下内存占用会有微小差异，同样适用于  Decompress On Load、Compressed In Memory，推测是音效源文件的采样率部分不一致导致，因为手动设置为更低采样率后就保持一致了。</font></p><h3 id="2-compression-format压缩格式"><a class="anchor" href="#2-compression-format压缩格式">#</a> 2. Compression Format (压缩格式)</h3><ul><li>PCM：不压缩，效果最好文件最大，试过甚至比导入音效本身文件都还大<br /><img data-src="/blogimages/2022/2022-11-08/m_53f9ea44065a5a44a00872836c0c4db6_r.png" alt="" /></li><li>ADPCM：有一定压缩效果，压缩率视情况音效源文件而定，经过测试一般在 50%~80% 浮动，也可能比源文件大小更大。<br /><img data-src="/blogimages/2022/2022-11-08/m_d5e6f3117362ddf0191c81fc14ff473d_r.png" alt="" /></li><li>Vorbis/Mp3：压缩率最高的方式，唯一确定一定能压缩大小的选项，该选项还可以额外设置 Quality，值越小，压缩越厉害，大小也越小<br /><img data-src="/blogimages/2022/2022-11-08/m_b9d67a27160a7a123e41e7187626c837_r.png" alt="" /></li></ul><h3 id="3-force-to-mono"><a class="anchor" href="#3-force-to-mono">#</a> 3. Force To Mono</h3><p>强制单声道，例如下图：</p><p><img data-src="/blogimages/2022/2022-11-08/m_6b48857f690b8f651eb8298e484f2393_r.png" alt="" /></p><p>这个音效就包含了 ch1、ch2 两个声道，若勾选该项，两个声道将会合并为一个，并减少一部分大小。</p><p><img data-src="/blogimages/2022/2022-11-08/m_e5634eac0a5337c2917083632be16d38_r.png" alt="" /></p><p>测试结果：</p><p><strong>文件 1：</strong></p><ul><li>PCM：153.1KB-&gt;76.6KB(50%)</li><li>ADPCM：43.1KB-&gt;21.6KB(50%)</li><li>Vorbis(1%)：7.6KB-&gt;6.4KB(15%)</li><li>Vorbis(100%)：12KB-&gt;9.8KB(18%)</li></ul><p><strong>文件 2：</strong></p><ul><li>PCM：9.6MB-&gt;4.8MB(50%)</li><li>ADPCM：2.7MB-&gt;1.4MB(50%)</li><li>Vorbis(1%)：0.6MB-&gt;426.3KB(30%)</li><li>Vorbis(100%)：2.8MB-&gt;0.6MB(80%)</li></ul><p>通过对两个音效文件：一个大文件及一个小文件对比，可以得出结论：</p><p>强制单声道选项中，PCM 和 ADPCM 的格式可以减少 50% 大小，Vorbis 视压缩质量及音效本身大小而定 —— 这个应该跟音效本身两个通道数据量有关，文件 2 实测双通道声音会有更大的差异。</p><p>注：单声道并不是说只有一个喇叭会播放声音，而是两个喇叭播放同样的声音。</p><h3 id="4-sample-rate"><a class="anchor" href="#4-sample-rate">#</a> 4. Sample Rate</h3><p>采样率，在不影响效果的情况，还可以考虑设置统一的更低的采样率，也会影响大小。</p><p>对于影响效果，测试结果如下：</p><ul><li>PCM(44100Hz)：306KB-&gt;153.1KB(22050Hz)-&gt;76.6KB(11025Hz)-&gt;55.6KB(8000Hz)</li><li>ADPCM(44100Hz)：86.2KB-&gt;43.1KB(22050Hz)-&gt;21.6KB(11025Hz)-&gt;15.7KB(8000Hz)</li><li>Vorbis(1%)(44100Hz)：13.9KB-&gt;7.6KB(22050Hz)-&gt;8.7KB(11025Hz)-&gt;6.1KB(8000Hz)</li><li>Vorbis(100%)(44100Hz)：22.9KB-&gt;12KB(22050Hz)-&gt;11.8KB(11025Hz)-&gt;8.8KB(8000Hz)</li></ul><p>从上述测试结果可以看出，采样率对内存占用影响成比例关系：减少多少采样率，相对就减少多少空间。</p><p>我们游戏音效导入默认是 44100Hz ，就是统一将其设置为 22050Hz，相比初始默认的 44100Hz，减少一半占用，Vorbis 压缩有部分浮动，不过也大体符合规则。</p><h3 id="5-preload-audio-data"><a class="anchor" href="#5-preload-audio-data">#</a> 5. Preload Audio Data</h3><p>根据说明，是会在场景加载时预先加载，默认开启的，适用于那种直接拖到 GameObject 上的音效，过多估计会影响场景加载速度。</p><p>一般最好关了，因为我们都是代码动态加载播放，场景不会直接挂。所以这个选项实际上没用。</p><h3 id="6-load-in-background"><a class="anchor" href="#6-load-in-background">#</a> 6. Load In Background</h3><p>在单独线程延迟加载，不卡主线程，但是这个选项或许会造成音画不同步。</p><h2 id="0x04-总体资源消耗测试"><a class="anchor" href="#0x04-总体资源消耗测试">#</a> 0x04 总体资源消耗测试</h2><p>上面在单项设置中，分别对比过各自会在内存中的占用量，此处将对 内存、CPU 消耗作一个总体对比。</p><p>对于如何测试 CPU 性能的消耗，由于单个音效的播放时很不明显，因此我在测试时采用 20 份播放同一个音效的 AudioSource，并对比总消耗、使用 Profiler 检查每个设置对 CPU 消耗造成的影响，取平均出现最多的值。</p><p>同时为了减少内存误差，测试文件更换了一个更大的音效，OriginalSize 为 2.8MB。</p><p>其默认测试设置如下：<br /><img data-src="/blogimages/2022/2022-11-08/m_8ffecf7064f644e1473a9626eb88d393_r.png" alt="" /></p><h4 id="1-压缩格式vorbis1质量"><a class="anchor" href="#1-压缩格式vorbis1质量">#</a> 1) 压缩格式：Vorbis (1% 质量)</h4><p><img data-src="/blogimages/2022/2022-11-08/m_e427525c6a80e39dc0ecddc990751942_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;2.5%-&gt;2.8%<br /> 内存消耗：7.3MB-&gt;2.8MB-&gt;5.9MB</p><h4 id="2-压缩格式vorbis100质量"><a class="anchor" href="#2-压缩格式vorbis100质量">#</a> 2) 压缩格式：Vorbis (100% 质量)</h4><p><img data-src="/blogimages/2022/2022-11-08/m_fcd8822723b729b78904dfc82246b15c_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;4.9%-&gt;5%<br /> 内存消耗：7.3MB-&gt;3.7MB-&gt;5.9MB</p><h4 id="3-压缩格式adpcm"><a class="anchor" href="#3-压缩格式adpcm">#</a> 3) 压缩格式：ADPCM</h4><p><img data-src="/blogimages/2022/2022-11-08/m_2c08a89d388540ae8df5de75acd03a33_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;1.8%-&gt;2.1%<br /> 内存消耗：7.2MB-&gt;3.8MB-&gt;5.6MB</p><h4 id="4-压缩格式pcm"><a class="anchor" href="#4-压缩格式pcm">#</a> 4) 压缩格式：PCM</h4><p><img data-src="/blogimages/2022/2022-11-08/m_531b2b0591cf77c7e75377e99be059ec_r.png" alt="" /></p><p>从左自右 LoadType 分别为： Decompress On Load、Compress In Memery、Streaming</p><p>CPU 消耗：1%-&gt;1.1%-&gt;1.4%<br /> 内存消耗：7.2MB-&gt;7.2MB-&gt;5.6MB</p><h4 id="5-总结"><a class="anchor" href="#5-总结">#</a> 5) 总结</h4><p>上述测试结果中，感觉其中 Streaming Vorbis 内存占用与预计的有点不符，于是使用单 AudioSource 额外进行测试：</p><p><img data-src="/blogimages/2022/2022-11-08/m_8ea6c5c446af60829b7e9b32c492c26b_r.png" alt="" /></p><p>Streaming 播放模式，从左自右分别为：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM</p><p>CPU 消耗：0.5%-&gt;0.5%-&gt;0.4%-&gt;0.3%<br /> 内存消耗：2.6MB-&gt;2.6MB-&gt;2.5MB-&gt;2.5MB</p><p>Vorbis 压缩格式，在 Streaming 下 Taotal Audio Memery 消耗多了 100KB 的样子，而在上面使用 Take Sample 单个查看时只额外多了 30KB 内存占用。</p><p>这里只能推测两个原因：</p><ul><li>要么 Taotal Audio Memery 还计算了其它数据</li><li>要么由于统计没有显示具体 KB 消耗值导致的误认 (例如 PCM 原本为 2.57MB 一类，加上 30KB 左右就到 2.6MB 了)。</li></ul><p>另外需要注意的是，Streaming 播放模式下，会随着通同一个文件的反复加载，而叠加文件流及解码内存消耗 —— 例如上述单个播放为 124KB-&gt;20 个 = 124KBx20=2.4MB</p><h5 id="总体内存消耗"><a class="anchor" href="#总体内存消耗">#</a> 总体内存消耗：</h5><p>Decompress On Load：Vorbis 额外 30KB 左右内存消耗，总体差不多<br /> Compress In Memery：PCM-&gt;ADPCM-&gt;Vorbis (100% 质量)-&gt;Vorbis (1% 质量)<br /> Streaming：Vorbis 额外几十 KB 内存消耗，总体差不多</p><h5 id="总体cpu消耗"><a class="anchor" href="#总体cpu消耗">#</a> 总体 CPU 消耗：</h5><p>Decompress On Load：CPU 消耗基本一致<br /> Compress In Memery：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM<br />Streaming：Vorbis (100% 质量)-&gt;Vorbis (1% 质量)-&gt;ADPCM-&gt;PCM</p><h4 id="疑问"><a class="anchor" href="#疑问">#</a> 疑问</h4><blockquote><p>对于总体内存消耗，或许会有疑问（比如说我自己）：在测试单个音效播放时，Profiler Audio 面板中的 Total Audio Memery 的内存数值，比 Profiler Memery 面板中 Take Sample 获取到的单个音效内存占用更大，这个是每个音效实际都比 TakeSample 大些，还是说仅仅因为 Total Audio Memery 计算了其它额外内存？</p></blockquote><p>于是进行测试，首先是空场景 Audio 信息统计：<br /><img data-src="/blogimages/2022/2022-11-08/m_c1482d2c86711e3b82d23fed6e922ae3_r.png" alt="" /></p><p>接着使用三个不同大小的音效，使用 PCM (Decompress On Load) 格式进行播放，查看 Total Audio Memery 数值：<br /><img data-src="/blogimages/2022/2022-11-08/m_62f502a630dccf7903d280cd34439677_r.png" alt="" /></p><p>可以发现 Total Audio Memery 数值是根据 PCM Imported Size 大小增加的，Sample Sound Memery (Decompress On Load 解压内存占用量) 亦是按照实际大小跟随递增。</p><h5 id="补充-pcmcompressed-in-memory-模式"><a class="anchor" href="#补充-pcmcompressed-in-memory-模式">#</a> 补充 PCM (Compressed In Memory) 模式：</h5><p><img data-src="/blogimages/2022/2022-11-08/m_93c42e0ec47651dd4433f781999ed190_r.png" alt="" /><br />DSP CPU：项目在加载类型为 Compressed In Memory 的非流式声音的混音、音频效果和解压缩中使用的 CPU 量。<br />Sample Sound Memory：加载类型为 Decompress On Load 的音频文件用于所有已解压缩样本数据的内存量。</p><p>也就是可以得出结论：</p><ul><li>Total Audio Memery 是所有内存总量，确实是计算了额外消耗内存的。</li><li>Profiler Memery 面板中 Take Sample 获取到的单个音效内存就是实际占用量，与总消耗内存可以表现出一种递增的对应关系。</li><li>PCM 虽然是无压缩格式，但若是选择 Compressed In Memory ，虽然单个音效内存跟选择与否没有变化，但对总体内存也会有一定影响 (测试表现是增加了一点)。</li></ul><h2 id="0x05-压缩格式对最终-assetbunle-资源影响"><a class="anchor" href="#0x05-压缩格式对最终-assetbunle-资源影响">#</a> 0x05 压缩格式对最终 AssetBunle 资源影响</h2><h4 id="1-默认设置-samplerate-22050hz-pcm-格式"><a class="anchor" href="#1-默认设置-samplerate-22050hz-pcm-格式">#</a> 1) 默认设置、SampleRate 22050Hz、PCM 格式：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_0d325cddd386fb945373c5d125e95248_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_0d75a39f780213b3007ecbd23f996ac8_r.png" alt="" /></p><h4 id="2-默认设置-samplerate-22050hz-adpcm-格式"><a class="anchor" href="#2-默认设置-samplerate-22050hz-adpcm-格式">#</a> 2) 默认设置、SampleRate 22050Hz、ADPCM 格式：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_de861340a651647f686105eb35f7fb16_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_16d83cb95231207d45e0362af6914021_r.png" alt="" /></p><h4 id="3-默认设置-samplerate-22050hz-vorbis-压缩质量-70"><a class="anchor" href="#3-默认设置-samplerate-22050hz-vorbis-压缩质量-70">#</a> 3) 默认设置、SampleRate 22050Hz、Vorbis 压缩，质量 70%：</h4><p><img data-src="/blogimages/2022/2022-11-08/m_7eea0eda7f26befe6ca6567c999d3493_r.png" alt="" /><br /><img data-src="/blogimages/2022/2022-11-08/m_a22fc28a39eb76fc140d69a392fd0928_r.png" alt="" /></p><p>可以看出，跟图片压缩一样，压缩格式对最终出包的 AssetBunle 资源大小也会有影响，除压缩方式选择外，Vorbis 压缩质量数值也会影响。</p><p>最终 AssetBundle 包大小基本与音效面板上的 ImportedSize 差不多 (+ 部分 AssetBundle 额外数据)。</p><h2 id="0x06-总结"><a class="anchor" href="#0x06-总结">#</a> 0x06 总结</h2><p>测试结果有些与之前预想的一致，也有部分预想被『推翻』。</p><p>在<font color=blue>内存占用量</font>上，对于 Decompress On Load、Compressed In Memory、Streaming 三种 LoadType 方式：</p><ul><li>Decompress On Load 是以 <font color=red>PCM 格式下 ImportedSize 大小</font>为基准，PCM、ADPCM 格式下在内存解压后占用量基本一致，Vorbis 多占用 40KB 左右</li><li>Compressed In Memory：压缩模式存放内存，Vorbis 压缩会比 <font color=red>自身 ImportedSize</font> 大 30KB 左右</li><li>Streaming 以 200KB 缓存为基准，Vorbis 压缩后加载相比另外两种会额外占用 30KB 左右的内存。<br /><font color=red>注 1：关于内存占用比较基准，需要注意的是比较基准对象是不同的，这篇文章写完了，我脑袋就混乱了几天才反应过来</font><br /><font color=red>注 2：大的音效也满足该标准，上述 OriginalSize 为 2.8MB、32.8KB 的音效 Profiler 表现基本一致</font></li></ul><p>在 <font color=blue>CPU 资源消耗</font>上，对于 Decompress On Load、Compressed In Memory、Streaming 三种 LoadType 方式：</p><ul><li>Decompress On Load：CPU 消耗差不多</li><li>Compressed In Memory：压缩存放内存时，以 PCM-&gt;ADPCM-&gt;Vorbis (质量越高消耗越多)</li><li>Streaming：流式播放时，以 PCM-&gt;ADPCM-&gt;Vorbis (质量越高消耗越多)</li></ul><p>在<font color=blue>音效质量</font>上：</p><ul><li>主要受压缩格式影响。PCM 不压缩效果最好，ADPCM 其次，Vorbis 最后。</li><li>对此可以在预览面板看出，更换压缩格式后，振幅会有轻微变动 —— 不过从实际听起来的效果看，PCM、ADPCM 和 Vorbis 高质量压缩下的效果差不多，至少个人没听出太大差别。</li><li>经过测试，如果源音效质量就不大行，PCM 和 Vorbis 效果是一样，修改该项音效振幅不会发生任何改动 —— 甚至 Vorbis 1%~100% 质量都没有差别，比如测试所用的 『lvbu』 音效。</li></ul><p>另外 Force To Mono、Sample Rate 统一影响上述表现 (CPU、内存消耗、表现质量)</p><p>经过上面的测试，可以发现音效设置主要是质量换效率、或者空间换时间、或者时间换空间，总有一定取舍。</p><p>因此最后再说一下个人总结：</p><ul><li>可以使用 PCM 模式下的 Imported Size 预估实际解压消耗内存量</li><li>没有绝对的最好设置，这个设置可能需要平衡 包体、内存、CPU 消耗得出结论，前期可以选择一个合适的格式统一设置，后续完整了再进行具体优化</li><li>以 PCM ImportedSize 为基准，一两百 KB、比较频繁使用的小音效，例如按钮声音、战斗中的技能音效，可以考虑使用 ADPCM 压缩格式<br />普通小音效选择 Compress In Memery、非常频繁的音效选择 Decompress On Load</li><li>大一点或者比较少用的音效，不至于常影响到 CPU，采用 Vorbis 压缩，LoadType 采用 Compress In Memery。</li><li>采用 Vorbis 压缩可以调节质量滑块减少内存及 CPU 消耗 (当然这样音效质量也会受到影响)</li><li>十几兆或者几十兆的，如果直接放在内存会很影响的情况下再考虑是否用流式播放 (感觉手游应该也不至于，对于手游来说还是有点奢侈了)，采用流式播放最好采用 ADPCM 或 PCM 格式了，省一些播放时的 CPU 解压消耗。</li><li>另外在可以接受的情况下， Sample Rate 可以设置为 22050Hz，比默认 44100Hz 减少一半的占用</li><li>Force To Mono 在小音效上应该也可以勾上，例如按钮点击音效总不能也是真的立体声吧，也可以省下一半资源。不过在音效源文件本身就是纯单通道的时候，勾选与否都没有影响</li></ul><p>在我们游戏中，都是采用前两种 LoadType+Vorbis 压缩方式，质量 70%、压缩模式存放 (Compressed In Memory)、SampleRate 22050Hz。</p><p>注：选择压缩同时也会影响打包资源大小，最终 AssetBundle 包大小基本与音效面板上的 ImportedSize 差不多 (+ 部分 AssetBundle 额外数据)。最终设置得权衡质量、包体和内存及性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#0x01-前言&quot;&gt;#&lt;/a&gt; 0x01 前言&lt;/h2&gt;
&lt;p&gt;之前虽然有用过，但是并没有对其做个人的整理与总结，只大概知道哪个选项会造成什么情况，此处进行一次详尽的实际测试并总结。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/categories/Unity3D/"/>
    
    <category term="资源设置" scheme="https://wangjiaying.top/categories/Unity3D/%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="Unity3D" scheme="https://wangjiaying.top/tags/Unity3D/"/>
    
    <category term="性能优化" scheme="https://wangjiaying.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于二进制十六进制转十进制与ARGB图片存储格式</title>
    <link href="https://wangjiaying.top/2022/11/03/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6/"/>
    <id>https://wangjiaying.top/2022/11/03/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6/</id>
    <published>2022-11-03T02:38:36.000Z</published>
    <updated>2022-12-22T03:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a class="anchor" href="#0x01-前言">#</a> 0x01 前言</h2><p>今天写文章的时候，突然想起用十六进制当做标题序号，于是再记录一下。</p><h2 id="0x02-十六进制与十进制转换"><a class="anchor" href="#0x02-十六进制与十进制转换">#</a> 0x02 十六进制与十进制转换</h2><p>首先，在十六进制中 1~16 数字代表有：0,1,2,3,4,56,7,8,9,A (10),B (11),C (12),D (13),E (14),F (15)</p><p>前位为 0 可以被忽略，例如：</p><p>0x1<mark>0x01</mark>1<br />0x0A<mark>0xA</mark>10</p><p>只有前一位有大于 1 的情况才会作计算，如：</p><p>0x1A<mark>26</mark>1*16+10</p><p>后位为 0 则会使前一位成为进位数：</p><p>0xA00==10<em>16</em>16+0+0=2560</p><p>对于进位来说，当前处于哪位，计算时就需要自身数值乘对应数量 N 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>6</mn><mi>N</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">16^N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 次方</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi>x</mi><mi>A</mi><mi>A</mi><mi>A</mi><mo>=</mo><mo>=</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>2</mn></msup><mo>+</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>1</mn></msup><mo>+</mo><mn>10</mn><mo>∗</mo><mn>1</mn><msup><mn>6</mn><mn>0</mn></msup><mo>=</mo><mo>=</mo><mn>2730</mn></mrow><annotation encoding="application/x-tex">0xAAA==10*16^2+10*16^1+10*16^0==2730</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord mathnormal">A</span><span class="mord mathnormal">A</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord">3</span><span class="mord">0</span></span></span></span></p><p>同理，经常见到的颜色值：0xFFFF 类似</p><p>0xFFFF<mark>15<em>16</em>16<em>16+15</em>16<em>16+15</em>16+15</mark>65535</p><p>这中最大值的情况，计算其实可以简化一下：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>6</mn><mn>4</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mo>=</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>∗</mo><mn>16</mn><mo>−</mo><mn>1</mn><mo>=</mo><mo>=</mo><mn>65535</mn></mrow><annotation encoding="application/x-tex">16^4-1==16*16*16*16-1==65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">5</span><span class="mord">5</span><span class="mord">3</span><span class="mord">5</span></span></span></span></p><h2 id="0x03-二进制与十进制转换"><a class="anchor" href="#0x03-二进制与十进制转换">#</a> 0x03 二进制与十进制转换</h2><p>对于二进制转十进制，常用的还是数数。</p><p>数二进制中有多少个 1 ，这个 1 所占用的位置 N 作为 2 (N-1) 次方，然后累加起来。</p><p>例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1011</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">1011=2^3+2^1+2^0=15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span></p><p>例如 4 个字节 容量有多大？</p><p>我们知道：</p><p>1 个字节有 8 位<mark> 0b11111111</mark>255<br />2 个字节有 16 位<mark> 0b1111111111111111</mark>256<em>256-1=65535<br />3 个字节有 24 位<mark> 0b111111111111111111111111</mark>256</em>256<em>256-1=16777215<br />4 个字节有 32 位<mark> 0b11111111111111111111111111111111</mark>256</em>256<em>256</em>256-1=4294967295</p><p>一张 ARGB32 的图片格式就是：</p><p>每个通道 8 位 ==255 表示一个颜色，也就是我们常见的 (255,255,255,255) 颜色组合，也即是『原图』。</p><p>上次评审也问到过这个问题：没答上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#0x01-前言&quot;&gt;#&lt;/a&gt; 0x01 前言&lt;/h2&gt;
&lt;p&gt;今天写文章的时候，突然想起用十六进制当做标题序号，于是再记录一下。&lt;/p&gt;
&lt;h2 id=&quot;0x02-十六进制与十进制转换&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="理论研究" scheme="https://wangjiaying.top/categories/%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="数学" scheme="https://wangjiaying.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
